document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
library(devtools)
document()
check()
document()
check()
install()
?VhgEvalIdenBoxplot
library(devtools)
document()
check()
install()
library(Virusparies)
?VhgEvalIdenBoxplot
library(devtools)
document()
check()
install()
library(Virusparies)
?VhgEvalIdenBoxplot
?tools
tools::file_ext("plot.png")
tools::file_ext("plot.jpeg")
tools::file_ext("plot.jpg")
tools::file_ext("plot.nps")
sub('.*\\.', '', tolower("plot.png"))
sub('.*\\.', '', tolower("plot.Png"))
sub('.*\\.', '', tolower("plot.Jng"))
width = 800
height = 600
file_name="plot.png"
ormat <- sub('.*\\.', '', tolower(file_name))
format <- sub('.*\\.', '', tolower(file_name))
print(paste0("the image will be in the format: ",width,"X",height," ",format))
print(paste0(file_name," will be in the format: ",width,"X",height," ",format))
print(paste0(file_name," will be exported in the following format: ",width,"X",height," ",format))
print(paste0(file_name," will be exported in the following format: ",width,"X",height," in",format," format."))
print(paste0(file_name," will be exported in the following format: ",width,"X",height," in ",format," format."))
?png
?svg
usethis::use_package("grDevices",type = "Imports")
library(devtools)
document()
check()
?svg
document()
check()
?pdf
document()
check()
?scg
document()
check()
?pdf
?png
?jpeg
document()
check()
library(Virusparies)
?VhgEvalIdenBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
View(vg_file)
VhgEvalIdenBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len")
library(devtools)
document()
check()
document()
check()
install()
library(Virusparies)
?VhgEvalIdenBoxplot
library(devtools)
document()
check()
document()
check()
document()
document()
check()
library(devtools)
document()
check()
install()
?VhgBoxplot
library(Virusparies)
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
# plot 5: Virusgatherer plot for SRA_runs agains contig length
plot5 <- VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len")
plot5
plot5$outlier
View(plot5$outlier)
names(vg_file)
find_outlier_eval_box <- function(vh_file,group="best_query",y_column="ViralRefSeq_E"){
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5*IQR(x) | x > quantile(x, .75) + 1.5*IQR(x))
}
outlier <- vh_file %>%
group_by(vh_file[[group]]) %>%
mutate(outlier = ifelse(find_outlier(-log10(.data[[y_column]])), -log10(.data[[y_column]]), NA))
outlier <- outlier[!is.na(outlier$outlier),]
return(outlier)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
library(dplyr)
find_outlier_eval_box <- function(vh_file,group="best_query",y_column="ViralRefSeq_E"){
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5*IQR(x) | x > quantile(x, .75) + 1.5*IQR(x))
}
outlier <- vh_file %>%
group_by(vh_file[[group]]) %>%
mutate(outlier = ifelse(find_outlier(-log10(.data[[y_column]])), -log10(.data[[y_column]]), NA))
outlier <- outlier[!is.na(outlier$outlier),]
return(outlier)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
find_outlier_eval_box <- function(vh_file, group="best_query", y_column="ViralRefSeq_E") {
# Detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
# Apply the outlier detection to each group
outlier <- vh_file %>%
group_by(.data[[group]]) %>%
mutate(log_value = -log10(.data[[y_column]]),  # Calculate the log value
is_outlier = find_outlier(log_value),   # Determine if it's an outlier
outlier_value = ifelse(is_outlier, log_value, NA)) %>%
ungroup()  # Ungroup to prevent grouped data issues later
# Filter to keep only the outliers
outliers_only <- outlier %>%
filter(!is.na(outlier_value)) %>%
select(-log_value, -is_outlier)  # Optionally remove intermediate columns
return(outliers_only)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
View(vg_file)
vg_file[,c(1,7)]
find_outlier_eval_box <- function(vh_file, group="SRA_run", y_column="contig_len") {
# Helper function to detect outliers
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
# Apply the outlier detection to each group
outlier <- vh_file %>%
group_by(.data[[group]]) %>%
mutate(
log_value = -log10(.data[[y_column]]),  # Calculate the log value
is_outlier = find_outlier(log_value),   # Determine if it's an outlier
outlier_value = ifelse(is_outlier, log_value, NA) # Mark outliers
) %>%
ungroup()  # Ungroup to prevent grouped data issues later
# Filter to keep only the outliers
outliers_only <- outlier %>%
filter(!is.na(outlier_value)) %>%
select(-log_value, -is_outlier)  # Optionally remove intermediate columns
return(outliers_only)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
library(devtools)
document()
check()
document()
document()
check()
document()
check()
document()
install()
library(Virusparies)
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
library(dplyr)
names(vg_file)
find_outlier_eval_box <- function(vh_file, group = "best_query", y_column = "ViralRefSeq_E") {
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
outlier <- vh_file %>%
group_by(vh_file[[group]]) %>%
mutate(outlier_value = ifelse(y_column == "ViralRefSeq_E", -log10(.data[[y_column]]), .data[[y_column]]),
outlier = ifelse(find_outlier(outlier_value), outlier_value, NA))
outlier <- outlier[!is.na(outlier$outlier), ]
return(outlier)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
find_outlier_eval_box <- function(vh_file,group="best_query",y_column="ViralRefSeq_E"){
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5*IQR(x) | x > quantile(x, .75) + 1.5*IQR(x))
}
outlier <- vh_file %>%
group_by(vh_file[[group]]) %>%
mutate(outlier = ifelse(find_outlier(-log10(.data[[y_column]])), -log10(.data[[y_column]]), NA))
outlier <- outlier[!is.na(outlier$outlier),]
return(outlier)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
find_outlier_eval_box <- function(vh_file, group = "best_query", y_column = "ViralRefSeq_E") {
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
outlier <- vh_file %>%
group_by(vh_file[[group]]) %>%
mutate(outlier_value = ifelse(y_column == "ViralRefSeq_E", -log10(.data[[y_column]]), .data[[y_column]]),
outlier = ifelse(find_outlier(outlier_value), outlier_value, NA))
outlier <- outlier[!is.na(outlier$outlier), ]
return(outlier)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
find_outlier_eval_box <- function(vh_file, group = "best_query", y_column = "ViralRefSeq_E") {
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
# Apply transformation only if y_column is "ViralRefSeq_E"
vh_file <- vh_file %>%
mutate(transformed_value = ifelse(y_column == "ViralRefSeq_E", -log10(.data[[y_column]]), .data[[y_column]]))
# Identify outliers within each group
outliers <- vh_file %>%
group_by(.data[[group]]) %>%
mutate(is_outlier = find_outlier(transformed_value)) %>%
filter(is_outlier) %>%
select(-is_outlier)
return(outliers)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
find_outlier_eval_box <- function(vh_file, group = "best_query", y_column = "ViralRefSeq_E") {
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
# Apply transformation only if y_column is "ViralRefSeq_E"
vh_file <- vh_file %>%
mutate(transformed_value = ifelse(y_column == "ViralRefSeq_E", -log10(.data[[y_column]]), .data[[y_column]]))
print(unique(vh_file[[y_column]]))  # Check unique values in y_column
print(unique(vh_file$transformed_value))  # Check unique values in transformed_value
# Identify outliers within each group
outliers <- vh_file %>%
group_by(.data[[group]]) %>%
mutate(is_outlier = find_outlier(transformed_value)) %>%
filter(is_outlier) %>%
select(-is_outlier)
return(outliers)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
find_outlier_eval_box <- function(vh_file, group = "best_query", y_column = "ViralRefSeq_E") {
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
# Apply transformation only if y_column is "ViralRefSeq_E"
vh_file <- vh_file %>%
mutate(transformed_value = ifelse(y_column == "ViralRefSeq_E", -log10(.data[[y_column]]), .data[[y_column]]))
print(summary(vh_file))  # Check summary of the dataframe
# Identify outliers within each group
outliers <- vh_file %>%
group_by(.data[[group]]) %>%
mutate(is_outlier = find_outlier(transformed_value)) %>%
filter(is_outlier) %>%
select(-is_outlier)
return(outliers)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
find_outlier_eval_box <- function(vh_file, group = "best_query", y_column = "ViralRefSeq_E") {
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
print("Before transformation:")
print(head(vh_file))  # Print a sample of the dataframe before transformation
# Apply transformation only if y_column is "ViralRefSeq_E"
vh_file <- vh_file %>%
mutate(transformed_value = ifelse(y_column == "ViralRefSeq_E", -log10(.data[[y_column]]), .data[[y_column]]))
print("After transformation:")
print(head(vh_file))  # Print a sample of the dataframe after transformation
# Identify outliers within each group
outliers <- vh_file %>%
group_by(.data[[group]]) %>%
mutate(is_outlier = find_outlier(transformed_value)) %>%
filter(is_outlier) %>%
select(-is_outlier)
return(outliers)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
find_outlier_eval_box <- function(vh_file, group = "best_query", y_column = "ViralRefSeq_E") {
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
# Apply transformation only if y_column is "ViralRefSeq_E"
vh_file <- vh_file %>%
mutate(transformed_value = case_when(
y_column == "ViralRefSeq_E" ~ -log10(.data[[y_column]]),
TRUE ~ .data[[y_column]]
))
# Print a sample of the dataframe after transformation
print(head(vh_file))
# Identify outliers within each group
outliers <- vh_file %>%
group_by(.data[[group]]) %>%
mutate(is_outlier = find_outlier(transformed_value)) %>%
filter(is_outlier) %>%
select(-is_outlier)
return(outliers)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
find_outlier_eval_box <- function(vh_file, group = "best_query", y_column = "ViralRefSeq_E") {
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
# Apply transformation only if y_column is "ViralRefSeq_E"
vh_file <- vh_file %>%
mutate(transformed_value = case_when(
y_column == "ViralRefSeq_E" ~ -log10(.data[[y_column]]),
TRUE ~ .data[[y_column]]
))
# Identify outliers within each group
outliers <- vh_file %>%
group_by(.data[[group]]) %>%
mutate(is_outlier = find_outlier(transformed_value)) %>%
filter(is_outlier) %>%
select(-is_outlier)
return(outliers)
}
find_outlier_eval_box(vg_file,"SRA_run","contig_len")
View(find_outlier_eval_box(vg_file,"SRA_run","contig_len"))
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
View(find_outlier_eval_box(vh_file))
library(devtools)
document()
check()
document()
document()
document()
check()
document()
document()
check()
find_outlier_eval_box <- function(vh_file, group = "best_query", y_column = "ViralRefSeq_E") {
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
# Apply transformation only if y_column is "ViralRefSeq_E"
if(y_column == "ViralRefSeq_E") {
vh_file$transformed_value <- -log10(vh_file[[y_column]])
} else {
vh_file$transformed_value <- vh_file[[y_column]]
}
# Identify outliers within each group
outliers <- lapply(split(vh_file, vh_file[[group]]), function(subgroup) {
subgroup$outlier <- ifelse(find_outlier(subgroup$transformed_value), subgroup$transformed_value, NA)
na.omit(subgroup)
})
return(do.call(rbind, outliers))
}
find_outlier_eval_box(vh_file)
View(find_outlier_eval_box(vh_file))
View(find_outlier_eval_box(vg_file,"SRA_run","contig_len"))
vg_file
View(vg_file)
View(find_outlier_eval_box(vg_file,"SRA_run","contig_len"))
View(vg_file)
find_outlier_eval_box <- function(vh_file, group = "best_query", y_column = "ViralRefSeq_E") {
## detect outlier in boxplot
find_outlier <- function(x) {
return(x < quantile(x, .25) - 1.5 * IQR(x) | x > quantile(x, .75) + 1.5 * IQR(x))
}
# Apply transformation only if y_column is "ViralRefSeq_E"
if(y_column == "ViralRefSeq_E") {
vh_file$transformed_value <- -log10(vh_file[[y_column]])
} else {
vh_file$transformed_value <- vh_file[[y_column]]
}
# Identify outliers within each group
outliers <- lapply(split(vh_file, vh_file[[group]]), function(subgroup) {
subgroup$outlier <- ifelse(find_outlier(subgroup$transformed_value), subgroup$transformed_value, NA)
na.omit(subgroup)
})
# Combine outliers from all groups
result <- do.call(rbind, outliers)
# Reset row names
rownames(result) <- NULL
return(result)
}
View(find_outlier_eval_box(vg_file,"SRA_run","contig_len"))
View(find_outlier_eval_box(vh_file))
document()
check()
document()
check()
install()
library(Virusparies)
?VhgBoxplot
return(result)
library(devtools)
document()
check()
install()
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
View(plot1$outlier)
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
# plot 4: virusgatherer plot with SRA_run as custom grouping
plot4 <- VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "ViralRefSeq_E")
View(plot4$outlier)
library(devtools)
document()
check()
plot4$outlier<- NULL
plot4$outlier
View(plot4$outlier)
View(plot4)
View(plot1$outlier$outlier)<-NULL
plot1$outlier$outlier<-NULL
View(plot1)
plot1[["outlier"]]
View(plot1[["outlier"]])
document()
check()
install()
?Vh
library(Virusparies)
?VhgBoxplot
library(devtools)
document()
check()
install()
document()
library(devtools)
document()
check()
install()
?VhgBoxplot
library(devtools)
library(Virusparies)
document()
check()
install()
install(Virusparies)
library(Virusparies)
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
plot5 <- VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",cut = 1e-6)
plot5$boxp
plot5 <- VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",cut = 1e-20)
plot5$boxp
plot5 <- VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",cut = 1e-30)
plot5$boxp
plot5 <- VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",cut = 1e-100)
plot5$boxp
nrow(vg_file)
View(vg_file)
vg_file <-NULL
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
vg_file <- vg_file[FALSE, ]
is.null(vg_file)
is_vh_file_empty <- function(vh_file) {
if (nrow(vh_file) == 0) {
stop("Error: Hittables has zero rows.")
}
}
is_vh_file_empty(vg_file)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
is_vh_file_empty(vg_file)
is_vh_file_empty(vg_file)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
is_vh_file_empty(vh_file)
library(devtools)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
document()
check()
document()
document()
check()
library(devtools)
install()
