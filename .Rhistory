.data$Family %in% my_list[[i]])
if (nrow(match_row) > 0) {
phylum <- match_row$Phylum[1]
processed_taxonomy[i] <- paste("unclassified", phylum)
} else {
processed_taxonomy[i] <- "unclassified"
}
} else {
processed_taxonomy[i] <- entry
}
}
# Update the ViralRefSeq_taxonomy column in vh_file
vh_file$ViralRefSeq_taxonomy <- unlist(processed_taxonomy)
return(vh_file)
}
vh_file <- taxonomy_group_preprocess(vh_file)
library(readxl)
ICTV_data <- read_xlsx("/media/sergej/My Book/Rskripte_f-r_masterarbeit-main/data/ICTV_Master_Species_List_2023_MSL39.v2.xlsx")
ICTV_data <- read_xlsx("/media/sergej/My Book/Rskripte_f-r_masterarbeit-main/data/ICTV_Master_Species_List_2023_MSL39.v2.xlsx",sheet = 2)
View(vh_file)
vh_file <- taxonomy_group_preprocess(vh_file)
library(dplyr)
vh_file <- taxonomy_group_preprocess(vh_file)
unique_phyla <- c(
Taleaviricota = "#800000",
Peploviricota = "#9A6324",
Uroviricota = "#ffd8b1",
Hofneiviricota = "#469990",
Phixviricota = "#000075",
Cossaviricota = "#e6194B",
Cressdnaviricota = "#f58231",
Saleviricota = "#ffe119",
Ambiviricota = "#bfef45",
Duplornaviricota = "#3cb44b",
Kitrinoviricota = "#42d4f4",
Lenarviricota = "#4363d8",
Negarnaviricota = "#911eb4",
Pisuviricota = "#f032e6",
Artverviricota = "#808000",
Nucleocytoviricota = "#fffac8",
Preplasmiviricota = "#aaffc3",
Dividoviricota = "#dcbeff",
unclassified = "#a9a9a9"
)
# Assuming ICTV_data is properly loaded and formatted
ICTV_data <- ICTV_data  # Replace with your actual ICTV_data
# Split the data frame by the 'Phylum' column
ICTV_data_split <- split(ICTV_data, ICTV_data$Phylum)
# Initialize family colors vector
family_colors_vector <- character(length = length(unique(ICTV_data$Family)))
names(family_colors_vector) <- unique(ICTV_data$Family)
phylum_mapping <- list()
for (phylum_name in names(ICTV_data_split)) {
phylum_color <- unique_phyla[phylum_name]
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
family_colors <- rep(phylum_color, length(unique_families))
family_colors_vector[unique_families] <- family_colors
phylum_mapping[unique_families] <- phylum_name
}
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
phylum_mapping
# Get unique families in vh_file[groupby]
unique_families_in_data <- unique(vh_file[[groupby]])
# Handle unmatched virus groups (NA values)
unmatched <- is.na(matched_colors)
# Create a named vector
names(labels) <- unique_labels
# Get unique families in vh_file[groupby]
unique_families_in_data <- unique(vh_file[["ViralRefSeq_taxonomy"]])
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
#print(partial_matches)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Handle unmatched virus groups (NA values)
unmatched <- is.na(matched_colors)
matched_colors[unmatched] <- unique_phyla["unclassified"]
# Filter out NA values (no matches) and corresponding family names
matched_families <- unique_families_in_data[!is.na(matched_colors)]
matched_colors <- matched_colors[!is.na(matched_colors)]
# Handle empty strings represented as ""
empty_strings <- matched_colors == ""
matched_colors[empty_strings] <- unique_phyla["unclassified"]
# Create matched_vector with matched colors and their names
matched_vector <- c(matched_colors)
names(matched_vector) <- matched_families
# Iterate over the colors in family_colors_vector
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
legend_labels[legend_labels == "#a9a9a9"]<- "unclassified"
# Extract unique names and corresponding values
unique_labels <- unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
# Loop through legend_labels to substitute "unclassified" entries
for (label in names(legend_labels)) {
if (grepl("^unclassified", label)) {  # Check if label starts with "unclassified"
phylum <- sub("^unclassified (.*)", "\\1", label)  # Extract the phylum name
legend_labels[label] <- phylum  # Replace "unclassified" with the phylum name
}
}
legend_labels
labels
names(legend_labels)
names(unique_phyla)
names(legend_labels)
legend_labels
unique(legend_labels)
names(labels)
setdiff(names(labels), unique(legend_labels))
# Define the unique_phyla with colors
unique_phyla <- c(
Taleaviricota = "#800000",
Peploviricota = "#9A6324",
Uroviricota = "#ffd8b1",
Hofneiviricota = "#469990",
Phixviricota = "#000075",
Cossaviricota = "#e6194B",
Cressdnaviricota = "#f58231",
Saleviricota = "#ffe119",
Ambiviricota = "#bfef45",
Duplornaviricota = "#3cb44b",
Kitrinoviricota = "#42d4f4",
Lenarviricota = "#4363d8",
Negarnaviricota = "#911eb4",
Pisuviricota = "#f032e6",
Artverviricota = "#808000",
Nucleocytoviricota = "#fffac8",
Preplasmiviricota = "#aaffc3",
Dividoviricota = "#dcbeff",
unclassified = "#a9a9a9"
)
# Example legend_labels vector
legend_labels <- c(
Anelloviridae = "unclassified",
Hepadnaviridae = "Artverviricota",
Phycodnaviridae = "Nucleocytoviricota",
Peduoviridae = "Uroviricota",
"unclassified Uroviricota" = "Uroviricota",
Parvoviridae = "Cossaviricota",
Haloferuviridae = "Uroviricota",
Genomoviridae = "Cressdnaviricota",
Circoviridae = "Cressdnaviricota",
Mimiviridae = "Nucleocytoviricota",
Orthoherpesviridae = "Peploviricota",
Allomimiviridae = "Nucleocytoviricota",
Straboviridae = "Uroviricota",
Geminiviridae = "Cressdnaviricota"
)
# Identify missing phyla names
missing_phyla <- setdiff(names(unique_phyla), unique(legend_labels))
# Add missing phyla names to legend_labels with their corresponding colors
for (phylum in missing_phyla) {
legend_labels[phylum] <- unique_phyla[phylum]
}
# Print updated legend_labels
print(legend_labels)
unique_phyla["Lenarviricota"]
# Iterate over the colors in family_colors_vector
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
legend_labels[legend_labels == "#a9a9a9"]<- "unclassified"
# Extract unique names and corresponding values
unique_labels <- unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
# Loop through legend_labels to substitute "unclassified" entries
for (label in names(legend_labels)) {
if (grepl("^unclassified", label)) {  # Check if label starts with "unclassified"
phylum <- sub("^unclassified (.*)", "\\1", label)  # Extract the phylum name
legend_labels[label] <- phylum  # Replace "unclassified" with the phylum name
}
}
legend_labels
labels
unique_phyla["Lenarviricota"]
labels["Lenarviricota"] <- unique_phyla["Lenarviricota"]
unique_phyla["Lenarviricota"]
labels
setdiff(names(labels), unique(legend_labels))
rm(list = ls())
library(devtools)
document()
check()
install()
?Vhg
library(Virusparies)
?VhgBoxplot
library(Virusparies)
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# plot 4: Virusgatherer plot for ViralRefSeq_taxonomy agains contig length
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
plot5
library(dplyr)
?`dplyr-package`
library(devtools)
document()
check()
document()
document()
document()
check()
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
document()
check()
document()
check()
install()
?VgConLenViolin
library(Virusparies)
?VgConLenViolin
library(devtools)
document()
check()
install()
library(Virusparies)
?VgConLenViolin
library(devtools)
document()
check()
document()
check()
document()
document()
check()
install()
library(Virusparies)
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,jitter_point_colour = "red")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,jitter_point_colour = "grey")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,jitter_point_colour = "red")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red",legend_position = "none")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red",legend_position = "none",xlabel = "")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red",legend_position = "none",xtext_size = "")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red",legend_position = "none",axis_title_size = "")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red",legend_position = "none",)
library(devtools)
document()
check()
install()
library(Virusparies)
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "max")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetic")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "median")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "min")
library(devtools)
document()
check(
check()
install()
library(Virusparies)
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "median")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetic")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
rlang::last_trace()
str(vg_file)
library(devtools)
document()
check()
document()
check()
install()
?VgConLenViolin
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "min")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "max")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
library(devtools)
document()
check()
install()
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
violinplot <- VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = 'alphabetical')
violinplot <- VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "alphabetical")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "alphabetical")
violinplot
# Sample data frame
vg_file <- data.frame(
ViralRefSeq_taxonomy = c("Species A", "Species B", "Species C", "Species D"),
contig_len = c(100, 80, 120, 90)
)
# Define reorder_criteria (replace with actual value or variable)
reorder_criteria <- "alphabetical"  # Example value, replace with your logic
# Custom function for alphabetical ordering
alphabetical_order <- function(x) {
factor(x, levels = unique(x))
}
# Reorder ViralRefSeq_taxonomy based on contig_len using switch function
p <- ggplot(vg_file, aes(x = reorder(ViralRefSeq_taxonomy, contig_len, FUN = switch(reorder_criteria,
"max" = max,
"min" = min,
"median" = median,
"mean" = mean,
"alphabetical" = alphabetical_order)))) +
geom_violin()
library(ggplot2)
# Sample data frame
vg_file <- data.frame(
ViralRefSeq_taxonomy = c("Species A", "Species B", "Species C", "Species D"),
contig_len = c(100, 80, 120, 90)
)
# Define reorder_criteria (replace with actual value or variable)
reorder_criteria <- "alphabetical"  # Example value, replace with your logic
# Custom function for alphabetical ordering
alphabetical_order <- function(x) {
factor(x, levels = unique(x))
}
# Reorder ViralRefSeq_taxonomy based on contig_len using switch function
p <- ggplot(vg_file, aes(x = reorder(ViralRefSeq_taxonomy, contig_len, FUN = switch(reorder_criteria,
"max" = max,
"min" = min,
"median" = median,
"mean" = mean,
"alphabetical" = alphabetical_order)))) +
geom_violin()
# Print the plot
print(p)
library()
library(devtools)
document()
check()
install()
?VgConLenViolin
library(Virusparies)
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
reorder_taxonomy <- function(taxonomy, contig_len, reorder_criteria) {
switch(reorder_criteria,
"max" = reorder(taxonomy, -contig_len),   # Max contig_len first
"min" = reorder(taxonomy, contig_len),    # Min contig_len first
"median" = reorder(taxonomy, median(contig_len)),  # Median contig_len
"mean" = reorder(taxonomy, mean(contig_len)),      # Mean contig_len
"alphabetical" = reorder(taxonomy, taxonomy))      # Alphabetical order of taxonomy itself
}
library(devtools)
document()
check()
document()
check()
document()
check()
document()
check()
library(Virusparies)
vg_file$ViralRefSeq_taxonomy
factor(vg_file$ViralRefSeq_taxonomy,levels = unique(vg_file$ViralRefSeq_taxonomy))
check()
install()
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
library(devtools)
document()
document()
check()
install()
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "mean")
library(devtools)
document()
check()
document()
check()
check()
install()
library(Virusparies)
?VgConLenViolin
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "alphabetical")
library(devtools)
document()
document()
check()
document()
check()
document()
check()
install()
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "median")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "min")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "max")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "min")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = NULL,reorder_criteria = "min")
library(devtools)
document()
document()
check()
document()
check()
install()
library(Virusparies)
?VgConLenViolin
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = NULL)
library(devtools)
document()
check()
install()
library(Virusparies)
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = NULL)
library(devtools)
document()
install()
?VgConLenViolin
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = NULL)
library(devtools)
document()
check()
check()
check()
check()
install()
library(devtools)
library(Virusparies)
?VgConLenViolin
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "min")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = NULL)
document()
install()
