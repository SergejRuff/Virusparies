document()
check()
library(ggplot2)
?scale_fill_manual
library(devtools)
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
consistentColourPalette <- function(vh_file = vh_file, groupby = "best_query") {
unique_phyla <- c(
Taleaviricota = "#800000",
Peploviricota = "#9A6324",
Uroviricota = "#ffd8b1",
Hofneiviricota = "#469990",
Phixviricota = "#000075",
Cossaviricota = "#e6194B",
Cressdnaviricota = "#f58231",
Saleviricota = "#ffe119",
Ambiviricota = "#bfef45",
Duplornaviricota = "#3cb44b",
Kitrinoviricota = "#42d4f4",
Lenarviricota = "#4363d8",
Negarnaviricota = "#911eb4",
Pisuviricota = "#f032e6",
Artverviricota = "#808000",
Nucleocytoviricota = "#fffac8",
Preplasmiviricota = "#aaffc3",
Dividoviricota = "#dcbeff",
unclassified = "#a9a9a9"
)
# Assuming ICTV_data is properly loaded and formatted
ICTV_data <- ICTV_data  # Replace with your actual ICTV_data
# Split the data frame by the 'Phylum' column
ICTV_data_split <- split(ICTV_data, ICTV_data$Phylum)
# Initialize family colors vector
family_colors_vector <- character(length = length(unique(ICTV_data$Family)))
names(family_colors_vector) <- unique(ICTV_data$Family)
phylum_mapping <- list()
# Iterate over each sublist of ICTV_data_split
for (phylum_name in names(ICTV_data_split)) {
# Get the color corresponding to the current phylum
phylum_color <- unique_phyla[phylum_name]
# Get unique families in the sublist
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
# Map each family to its corresponding color
family_colors <- rep(phylum_color, length(unique_families))
# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
# After assigning the colors, remove "viridae" from the names of family_colors_vector
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
# Rename "Pseudo" to "PseudoPseudo"
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
# Get unique families in vh_file[groupby]
unique_families_in_data <- unique(vh_file[[groupby]])
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
#print(partial_matches)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Handle unmatched virus groups (NA values)
unmatched <- is.na(matched_colors)
matched_colors[unmatched] <- unique_phyla["unclassified"]
# Filter out NA values (no matches) and corresponding family names
matched_families <- unique_families_in_data[!is.na(matched_colors)]
matched_colors <- matched_colors[!is.na(matched_colors)]
# Handle empty strings represented as ""
empty_strings <- matched_colors == ""
matched_colors[empty_strings] <- unique_phyla["unclassified"]
# Create matched_vector with matched colors and their names
matched_vector <- c(matched_colors)
names(matched_vector) <- matched_families
# Iterate over the colors in family_colors_vector
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
# Extract unique names and corresponding values
unique_labels <- unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
return(list(legend_labels = legend_labels, labels = labels))
}
ICTV_data <- read.csv("/media/sergej/My Book/Rskripte_f-r_masterarbeit-main/ICTV_2023_file.csv")
consistentColourPalette <- function(vh_file = vh_file, groupby = "best_query") {
unique_phyla <- c(
Taleaviricota = "#800000",
Peploviricota = "#9A6324",
Uroviricota = "#ffd8b1",
Hofneiviricota = "#469990",
Phixviricota = "#000075",
Cossaviricota = "#e6194B",
Cressdnaviricota = "#f58231",
Saleviricota = "#ffe119",
Ambiviricota = "#bfef45",
Duplornaviricota = "#3cb44b",
Kitrinoviricota = "#42d4f4",
Lenarviricota = "#4363d8",
Negarnaviricota = "#911eb4",
Pisuviricota = "#f032e6",
Artverviricota = "#808000",
Nucleocytoviricota = "#fffac8",
Preplasmiviricota = "#aaffc3",
Dividoviricota = "#dcbeff",
unclassified = "#a9a9a9"
)
# Assuming ICTV_data is properly loaded and formatted
ICTV_data <- ICTV_data  # Replace with your actual ICTV_data
# Split the data frame by the 'Phylum' column
ICTV_data_split <- split(ICTV_data, ICTV_data$Phylum)
# Initialize family colors vector
family_colors_vector <- character(length = length(unique(ICTV_data$Family)))
names(family_colors_vector) <- unique(ICTV_data$Family)
phylum_mapping <- list()
# Iterate over each sublist of ICTV_data_split
for (phylum_name in names(ICTV_data_split)) {
# Get the color corresponding to the current phylum
phylum_color <- unique_phyla[phylum_name]
# Get unique families in the sublist
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
# Map each family to its corresponding color
family_colors <- rep(phylum_color, length(unique_families))
# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
# After assigning the colors, remove "viridae" from the names of family_colors_vector
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
# Rename "Pseudo" to "PseudoPseudo"
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
# Get unique families in vh_file[groupby]
unique_families_in_data <- unique(vh_file[[groupby]])
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
#print(partial_matches)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Handle unmatched virus groups (NA values)
unmatched <- is.na(matched_colors)
matched_colors[unmatched] <- unique_phyla["unclassified"]
# Filter out NA values (no matches) and corresponding family names
matched_families <- unique_families_in_data[!is.na(matched_colors)]
matched_colors <- matched_colors[!is.na(matched_colors)]
# Handle empty strings represented as ""
empty_strings <- matched_colors == ""
matched_colors[empty_strings] <- unique_phyla["unclassified"]
# Create matched_vector with matched colors and their names
matched_vector <- c(matched_colors)
names(matched_vector) <- matched_families
# Iterate over the colors in family_colors_vector
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
# Extract unique names and corresponding values
unique_labels <- unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
return(list(legend_labels = legend_labels, labels = labels))
}
color_data <- consistentColourPalette(vh_file, groupby = x_column)
color_data <- consistentColourPalette(vh_file, groupby = "best_query")
legend_labels <- color_data$legend_labels
labels <- color_data$labels
labels
legend_labels
# Split the data frame by the 'Phylum' column
ICTV_data_split <- split(ICTV_data, ICTV_data$Phylum)
# Initialize family colors vector
family_colors_vector <- character(length = length(unique(ICTV_data$Family)))
names(family_colors_vector) <- unique(ICTV_data$Family)
phylum_mapping <- list()
# Iterate over each sublist of ICTV_data_split
for (phylum_name in names(ICTV_data_split)) {
# Get the color corresponding to the current phylum
phylum_color <- unique_phyla[phylum_name]
# Get unique families in the sublist
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
# Map each family to its corresponding color
family_colors <- rep(phylum_color, length(unique_families))
# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
unique_phyla <- c(
Taleaviricota = "#800000",
Peploviricota = "#9A6324",
Uroviricota = "#ffd8b1",
Hofneiviricota = "#469990",
Phixviricota = "#000075",
Cossaviricota = "#e6194B",
Cressdnaviricota = "#f58231",
Saleviricota = "#ffe119",
Ambiviricota = "#bfef45",
Duplornaviricota = "#3cb44b",
Kitrinoviricota = "#42d4f4",
Lenarviricota = "#4363d8",
Negarnaviricota = "#911eb4",
Pisuviricota = "#f032e6",
Artverviricota = "#808000",
Nucleocytoviricota = "#fffac8",
Preplasmiviricota = "#aaffc3",
Dividoviricota = "#dcbeff",
unclassified = "#a9a9a9"
)
# Split the data frame by the 'Phylum' column
ICTV_data_split <- split(ICTV_data, ICTV_data$Phylum)
# Initialize family colors vector
family_colors_vector <- character(length = length(unique(ICTV_data$Family)))
names(family_colors_vector) <- unique(ICTV_data$Family)
phylum_mapping <- list()
# Iterate over each sublist of ICTV_data_split
for (phylum_name in names(ICTV_data_split)) {
# Get the color corresponding to the current phylum
phylum_color <- unique_phyla[phylum_name]
# Get unique families in the sublist
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
# Map each family to its corresponding color
family_colors <- rep(phylum_color, length(unique_families))
# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
# After assigning the colors, remove "viridae" from the names of family_colors_vector
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
# Rename "Pseudo" to "PseudoPseudo"
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
phylum_mapping
phylum_mapping
family_colors_vector
unique_families
phylum_mapping <- list()
for (phylum_name in names(ICTV_data_split)) {
phylum_color <- unique_phyla[phylum_name]
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
family_colors <- rep(phylum_color, length(unique_families))
family_colors_vector[unique_families] <- family_colors
phylum_mapping[unique_families] <- phylum_name
}
phylum_mapping
phylum_mapping <- list()
# Iterate over each sublist of ICTV_data_split
for (phylum_name in names(ICTV_data_split)) {
# Get the color corresponding to the current phylum
phylum_color <- unique_phyla[phylum_name]
# Get unique families in the sublist
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
# Map each family to its corresponding color
family_colors <- rep(phylum_color, length(unique_families))
family_colors_vector[unique_families] <- family_colors
# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
# After assigning the colors, remove "viridae" from the names of family_colors_vector
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
# Rename "Pseudo" to "PseudoPseudo"
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
phylum_mapping
phylum_mapping <- list()
for (phylum_name in names(ICTV_data_split)) {
phylum_color <- unique_phyla[phylum_name]
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
family_colors <- rep(phylum_color, length(unique_families))
family_colors_vector[unique_families] <- family_colors
phylum_mapping[unique_families] <- phylum_name
}
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
phylum_mapping
family_colors_vector
phylum_mapping <- list()
for (phylum_name in names(ICTV_data_split)) {
phylum_color <- unique_phyla[phylum_name]
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
family_colors <- rep(phylum_color, length(unique_families))
family_colors_vector[unique_families] <- family_colors
phylum_mapping[unique_families] <- phylum_name
}
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
phylum_mapping
# Get unique families in vh_file[groupby]
unique_families_in_data <- unique(vh_file[[groupby]])
unique_families_in_data <- unique(vh_file[["best_query"]])
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
#print(partial_matches)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
matched_colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
matched_colors[partial_matches] <- color
}
matched_colors
# Handle unmatched virus groups (NA values)
unmatched <- is.na(matched_colors)
matched_colors[unmatched] <- unique_phyla["unclassified"]
# Filter out NA values (no matches) and corresponding family names
matched_families <- unique_families_in_data[!is.na(matched_colors)]
matched_colors <- matched_colors[!is.na(matched_colors)]
# Handle empty strings represented as ""
empty_strings <- matched_colors == ""
matched_colors[empty_strings] <- unique_phyla["unclassified"]
# Create matched_vector with matched colors and their names
matched_vector <- c(matched_colors)
names(matched_vector) <- matched_families
matched_vector
# Iterate over the colors in family_colors_vector
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
# Extract unique names and corresponding values
unique_labels <- unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
legend_labels
labels
matched_vector[match(unique_labels, legend_labels)]
unique(legend_labels)
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
labels
unique(legend_labels)["#a9a9a9"]
unique(legend_labels)== "#a9a9a9"
names(updated_labels)[names(updated_labels) == "#a9a9a9"] <- "unclassified"
unique_labels
names(unique_labels)[names(unique_labels) == "#a9a9a9"] <- "unclassified"
unique_labels
legend_labels
legend_labels[legend_labels == "#a9a9a9"]
legend_labels[legend_labels == "#a9a9a9"]<- "unclassified"
legend_labels
# Iterate over the colors in family_colors_vector
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
legend_labels[legend_labels == "#a9a9a9"]<- "unclassified"
# Extract unique names and corresponding values
unique_labels <- unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
legend_labels
labels
library(devtools)
document()
check()
# Given data
legend_labels <- c("Anello_ORF1core", "Gemini_Rep", "Genomo_Rep", "Hepadna-Nackedna_TP")
matched_vector <- c("#a9a9a9", "#f58231", "#f58231", "#808000")
# Create a named vector using legend_labels as names and matched_vector as values
named_vector <- setNames(matched_vector, legend_labels)
# Add a new entry with "unclassified" and the value "#a9a9a9"
named_vector <- c(named_vector, unclassified = "#a9a9a9")
# Print the result
print(named_vector)
named_vector[named_vector == "#a9a9a9"]<- "unclassified"
named_vector
install()
library(Virusparies)
?VhgBoxplot
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "ViralRefSeq_taxonomy", y_column = "ViralRefSeq_E")
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "ViralRefSeq_taxonomy", y_column = "ViralRefSeq_E")
plot1
rm(list = ls())
library(devtools)
document()
check()
library(Virusparies)
vh_sumhitbar_preprocessing <- function(vh_file,groupby="best_query"){
vh_group <- vh_file %>%
group_by(.data[[groupby]]) %>%
summarize(sum=sum(.data$num_hits))%>%
mutate(
perc = round(proportions(.data$sum) * 100, 2),
res = str_c(.data$sum, " (", .data$perc, "%)"),
cyl = as.factor(.data[[groupby]])
)
return(vh_group)
}
vh_group <- vh_sumhitbar_preprocessing(vh_file,"best_query")
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vh_group <- vh_sumhitbar_preprocessing(vh_file,"best_query")
vh_group
# Extract unique values from vh_file$best_query
unique_queries <- unique(vh_group[[groupby]])
unique_queries <- unique(vh_group[["best_query"]])
unique_queries
pyhlum_names <- legend_labels[unique_queries]
document()
rm(list = ls())
check()
install()
library(Virusparies)
?vhSumHitsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vhSumHitsBarplot(vh_file,groupby = "VirusRefSeq_taxonomy",cut = 1e-5)
vhSumHitsBarplot(vh_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
library(devtools)
document()
check()
install()
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
plot5
document()
check()
library(devtools)
document()
check()
install()
?VhgIdentityScatterPlot
?VhgIdentityScatterPlot
?VhgIdenFacetedScatterPlot
?vhRunsBarplot
document()
check()
install()
