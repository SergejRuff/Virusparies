group_column = "best_query",
virus_groups = NULL) {
# Apply user-defined virus_groups criteria if provided
if (!is.null(virus_groups)) {
valid_columns <- c("ViralRefSeq_taxonomy", "best_query")
if (!(group_column %in% valid_columns)) {
stop("Error: 'group_column' must be either 'ViralRefSeq_taxonomy' or 'best_query'.")
}
unique_groups <- unique(file[[group_column]])
# Handle inclusion and exclusion of groups
if (is.character(virus_groups)) {
virus_groups <- list(include = virus_groups, exclude = character())
} else if (is.list(virus_groups)) {
if (!all(names(virus_groups) %in% c("include", "exclude"))) {
stop("Error: 'virus_groups' list must have 'include' and/or 'exclude' elements.")
}
if (!is.character(virus_groups$include)) {
stop("Error: 'virus_groups$include' must be a character vector.")
}
if (!is.character(virus_groups$exclude)) {
stop("Error: 'virus_groups$exclude' must be a character vector.")
}
} else {
stop("Error: 'virus_groups' must be a character vector or a list with 'include' and/or 'exclude' elements.")
}
# Validate and apply inclusion criteria
if (length(virus_groups$include) > 0) {
if (!all(virus_groups$include %in% unique_groups)) {
stop("Error: include_groups contain entries that do not match unique values in group_column.")
}
file <- file[file[[group_column]] %in% virus_groups$include, ]
}
# Apply exclusion criteria
if (length(virus_groups$exclude) > 0) {
if (!all(virus_groups$exclude %in% unique_groups)) {
stop("Error: exclude_groups contain entries that do not match unique values in group_column.")
}
file <- file[!file[[group_column]] %in% virus_groups$exclude, ]
}
}
# Additional filtering criteria can be applied here
return(file)
}
result <- VhgSubsetHittable(vh_file, virus_groups = list(include = "Hepadna-Nackedna_TP"))
VhgSubsetHittable <- function(file,
group_column = "best_query",
virus_groups = NULL) {
# Helper function to validate and process group criteria
process_groups <- function(groups, include_exclude) {
if (!is.null(groups) && !is.character(groups)) {
stop(paste("Error: 'virus_groups$", include_exclude, "' must be a character vector."))
}
if (is.character(groups)) {
unique_groups <- unique(file[[group_column]])
if (!all(groups %in% unique_groups)) {
stop(paste("Error:", include_exclude, "groups contain entries that do not match unique values in group_column."))
}
if (include_exclude == "include") {
return(file[file[[group_column]] %in% groups, ])
} else if (include_exclude == "exclude") {
return(file[!file[[group_column]] %in% groups, ])
}
}
return(file)
}
# Apply user-defined virus_groups criteria if provided
if (!is.null(virus_groups)) {
valid_columns <- c("ViralRefSeq_taxonomy", "best_query")
if (!(group_column %in% valid_columns)) {
stop("Error: 'group_column' must be either 'ViralRefSeq_taxonomy' or 'best_query'.")
}
if (is.list(virus_groups)) {
file <- process_groups(virus_groups$include, "include")
file <- process_groups(virus_groups$exclude, "exclude")
} else {
file <- process_groups(virus_groups, "include")
}
}
# Additional filtering criteria can be applied here
return(file)
}
result <- VhgSubsetHittable(vh_file, virus_groups = "Hepadna-Nackedna_TP")
result
result <- VhgSubsetHittable(vh_file, virus_groups = c("Hepadna-Nackedna_TP", "Gemini_Rep"))
results
result
result <- VhgSubsetHittable(vh_file, virus_groups = list(exclude = "Hepadna-Nackedna_TP"))
table(result$best_query)
document()
document()
document()
check()
load_all()
?VhgSubsetHittable
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
VhgSubsetHittable(file, virus_groups = "Hepadna-Nackedna_TP")
VhgSubsetHittable(file, virus_groups = c("Hepadna-Nackedna_TP", "Gemini_Rep"))
VhgSubsetHittable(file, virus_groups = list(exclude = "Hepadna-Nackedna_TP"))
VhgSubsetHittable(vh_file, virus_groups = list(exclude =
c("Hepadna-Nackedna_TP", "Anello_ORF1core")))
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# check dimensions before filtering
cat("The dimensions of the VirusHunter Hittable before filtering are: \n");dim(file)
# we only want the Anello_ORF1core from "best_query" col in this example
cat("\nCounts of 'best_query' values before filtering:\n")
table(file$best_query)
# summary stats
# Summary statistics before filtering
cat("\nSummary statistics of 'num_hits' column before filtering:\n")
summary(file$num_hits)
cat("\nSummary statistics of 'ViralRefSeq_ident' column before filtering:\n")
summary(file$ViralRefSeq_ident)
cat("\nSummary statistics of 'ViralRefSeq_E' column before filtering:\n")
summary(file$ViralRefSeq_E)
file_filtered <- VhgSubsetHittable(file,group_column = "best_query",
virus_groups = "Anello_ORF1core",
num_hits_min = 4,ViralRefSeq_ident_criteria = -90,ViralRefSeq_E_criteria = 0.00001)
# check dimensions after filtering
cat("The dimensions of the VirusHunter Hittable after filtering are: \n");dim(file_filtered)
# Summary statistics after filtering
cat("\nCounts of 'best_query' values after filtering:\n")
table(file_filtered$best_query)
cat("\nSummary statistics of 'num_hits' column after filtering:\n")
summary(file_filtered$num_hits)
cat("\nSummary statistics of 'ViralRefSeq_ident' column after filtering:\n")
summary(file_filtered$ViralRefSeq_ident)
cat("\nSummary statistics of 'ViralRefSeq_E' column after filtering:\n")
summary(file_filtered$ViralRefSeq_E)
document()
check()
document()
load_all()
?VhgSubsetHittable
document()
load_all()
?VhgSubsetHittable
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap(Phylum, ncol = wrap_ncol)
library(Virusparies)
library(ggplot2)
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap(Phylum, ncol = wrap_ncol)
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap(Phylum, ncol = 2)
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap(best_query, ncol = 2)
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap(ViralRefSeq_taxonomy, ncol = 2)
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap( ncol = 2)
facet_ncol =1
if(!is.null(facet_ncol)&facet_ncol >1){
print("TRUE")
}
facet_ncol =2
if(!is.null(facet_ncol)&facet_ncol >1){
print("TRUE")
}
facet_ncol =NULL
if(!is.null(facet_ncol)&facet_ncol >3){
print("TRUE")
}
facet_ncol =4
if(!is.null(facet_ncol)&facet_ncol >3){
print("TRUE")
}
if(!is.null(facet_ncol)&facet_ncol >3){
print("TRUE")
}
facet_ncol =NULL
if(!is.null(facet_ncol)&facet_ncol >3){
print("TRUE")
}
if(!is.null(facet_ncol)&&facet_ncol >3){
print("TRUE")
}
facet_ncol =4
if(!is.null(facet_ncol)&&facet_ncol >3){
print("TRUE")
}
?facet_wrap
document()
check()
load_all()
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E",facet_ncol = 2)
plot1
plot1
?facet_wrap
document()
load_all()
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E",facet_ncol = 2)
plot1
plot1
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E",facet_ncol = 2)
VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E",facet_ncol = 2,flip_coords = FALSE)
document()
check()
load_all()
VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E",facet_ncol = 2)
document()
document()
check()
load_all()
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,facet_ncol = 2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,facet_ncol = 7)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
document()
check()
load_all()
VhgRunsBarplot()
?VhgRunsBarplot()
VhgRunsBarplot(file,cut = 1e-5)
VhgRunsBarplot(file,cut = 1e-5,facet_ncol = 2)
VhgRunsBarplot(file,cut = 1e-5,facet_ncol = 1)
VhgRunsBarplot(file,cut = 1e-5,facet_ncol = 3)
document()
load_all()
VhgRunsBarplot(file,cut = 1e-5,facet_ncol = 1)
VhgRunsBarplot(file,cut = 1e-5,facet_ncol = 2)
?VhSumHitsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhSumHitsBarplot(vh_file,cut = 1e-5)
VhSumHitsBarplot(vh_file,cut = 1e-5,facet_ncol = 1)
VhSumHitsBarplot(vh_file,cut = 1e-5,facet_ncol = 2)
VhSumHitsBarplot(vh_file,cut = 1e-5,facet_ncol = 3)
VhSumHitsBarplot(vh_file,cut = 1e-5,facet_ncol = 4)
VhSumHitsBarplot(vh_file,cut = 1e-5,facet_ncol = 3,flip_coords = FALSE)
library(Virusparies)
?VhgBoxplot
doc
document()
check()
load_all()
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
# plot 2 for identity
plot2 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident")
plot2
# plot 3 custom arguments used
plot3 <- VhgBoxplot(file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "right")
plot3
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# plot 4: Virusgatherer plot for ViralRefSeq_taxonomy agains contig length
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
plot5
install()
document()
check()
document()
check()
load_all()
?vh_sumhitbar_preprocessing
?VhgPreprocessTaxa
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
vh_file_filtered <- VhgPreprocessTaxa(vh_file,"Family")
print("ViralRefSeq_taxonomy before processing:\n")
print(head(vh_file$ViralRefSeq_taxonomy,5))
print("ViralRefSeq_taxonomy after processing:\n")
print(head(vh_file_filtered$ViralRefSeq_taxonomy,5))
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
# plot 2 for identity
plot2 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident")
plot2
install()
library(Virusparies)
document()
check()
load_all()
?VhgPreprocessTaxa
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
vh_file_filtered <- VhgPreprocessTaxa(vh_file,"Family")
print("ViralRefSeq_taxonomy before processing:\n")
print(head(vh_file$ViralRefSeq_taxonomy,5))
print("ViralRefSeq_taxonomy after processing:\n")
print(head(vh_file_filtered$ViralRefSeq_taxonomy,5))
taxonomy_rank_hierarchy <- function(taxa_rank) {
taxa_list <- list(
Subphylum = "viricotina",
Class = "viricetes",
Subclass = "viricetidae",
Order = "virales",
Suborder = "virineae",
Family = "viridae",
Subfamily = "virinae",
Genus = "virus"
)
valid_ranks <- names(taxa_list)
if (!(taxa_rank %in% valid_ranks)) {
stop("Error: Invalid taxa rank provided. Please provide one of: Subphylum, Class, Subclass, Order, Suborder, Family, Subfamily, Genus")
}
return(taxa_list[[taxa_rank]])
}
taxonomy_level <- taxonomy_rank_hierarchy("Family")
taxonomy_level
vh_file %>%
mutate(
ViralRefSeq_taxonomy = str_extract(ViralRefSeq_taxonomy, paste0("\\w+", taxonomy_level))
)
library(stringr)
vh_file %>%
mutate(
ViralRefSeq_taxonomy = str_extract(ViralRefSeq_taxonomy, paste0("\\w+", taxonomy_level))
)
extract_taxa <- function(sublist, taxa_rank) {
element <- subset(sublist, grepl(taxa_rank, sublist))
if (length(element) > 0) {
return(element)
} else {
return(NA)  # Return NA if "viridae" is not found in the sublist
}
}
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
taxa_rank <- taxonomy_rank_hierarchy("Family")
my_list <- strsplit(vh_file$ViralRefSeq_taxonomy, split = "|", fixed = TRUE)
my_list
taxa_elements <- lapply(my_list, function(x) extract_taxa(x, taxa_rank))
filtered_names <- vector("list", length = length(taxa_elements))
filtered_names
taxa_elements
# Iterate over each element in taxa_elements
for (i in seq_along(taxa_elements)) {
# Check if the element contains two or more strings
if (length(taxa_elements[[i]]) >= 2) {
# Extract only the virus family names without additional text
term <- paste0("^[[:alnum:]]+",taxa_rank,"$")
filtered_names[[i]] <- grep(term, taxa_elements[[i]], value = TRUE)
} else {
# If the element contains less than two strings, keep it unchanged
filtered_names[[i]] <- taxa_elements[[i]]
}
}
filtered_names
document()
check()
load_all()
?VhgPreprocessTaxa
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
vh_file_filtered <- VhgPreprocessTaxa(vh_file,"Family")
print("ViralRefSeq_taxonomy before processing:\n")
print(head(vh_file$ViralRefSeq_taxonomy,5))
print("ViralRefSeq_taxonomy after processing:\n")
print(head(vh_file_filtered$ViralRefSeq_taxonomy,5))
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
taxonomy_rank_hierarchy <- function(taxa_rank) {
taxa_list <- list(
Subphylum = "viricotina",
Class = "viricetes",
Subclass = "viricetidae",
Order = "virales",
Suborder = "virineae",
Family = "viridae",
Subfamily = "virinae",
Genus = "virus"
)
valid_ranks <- names(taxa_list)
if (!(taxa_rank %in% valid_ranks)) {
stop("Error: Invalid taxa rank provided. Please provide one of: Subphylum, Class, Subclass, Order, Suborder, Family, Subfamily, Genus")
}
return(taxa_list[[taxa_rank]])
}
taxa_rank <- taxonomy_rank_hierarchy("Family")
str_extract(file$ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
library(stringr)
str_extract(file$ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
taxa_rank <- taxonomy_rank_hierarchy("Subgenus")
taxa_rank <- taxonomy_rank_hierarchy("Genus")
str_extract(file$ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
document()
check()
document()
document()
document()
document()
check()
document()
document()
check()
taxa_list <- list(
"viricotina",
"viricetes",
"viricetidae",
"virales",
"virineae",
"viridae",
"virinae",
"virus"
)
# Define the names for each element
taxa_names <- c(
"Subphylum",
"Class",
"Subclass",
"Order",
"Suborder",
"Family",
"Subfamily",
"Genus"
)
# Assign names to the list elements using setNames()
taxa_list <- setNames(taxa_list, taxa_names)
# Print the resulting list with names assigned
taxa_list
document()
check()
library(tidyverse)
?pivot_longer
?str_split
?unnest
document()
check()
use_package("tidyr")
document()
check()
?str_extract
document()
check()
load_all()
?VhgPreprocessTaxa
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
vh_file_filtered <- VhgPreprocessTaxa(vh_file,"Family")
print("ViralRefSeq_taxonomy before processing:\n")
print(head(vh_file$ViralRefSeq_taxonomy,5))
print("ViralRefSeq_taxonomy after processing:\n")
print(head(vh_file_filtered$ViralRefSeq_taxonomy,5))
table(vh_file_filtered$ViralRefSeq_taxonomy)
?VhgRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(file,cut = 1e-5)
plot
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
# plot 2 for identity
plot2 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident")
plot2
?VhSumHitsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhSumHitsBarplot(vh_file,cut = 1e-5)
plot
install()
table(vh_file_filtered$ViralRefSeq_taxonomy)
?VhgBoxplot
