p1 <- ggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()
p2 <- ggplot(mtcars, aes(x=wt, y=drat)) + geom_point()
p3 <- ggplot(mtcars, aes(x=disp, y=drat)) + geom_point()
p4 <- ggplot(mtcars, aes(x=mpg, y=disp)) + geom_point()
p5 <- ggplot(mtcars, aes(x=hp, y=wt)) + geom_point()
p6 <- ggplot(mtcars, aes(x=wt, y=hp)) + geom_point()
p7 <- ggplot(mtcars, aes(x=disp, y=hp)) + geom_point()
p8 <- ggplot(mtcars, aes(x=disp, y=wt)) + geom_point()
# Combine plots into a list
plot_list <- list(p1, p7, p3, p5, p2, p8, p4, p6)
# Example of using plot_grid with specified parameters
library(cowplot)
# Relative heights for rows
N1 <- 1
N2 <- 0.9
# Plot grid with custom parameters
plot_grid(
plotlist = plot_list,
ncol = 4, nrow = 2,
rel_widths = c(1, 1, 1, 1.65),
rel_heights = c(N1, N2 * 0.9),
align = "v", axis = "l",
labels = c("A", "B", "C", "D", "E", "F", "G", "H"),
hjust = -1
)
# Example plots (replace with your actual plot objects)
library(ggplot2)
p1 <- ggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()
p2 <- ggplot(mtcars, aes(x=wt, y=drat)) + geom_point()
p3 <- ggplot(mtcars, aes(x=disp, y=drat)) + geom_point()
p4 <- ggplot(mtcars, aes(x=mpg, y=disp)) + geom_point()
p5 <- ggplot(mtcars, aes(x=hp, y=wt)) + geom_point()
p6 <- ggplot(mtcars, aes(x=wt, y=hp)) + geom_point()
p7 <- ggplot(mtcars, aes(x=disp, y=hp)) + geom_point()
p8 <- ggplot(mtcars, aes(x=disp, y=wt)) + geom_point()
# Combine plots into a list
plot_list <- list(p1, p7, p3, p5, p2, p8, p4, p6)
# Example of using plot_grid with specified parameters
library(cowplot)
# Relative heights for rows
N1 <- 1
N2 <- 0.9
# Plot grid with custom parameters
plot_grid(
plotlist = plot_list,
ncol = 4, nrow = 2,
rel_widths = c(1, 1, 1, 1.65),
rel_heights = c(N1, N2 * 0.9),
align = "v", axis = "l",
labels = c("A", "B", "C", "D", "E", "F", "G", "H"),
hjust = -1
)
?grid_plot
library(devtools)
document()
document()
check()
?`cowplot-package`
use_package("cowplot")
document()
check()
install()
library(cowplot)
?grid_plot
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
install()
library(cowplot)
?ggsave2
?ggsave
library(devtools)
document()
document()
document()
document()
check()
document()
check()
install()
library(devtools)
document()
check()
install()
library(devtools)
document()
install()
library(cowplot)
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
document()
check()
install()
?ExportVirusPlot
filename <- "test.pdf"
# Remove the prefix (file extension)
filename_without_extension <- tools::file_path_sans_ext(filename)
new_filename <- paste0(filename_without_extension, ".rds")
library(devtools)
use_package("tools")
document()
check()
document()
check()
install()
getwd()
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
tools::file_path_sans_ext("table.docx")
install()
library(devtools)
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "minimal")
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "dark")
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "void")
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "void)
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "grey" )
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "test". )
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "test" )
plot1
?VhgRunsBarplot
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(vh_file,cut = 1e-5)
plot
?VgConLenViolin
# create a violinplot.
violinplot <- VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# create a violinplot.
violinplot <- VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
violinplot
?VhSumHitsBarplot
rm(list = ls())
library(devtools)
document()
check()
install()
libra
library(devtools)
document()
is_file_empty <- function(file) {
if (nrow(file) == 0) {
message("Warning: Input has zero rows. Skipping further processing.")
return(TRUE)
}
return(FALSE)
}
VhgBoxplot <- function(data) {
# Example function to generate boxplot
if (is_file_empty(data)) {
return(invisible(NULL))  # Return NULL if data is empty
}
message("Generating VhgBoxplot...")
boxplot(data)
# Additional processing if needed
# ...
}
# Example usage
empty_data <- data.frame()  # Empty data frame
non_empty_data <- data.frame(x = 1:10, y = rnorm(10))  # Non-empty data frame
VhgBoxplot(empty_data)  # Should skip generating boxplot
VhgBoxplot(non_empty_data)  # Should generate boxplot
is_file_empty <- function(file) {
if (nrow(file) == 0) {
message("Warning: Input has zero rows. Skipping further processing.")
return(invisible(NULL))  # Stop further execution in VhgBoxplot
}
return(FALSE)
}
VhgBoxplot <- function(data) {
# Call is_file_empty to check if data is empty
is_file_empty(data)
# Example function to generate boxplot
message("Generating VhgBoxplot...")
boxplot(data)
# Additional processing if needed
# ...
}
# Example usage
empty_data <- data.frame()  # Empty data frame
non_empty_data <- data.frame(x = 1:10, y = rnorm(10))  # Non-empty data frame
VhgBoxplot(empty_data)  # Should skip generating boxplot
is_file_empty <- function(file) {
if (nrow(file) == 0) {
message("Warning: Input has zero rows. Skipping further processing.")
return(invisible(NULL))  # Stop further execution in VhgBoxplot
}
return(FALSE)
}
VhgBoxplot <- function(data) {
# Call is_file_empty to check if data is empty
is_file_empty(data)
# Example function to generate boxplot
message("Generating VhgBoxplot...")
boxplot(data)
# Additional processing if needed
# ...
}
# Example usage
empty_data <- data.frame()  # Empty data frame
non_empty_data <- data.frame(x = 1:10, y = rnorm(10))  # Non-empty data frame
VhgBoxplot(empty_data)  # Should skip generating boxplot
is_file_empty <- function(file) {
if (nrow(file) == 0) {
message("Warning: Input has zero rows. Skipping further processing.")
return(invisible(NULL))  # Stop further execution in VhgBoxplot
}
return(FALSE)
}
VhgBoxplot <- function(data) {
# Call is_file_empty to check if data is empty
is_file_empty(data)
# Example function to generate boxplot
message("Generating VhgBoxplot...")
boxplot(data)
# Additional processing if needed
# ...
}
# Example usage
empty_data <- data.frame()  # Empty data frame
non_empty_data <- data.frame(x = 1:10, y = rnorm(10))  # Non-empty data frame
VhgBoxplot(empty_data)  # Should skip generating boxplot
library(devtools)
document()
rm(list = ls())
document()
check()
document()
check()
install()
library()
library(devtools)
document()
check()
install()
document()
check()
document()
check()
install()
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
document()
check()
install()
?head
library(devtools)
document()
check()
document()
check()
document()
check()
install()
library(devtools)
document()
check()
library(devtools)
install()
library(devtools)
document()
check()
document()
check()
install()
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
install()
library(Virusparies)
?VgConLenViolin
library(devtools)
document()
check()
library()
library(devtools)
install()
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
library(devtools)
document()
check()
document()
check()
document()
check()
install()
library(Virusparies)
library(Virusparies)
?VhgBoxplot
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# plot 4: Virusgatherer plot for ViralRefSeq_taxonomy agains contig length
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
plot5
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# plot 4: Virusgatherer plot for ViralRefSeq_taxonomy agains contig length
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len",contiglen_log10_scale = TRUE)
plot5
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# plot 4: Virusgatherer plot for ViralRefSeq_taxonomy agains contig length
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "ViralRefSeq_E",contiglen_log10_scale = TRUE)
plot5
mean_values <- vg_file %>%
group_by(.data[["contig_len"]]) %>%
summarise(mean_y_aes = mean(y_aes, na.rm = TRUE))
library(dplyr)
mean_values <- vg_file %>%
group_by(.data[["contig_len"]]) %>%
summarise(mean_y_aes = mean(y_aes, na.rm = TRUE))
library(devtools)
rm(list = ls())
document()
document()
check()
document()
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_mean_point = TRUE)
library(devtools)
document()
check()
install()
library()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_mean_point = TRUE)
rlang::last_trace()
mean_values <- vh_file %>%
group_by(.data[["best_query"]]) %>%
summarise(mean_y_aes = mean(y_aes, na.rm = TRUE))
library(dplyr)
mean_values <- vh_file %>%
group_by(.data[["best_query"]]) %>%
summarise(mean_y_aes = mean(y_aes, na.rm = TRUE))
mean_values <- vh_file %>%
group_by(.data[["best_query"]]) %>%
summarise(mean_y_aes = mean(-log10(ViralRefSeq_E), na.rm = TRUE))
mean_values
names(mean_values) <- c("group","mean")
mean_values
library(devtools)
document()
check()
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_mean_point = TRUE)
rlang::last_trace()
library(devtools)
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_mean_point = TRUE)
?stat_summary
library(devtools)
document()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)#
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_mean_point = TRUE)
library(devtools)
document()
library(devtools)
InsectSprays
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_cutoff_line = TRUE)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_mean_point = TRUE)
library(devtools)
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_mean_point = TRUE)
library(devtools)
document()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_mean_point = TRUE)
library(devtools)
document()
install()
library(devtools)
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_mean_point = TRUE)
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_mean_point = TRUE)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",add_mean_point = TRUE,mean_color = "red")
library(devtools)
document()
install()
