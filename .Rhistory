?VgConLenViolin
library(devtools)
document()
check()
document()
check()
document()
document()
check()
install()
library(Virusparies)
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,jitter_point_colour = "red")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,jitter_point_colour = "grey")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,jitter_point_colour = "red")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red",legend_position = "none")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red",legend_position = "none",xlabel = "")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red",legend_position = "none",xtext_size = "")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red",legend_position = "none",axis_title_size = "")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE,jitter_point = TRUE,jitter_point_colour = "red",legend_position = "none",)
library(devtools)
document()
check()
install()
library(Virusparies)
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "max")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetic")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "median")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "min")
library(devtools)
document()
check(
check()
install()
library(Virusparies)
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "median")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetic")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
rlang::last_trace()
str(vg_file)
library(devtools)
document()
check()
document()
check()
install()
?VgConLenViolin
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "min")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "max")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
library(devtools)
document()
check()
install()
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
violinplot <- VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = 'alphabetical')
violinplot <- VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "alphabetical")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "alphabetical")
violinplot
# Sample data frame
vg_file <- data.frame(
ViralRefSeq_taxonomy = c("Species A", "Species B", "Species C", "Species D"),
contig_len = c(100, 80, 120, 90)
)
# Define reorder_criteria (replace with actual value or variable)
reorder_criteria <- "alphabetical"  # Example value, replace with your logic
# Custom function for alphabetical ordering
alphabetical_order <- function(x) {
factor(x, levels = unique(x))
}
# Reorder ViralRefSeq_taxonomy based on contig_len using switch function
p <- ggplot(vg_file, aes(x = reorder(ViralRefSeq_taxonomy, contig_len, FUN = switch(reorder_criteria,
"max" = max,
"min" = min,
"median" = median,
"mean" = mean,
"alphabetical" = alphabetical_order)))) +
geom_violin()
library(ggplot2)
# Sample data frame
vg_file <- data.frame(
ViralRefSeq_taxonomy = c("Species A", "Species B", "Species C", "Species D"),
contig_len = c(100, 80, 120, 90)
)
# Define reorder_criteria (replace with actual value or variable)
reorder_criteria <- "alphabetical"  # Example value, replace with your logic
# Custom function for alphabetical ordering
alphabetical_order <- function(x) {
factor(x, levels = unique(x))
}
# Reorder ViralRefSeq_taxonomy based on contig_len using switch function
p <- ggplot(vg_file, aes(x = reorder(ViralRefSeq_taxonomy, contig_len, FUN = switch(reorder_criteria,
"max" = max,
"min" = min,
"median" = median,
"mean" = mean,
"alphabetical" = alphabetical_order)))) +
geom_violin()
# Print the plot
print(p)
library()
library(devtools)
document()
check()
install()
?VgConLenViolin
library(Virusparies)
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
reorder_taxonomy <- function(taxonomy, contig_len, reorder_criteria) {
switch(reorder_criteria,
"max" = reorder(taxonomy, -contig_len),   # Max contig_len first
"min" = reorder(taxonomy, contig_len),    # Min contig_len first
"median" = reorder(taxonomy, median(contig_len)),  # Median contig_len
"mean" = reorder(taxonomy, mean(contig_len)),      # Mean contig_len
"alphabetical" = reorder(taxonomy, taxonomy))      # Alphabetical order of taxonomy itself
}
library(devtools)
document()
check()
document()
check()
document()
check()
document()
check()
library(Virusparies)
vg_file$ViralRefSeq_taxonomy
factor(vg_file$ViralRefSeq_taxonomy,levels = unique(vg_file$ViralRefSeq_taxonomy))
check()
install()
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
library(devtools)
document()
document()
check()
install()
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "mean")
library(devtools)
document()
check()
document()
check()
check()
install()
library(Virusparies)
?VgConLenViolin
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "alphabetical")
library(devtools)
document()
document()
check()
document()
check()
document()
check()
install()
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "median")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "min")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "max")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "alphabetical")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = "min")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = NULL,reorder_criteria = "min")
library(devtools)
document()
document()
check()
document()
check()
install()
library(Virusparies)
?VgConLenViolin
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = NULL)
library(devtools)
document()
check()
install()
library(Virusparies)
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,jitter_point = TRUE,reorder_criteria = NULL)
library(devtools)
document()
install()
?VgConLenViolin
library(Virusparies)
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = NULL)
library(devtools)
document()
check()
check()
check()
check()
install()
library(devtools)
library(Virusparies)
?VgConLenViolin
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "mean")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = "min")
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = NULL)
document()
install()
library(Virusparies)
?VgConLenViolin
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE,reorder_criteria = NULL)
viridis::inferno()
?viridis
library(scales)
show_col(viridis_pal()(12))
library(scales)
show_col(viridis_pal()(19))
library(scales)
show_col(viridis_pal(option = c("D","A"))(19))
library(scales)
show_col(viridis_pal(option = "A(19))
library(scales)
show_col(viridis_pal(option = "A")(19))
library(scales)
show_col(viridis_pal(option ="A")(19))
library(scales)
show_col(viridis_pal(option ="B")(19))
library(scales)
show_col(viridis_pal(option ="B")(30))
library(RColorBrewer)
# Colorblind-friendly palettes from RColorBrewer
cbPalette <- c(
brewer.pal(9, "Set1"),          # Set1 palette
brewer.pal(8, "Set2"),          # Set2 palette
brewer.pal(12, "Paired")[c(1, 2, 3, 5, 6, 7, 9, 10, 11)],  # Paired palette
brewer.pal(8, "Dark2")          # Dark2 palette
)
# Alternatively, using viridis palettes
library(viridis)
# Colorblind-friendly palettes from viridis
viridisPalette <- c(
viridis(8),             # viridis palette with 8 colors
viridis(8, option = "B"),  # viridis palette (option B) with 8 colors
viridis(3),             # viridis palette with 3 colors
viridis(3, option = "B")   # viridis palette (option B) with 3 colors
)
# Combine the two palettes
combinedPalette <- c(cbPalette, viridisPalette)
# Select the first 19 colors
colorblind_friendly <- combinedPalette[1:19]
# Display the colors
colorblind_friendly
# Create a plot to display the colors
par(mar = rep(0.5, 4))  # Adjusting margins for better display
barplot(rep(1, 19), col = colorblind_friendly, names.arg = NULL, border = NA)
library(colorBlindness)
?colorbildsupport
?colorBlindness
library(colorBlindness)
cvdPlot(
plot = last_plot(),
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
par(mar = rep(0.5, 4))  # Adjusting margins for better display
test <- barplot(rep(1, 19), col = colorblind_friendly, names.arg = NULL, border = NA)
cvdPlot(
plot = test,
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
cvdPlot(
plot = test,
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
cvdPlot(
plot = test,
layout = c( "deuteranope", "protanope", "desaturate")
)
cvdPlot(
plot = test,
layout = c( "protanope", "desaturate")
)
test
barplot(rep(1, 19), col = colorblind_friendly, names.arg = NULL, border = NA)
barplot(rep(1, 19), col = colorblind_friendly, names.arg = NULL, border = NA)
barplot(rep(1, 19), col = colorblind_friendly, names.arg = NULL, border = NA)
cvdPlot(
plot = barplot(rep(1, 19), col = colorblind_friendly, names.arg = NULL, border = NA),
layout = c( "deuteranope", "protanope", "desaturate")
)
c25 <- c(
"dodgerblue2", "#E31A1C", # red
"green4",
"#6A3D9A", # purple
"#FF7F00", # orange
"black", "gold1",
"skyblue2", "#FB9A99", # lt pink
"palegreen2",
"#CAB2D6", # lt purple
"#FDBF6F", # lt orange
"gray70", "khaki2",
"maroon", "orchid1", "deeppink1", "blue1", "steelblue4",
"darkturquoise", "green1", "yellow4", "yellow3",
"darkorange4", "brown"
)
pie(rep(1, 25), col = c25)
cvdPlot(
plot = pie(rep(1, 25), col = c25),
layout = c( "deuteranope", "protanope", "desaturate")
)
install.packages("rcartocolor")
library(rcartocolor)
scales::show_col(carto_pal(19, "Safe"))
cvdPlot(
plot = scales::show_col(carto_pal(19, "Safe")),
layout = c( "deuteranope", "protanope", "desaturate")
)
# Define the 20 colors
colors <- c("#1F77B4", "#AEC7E8", "#FF7F0E", "#FFBB78", "#2CA02C", "#98DF8A",
"#D62728", "#FF9896", "#9467BD", "#C5B0D5", "#8C564B", "#C49C94",
"#E377C2", "#F7B6D2", "#7F7F7F", "#C7C7C7", "#BCBD22", "#DBDB8D",
"#17BECF", "#9EDAE5")
# Generate labels for the bars
labels <- paste("Color", 1:20)
# Create a bar plot with the specified colors
barplot(rep(1, 20), col = colors, names.arg = labels, las = 2, cex.names = 0.7, border = "white", main = "Colorblind-Friendly Colors")
# Adjust margins for better display
par(mar = c(5, 4, 4, 2) + 0.1)
cvdPlot(
plot = # Create a bar plot with the specified colors
barplot(rep(1, 20), col = colors, names.arg = labels, las = 2, cex.names = 0.7, border = "white", main = "Colorblind-Friendly Colors"),
layout = c( "deuteranope", "protanope", "desaturate")
)
# Define the 20 colors
colors <- c("#1F77B4", "#AEC7E8", "#FF7F0E", "#FFBB78", "#2CA02C", "#98DF8A", "#FF9896", "#9467BD", "#C5B0D5", "#8C564B", "#C49C94",
"#E377C2", "#F7B6D2", "#7F7F7F", "#C7C7C7", "#BCBD22", "#DBDB8D",
"#17BECF", "#9EDAE5")
# Generate labels for the bars
labels <- paste("Color", 1:19)
# Create a bar plot with the specified colors
barplot(rep(1, 19), col = colors, names.arg = labels, las = 2, cex.names = 0.7, border = "white", main = "Colorblind-Friendly Colors")
# Adjust margins for better display
par(mar = c(5, 4, 4, 2) + 0.1)
library(ggplot2)
# Define the 20 colors
colors <- c("#1F77B4", "#AEC7E8", "#FF7F0E", "#FFBB78", "#2CA02C", "#98DF8A",
"#FF9896", "#9467BD", "#C5B0D5", "#8C564B", "#C49C94",
"#E377C2", "#F7B6D2", "#7F7F7F", "#C7C7C7", "#BCBD22", "#DBDB8D",
"#17BECF", "#9EDAE5")
# Generate labels for the bars
labels <- paste("Color", 1:19)
# Adjust margins for better display
par(mar = c(5, 4, 4, 2) + 0.1)
# Create a bar plot with the specified colors and save it to a variable
plot_variable <- recordPlot({
barplot(rep(1, 19), col = colors, names.arg = labels, las = 2, cex.names = 0.7, border = "white", main = "Colorblind-Friendly Colors")
})
# Display the saved plot
plot_variable
cvdPlot(
plot = plot_variable,
layout = c( "deuteranope", "protanope", "desaturate")
)
plot_variable
cvdPlot(
plot = plot_variable,
layout = c( "deuteranope", "protanope", "desaturate")
)
# Load the necessary library
library(ggplot2)
# Define the 20 colors
colors <- c("#1F77B4", "#AEC7E8", "#FF7F0E", "#FFBB78", "#2CA02C", "#98DF8A",
"#D62728", "#FF9896", "#9467BD", "#C5B0D5", "#8C564B", "#C49C94",
"#E377C2", "#F7B6D2", "#7F7F7F", "#C7C7C7", "#BCBD22", "#DBDB8D",
"#17BECF", "#9EDAE5")
# Create a data frame with colors and labels
df <- data.frame(
label = paste("Color", 1:20),
value = rep(1, 20)
)
# Create a ggplot object
ggplot_object <- ggplot(df, aes(x = label, y = value, fill = label)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = colors) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Colorblind-Friendly Colors", x = NULL, y = NULL)
# Display the ggplot object
print(ggplot_object)
cvdPlot(
plot = ggplot_object,
layout = c( "deuteranope", "protanope", "desaturate")
)
cvdPlot(
plot = ggplot_object,
layout = c("original", "deuteranope", "protanope", "desaturate")
)
cvdPlot(
plot = ggplot_object,
layout = c("original", "deuteranope", "protanope")
)
# Load the necessary library
library(ggplot2)
# Define the colors and their corresponding names
colors <- c("#006BA4", "#FF800E", "#ABABAB", "#595959", "#5F9ED1",
"#C85200", "#898989", "#A2C8EC", "#FFBC79", "#CFCFCF")
names <- c("darkcyan(0.159), teal(0.163), steelblue(0.296)",
"darkorange(0.072), orange(0.155), chocolate(0.208)",
"darkgray(0.014), darkgrey(0.014), silver(0.143)",
"dimgrey(0.109), dimgray(0.109), darkslategray(0.174)",
"cornflowerblue(0.117), steelblue(0.186), cadetblue(0.192)",
"chocolate(0.153), darkgoldenrod(0.218), orangered(0.222)",
"grey(0.061), gray(0.061), lightslategrey(0.095)",
"lightsteelblue(0.079), lightblue(0.080), skyblue(0.109)",
"lightsalmon(0.110), burlywood(0.141), sandybrown(0.143)",
"lightgray(0.027), lightgrey(0.027), thistle(0.080)")
# Create a data frame
df <- data.frame(
label = paste("Color", 1:10),
value = rep(1, 10),
color_hex = colors,
color_names = names
)
# Create a ggplot object
ggplot_object <- ggplot(df, aes(x = label, y = value, fill = color_hex)) +
geom_bar(stat = "identity") +
scale_fill_identity() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
labs(title = "Colorblind-Friendly Colors with Corresponding Names") +
geom_text(aes(label = color_names), color = "black", angle = 90, hjust = 0, vjust = 0.5, size = 3, nudge_y = 0.2)
# Display the ggplot object
print(ggplot_object)
library(devtools)
document()
check()
document()
check()
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",reorder_criteria = NULL)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",reorder_criteria = "min")
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",reorder_criteria = "max")
VgConLenViolin()
?VgConLenViolin()
?geom_jitter(
?geom_jitter()
library(devtools)
document()
check()
install()
