# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Handle unmatched virus groups (NA values)
unmatched <- is.na(matched_colors)
matched_colors[unmatched] <- unique_phyla["unclassified"]
# Filter out NA values (no matches) and corresponding family names
matched_families <- unique_families_in_data[!is.na(matched_colors)]
matched_colors <- matched_colors[!is.na(matched_colors)]
# Handle empty strings represented as ""
empty_strings <- matched_colors == ""
matched_colors[empty_strings] <- unique_phyla["unclassified"]
# Create matched_vector with matched colors and their names
matched_vector <- c(matched_colors)
names(matched_vector) <- matched_families
return(matched_vector)
}
test <- consistentColourPalette(vh_file)
sub("viridae$", "", unique(vh_file$ViralRefSeq_taxonomy), ignore.case = TRUE)
taxonomy_group_preprocess <- function(vh_file){
# split vh_file.
my_list <- strsplit(vh_file$ViralRefSeq_taxonomy,split = "|",fixed = TRUE)
# Apply the function to each sublist
viridae_elements <- lapply(my_list, extract_viridae)
# Initialize an empty vector to store the filtered names
filtered_names <- vector("list", length = length(viridae_elements))
# Iterate over each element in viridae_elements
for (i in seq_along(viridae_elements)) {
# Check if the element contains two or more strings
if (length(viridae_elements[[i]]) >= 2) {
# Extract only the virus family names without additional text
filtered_names[[i]] <- grep("^[[:alnum:]]+viridae$", viridae_elements[[i]], value = TRUE)
} else {
# If the element contains less than two strings, keep it unchanged
filtered_names[[i]] <- viridae_elements[[i]]
}
}
# Remove elements containing "unclassified" outside the function
viridae_elements <- lapply(filtered_names, function(x) x[!grepl("unclassified", x)])
viridae_elements[is.na(viridae_elements)] <- "unclassified"
vh_file$ViralRefSeq_taxonomy <- unlist(viridae_elements)
return(vh_file)
}
vh_file <- taxonomy_group_preprocess(vh_file = vh_file)
extract_viridae <- function(sublist) {
element <- subset(sublist, grepl("viridae", sublist))
if (length(element) > 0) {
return(element)
} else {
return(NA)  # Return NA if "viridae" is not found in the sublist
}
}
vh_file <- taxonomy_group_preprocess(vh_file = vh_file)
unique(vh_file$ViralRefSeq_taxonomy)
sub("viridae$", "", unique(vh_file$ViralRefSeq_taxonomy), ignore.case = TRUE)
sub("viridae$", "", unique(vh_file$best_query), ignore.case = TRUE)
grepl(sub("viridae$", "", unique(vh_file$ViralRefSeq_taxonomy), ignore.case = TRUE), sub("viridae$", "", unique(vh_file$best_query), ignore.case = TRUE), ignore.case = TRUE)
unique_families_in_data <- sub("viridae$", "", unique(vh_file$ViralRefSeq_taxonomy), ignore.case = TRUE)
family_colors_vector <- unique(vh_file$ViralRefSeq_taxonomy)
family_colors_vector
# Match colors to unique families in vh_file
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
family_cleaned <- str_remove(family, "(?i)viridae$")
# Exact match
exact_match <- names(family_colors_vector)[str_to_lower(names(family_colors_vector)) == str_to_lower(family_cleaned)]
if (length(exact_match) > 0) {
matched_colors[i] <- family_colors_vector[exact_match[1]]
} else {
# Partial match
partial_match <- names(family_colors_vector)[str_detect(names(family_colors_vector), regex(family_cleaned, ignore_case = TRUE))]
if (length(partial_match) > 0) {
matched_colors[i] <- family_colors_vector[partial_match[1]]
} else {
matched_colors[i] <- unique_phyla["unclassified"]
}
}
}
library(stringr)
# Match colors to unique families in vh_file
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
family_cleaned <- str_remove(family, "(?i)viridae$")
# Exact match
exact_match <- names(family_colors_vector)[str_to_lower(names(family_colors_vector)) == str_to_lower(family_cleaned)]
if (length(exact_match) > 0) {
matched_colors[i] <- family_colors_vector[exact_match[1]]
} else {
# Partial match
partial_match <- names(family_colors_vector)[str_detect(names(family_colors_vector), regex(family_cleaned, ignore_case = TRUE))]
if (length(partial_match) > 0) {
matched_colors[i] <- family_colors_vector[partial_match[1]]
} else {
matched_colors[i] <- unique_phyla["unclassified"]
}
}
}
unique_phyla <- c(
Taleaviricota = "#800000",
Peploviricota = "#9A6324",
Uroviricota = "#ffd8b1",
Hofneiviricota = "#469990",
Phixviricota = "#000075",
Cossaviricota = "#e6194B",
Cressdnaviricota = "#f58231",
Saleviricota = "#ffe119",
Ambiviricota = "#bfef45",
Duplornaviricota = "#3cb44b",
Kitrinoviricota = "#42d4f4",
Lenarviricota = "#4363d8",
Negarnaviricota = "#911eb4",
Pisuviricota = "#f032e6",
Artverviricota = "#808000",
Nucleocytoviricota = "#fffac8",
Preplasmiviricota = "#aaffc3",
Dividoviricota = "#dcbeff",
unclassified = "#a9a9a9"
)
# Match colors to unique families in vh_file
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
family_cleaned <- str_remove(family, "(?i)viridae$")
# Exact match
exact_match <- names(family_colors_vector)[str_to_lower(names(family_colors_vector)) == str_to_lower(family_cleaned)]
if (length(exact_match) > 0) {
matched_colors[i] <- family_colors_vector[exact_match[1]]
} else {
# Partial match
partial_match <- names(family_colors_vector)[str_detect(names(family_colors_vector), regex(family_cleaned, ignore_case = TRUE))]
if (length(partial_match) > 0) {
matched_colors[i] <- family_colors_vector[partial_match[1]]
} else {
matched_colors[i] <- unique_phyla["unclassified"]
}
}
}
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Match colors to unique families in vh_file
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
family_cleaned <- str_remove(family, "(?i)viridae$")
# Exact match
exact_match <- names(family_colors_vector)[str_to_lower(names(family_colors_vector)) == str_to_lower(family_cleaned)]
if (length(exact_match) > 0) {
matched_colors[i] <- family_colors_vector[exact_match[1]]
} else {
# Partial match
partial_match <- names(family_colors_vector)[str_detect(names(family_colors_vector), regex(family_cleaned, ignore_case = TRUE))]
if (length(partial_match) > 0) {
matched_colors[i] <- family_colors_vector[partial_match[1]]
} else {
matched_colors[i] <- unique_phyla["unclassified"]
}
}
}
matched_colors
unmatched <- is.na(matched_colors)
matched_colors[unmatched] <- unique_phyla["unclassified"]
# Filter out NA values (no matches) and corresponding family names
matched_families <- unique_families_in_data[!is.na(matched_colors)]
matched_colors <- matched_colors[!is.na(matched_colors)]
# Handle empty strings represented as ""
empty_strings <- matched_colors == ""
matched_colors[empty_strings] <- unique_phyla["unclassified"]
# Create matched_vector with matched colors and their names
matched_vector <- c(matched_colors)
names(matched_vector) <- matched_families
matched_vector
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
library(devtools)
document()
check()
library(devtools)
document()
check()
library(devtools)
install()
library(devtools)
install()
library(Virusparies)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
library(devtools)
load_all()
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
grepl("herpes", "Orthoherpesviridae", ignore.case = TRUE)
library(readxl)
ICTV_data <- read_excel("/media/sergej/My Book/Rskripte_f-r_masterarbeit-main/ICTV_2023_file.csv")
ICTV_data <- read.csv("/media/sergej/My Book/Rskripte_f-r_masterarbeit-main/ICTV_2023_file.csv")
unique_phyla <- c(
Taleaviricota = "#800000",
Peploviricota = "#9A6324",
Uroviricota = "#ffd8b1",
Hofneiviricota = "#469990",
Phixviricota = "#000075",
Cossaviricota = "#e6194B",
Cressdnaviricota = "#f58231",
Saleviricota = "#ffe119",
Ambiviricota = "#bfef45",
Duplornaviricota = "#3cb44b",
Kitrinoviricota = "#42d4f4",
Lenarviricota = "#4363d8",
Negarnaviricota = "#911eb4",
Pisuviricota = "#f032e6",
Artverviricota = "#808000",
Nucleocytoviricota = "#fffac8",
Preplasmiviricota = "#aaffc3",
Dividoviricota = "#dcbeff",
unclassified = "#a9a9a9"
)
# Iterate over each sublist of ICTV_data_split
for (phylum_name in names(ICTV_data_split)) {
# Get the color corresponding to the current phylum
phylum_color <- unique_phyla[phylum_name]
# Get unique families in the sublist
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
# Map each family to its corresponding color
family_colors <- rep(phylum_color, length(unique_families))
# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
# Split the data frame by the 'Phylum' column
ICTV_data_split <- split(ICTV_data, ICTV_data$Phylum)
# Initialize family colors vector
family_colors_vector <- character(length = length(unique(ICTV_data$Family)))
names(family_colors_vector) <- unique(ICTV_data$Family)
# Iterate over each sublist of ICTV_data_split
for (phylum_name in names(ICTV_data_split)) {
# Get the color corresponding to the current phylum
phylum_color <- unique_phyla[phylum_name]
# Get unique families in the sublist
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
# Map each family to its corresponding color
family_colors <- rep(phylum_color, length(unique_families))
# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
family_colors_vector
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(family_colors_vector)
names(family_colors_vector)["herpes"]
names(family_colors_vector)["herpe"]
names(family_colors_vector)["herp"]
names(family_colors_vector)["her"]
family_colors_vector["herpes"]
unique_families_in_data <- unique(vh_file$best_query)
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
matched_colors
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
print(color)
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Get unique families in vh_file[groupby]
unique_families_in_data <- unique(vh_file[[groupby]])
unique_families_in_data <- unique(vh_file$best_query)
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
print(partial_matches)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Match families in unique_families_in_data with family_colors_vector
matched_colors[match(unique_families_in_data, names(family_colors_vector))] <- family_colors_vector
matched_colors
View(ICTV_data_split)
View(ICTV_data_split[["Ambiviricota"]])
# Match families in unique_families_in_data with family_colors_vector
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
# Lookup color based on family name
matched_colors[i] <- family_colors_vector[family]
}
matched_colors
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
# Lookup color based on family name
matched_colors[i] <- family_colors_vector[family]
}
matched_colors
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(unique_families_in_data, names(color), ignore.case = TRUE)
print(partial_matches)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
print(partial_matches)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
matched_colors
unique_families_in_data
color
# Match families in unique_families_in_data with family_colors_vector
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
# Lookup color based on family name
matched_color <- family_colors_vector[family]
if (!is.na(matched_color) && matched_color != "") {
matched_colors[i] <- matched_color
} else {
matched_colors[i] <- unique_phyla["unclassified"]
}
}
matched_colors
names(family_colors_vector)
unique(ICTV_data$Famil
unique(ICTV_data$Family
unique(ICTV_data$Family)
unique_families_in_data
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
print(partial_matches)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Match families in unique_families_in_data with family_colors_vector
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
# Lookup color based on family name
matched_color <- family_colors_vector[family]
if (!is.na(matched_color) && matched_color != "") {
matched_colors[i] <- matched_color
} else {
matched_colors[i] <- family_colors_vector["Anaerodi"]  # Default to unclassified color
}
}
matched_colors
# Initialize vector to store matched colors
matched_colors <- character(length(unique_families_in_data))
# Iterate over unique family names
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
# Check if the family name exists in family_colors_vector
if (family %in% names(family_colors_vector)) {
matched_colors[i] <- family_colors_vector[family]
} else {
# If not found, assign a default color or handle as needed
matched_colors[i] <- "#a9a9a9"  # Default color for unmatched families
}
}
matched_colors
gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
unique(ICTV_data$Family)[251]
# Modify names in family_colors_vector, keeping "Pseudo" alone unchanged
modified_names <- gsub("^(Allo|Ortho)(?!viridae)|^(Pseudo)$", "", split(ICTV_data, ICTV_data$Phylum), ignore.case = TRUE)
# Modify names in family_colors_vector, keeping "Pseudo" alone unchanged
modified_names <- gsub("^(Allo|Ortho)(?!viridae)|^(Pseudo)$", "", split(ICTV_data, ICTV_data$Phylum), ignore.case = TRUE)
# Split the data frame by the 'Phylum' column
ICTV_data_split <- split(ICTV_data, ICTV_data$Phylum)
# Initialize family colors vector
family_colors_vector <- character(length = length(unique(ICTV_data$Family)))
names(family_colors_vector) <- unique(ICTV_data$Family)
# Iterate over each sublist of ICTV_data_split
for (phylum_name in names(ICTV_data_split)) {
# Get the color corresponding to the current phylum
phylum_color <- unique_phyla[phylum_name]
# Get unique families in the sublist
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
# Map each family to its corresponding color
family_colors <- rep(phylum_color, length(unique_families))
# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
gsub("^(Allo|Ortho)(?!viridae)|^(Pseudo)$", "", names(family_colors_vector), ignore.case = TRUE)
gsub("^(Allo|Ortho)(?!viridae)|^(Pseudo)$", "", names(family_colors_vector), ignore.case = TRUE)
# Loop through each name in family_colors_vector
for (i in seq_along(family_colors_vector)) {
name <- family_colors_vector[i]
# Check if name ends with "Pseudo"
if (grepl("Pseudo$", name, ignore.case = TRUE)) {
# Add "Pseudo" again
family_colors_vector[i] <- paste0(name, "Pseudo")
}
}
# Print original and modified vectors for comparison
print("Original names:")
print(family_colors_vector)
family_colors_vector[251]
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
family_colors_vector[251]
# Loop through each name in family_colors_vector
for (i in seq_along(family_colors_vector)) {
name <- family_colors_vector[i]
# Check if name ends with "Pseudo"
if (grepl("Pseudo$", name, ignore.case = TRUE)) {
# Add "Pseudo" again
family_colors_vector[i] <- paste0(name, "Pseudo")
}
}
# Print original and modified vectors for comparison
print("Original names:")
print(family_colors_vector)
family_colors_vector[251]
family_colors_vector["Pseudo"]
names(family_colors_vector["Pseudo"])
names(family_colors_vector["Pseudo"]) <- "PseudoPseudo"
names(family_colors_vector["Pseudo"])
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
# Print the updated vector
print(family_colors_vector)
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
# Print the updated vector
print(family_colors_vector)[251]
gsub("^(Allo|Ortho|Pseudo)", "","PseudoPseudo", ignore.case = TRUE)
# Iterate over each sublist of ICTV_data_split
for (phylum_name in names(ICTV_data_split)) {
# Get the color corresponding to the current phylum
phylum_color <- unique_phyla[phylum_name]
# Get unique families in the sublist
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
# Map each family to its corresponding color
family_colors <- rep(phylum_color, length(unique_families))
# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
# After assigning the colors, remove "viridae" from the names of family_colors_vector
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
# Rename "Pseudo" to "PseudoPseudo"
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
#print(partial_matches)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
matched_colors
# Handle unmatched virus groups (NA values)
unmatched <- is.na(matched_colors)
matched_colors[unmatched] <- unique_phyla["unclassified"]
matched_families <- unique_families_in_data[!is.na(matched_colors)]
matched_colors <- matched_colors[!is.na(matched_colors)]
# Handle empty strings represented as ""
empty_strings <- matched_colors == ""
matched_colors[empty_strings] <- unique_phyla["unclassified"]
# Create matched_vector with matched colors and their names
matched_vector <- c(matched_colors)
names(matched_vector) <- matched_families
matched_vector
library(devtools)
document()
check()
