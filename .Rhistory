y_column = "ViralRefSeq_E",
cut = 1e-5,
cut_colour = "#990000",
theme_choice = "linedraw",
flip_coords = TRUE,
title = "default",
title_size = 16,
title_face = "bold",
title_colour = "#2a475e",
subtitle = "default",
subtitle_size = 12,
subtitle_face = "bold",
subtitle_colour = "#1b2838",
xlabel = NULL,
ylabel = NULL,
axis_title_size = 12,
xtext_size = 10,
ytext_size = 10,
legend_title = "virus family",
legend_position = "bottom",
legend_title_size = 12,
legend_title_face = "bold",
legend_text_size = 10,
colorblind_support = FALSE,
colormap = "viridis"
){
is_file_empty(vh_file)
check_columns(vh_file,x_column)
check_columns(vh_file,y_column)
check_input_type(vh_file,y_column,2)
check_input_type(vh_file,x_column,1)
# check arguments
arg_character(theme_choice)
arg_character(legend_position)
arg_character(colormap)
arg_logical(flip_coords)
arg_logical(colorblind_support)
if(x_column == "ViralRefSeq_taxonomy"){
tax_column <- vh_file$ViralRefSeq_taxonomy
vh_file <- taxonomy_group_preprocess(vh_file)
}
# Find the smallest value greater than 0 in ViralRefSeq_E
min_positive_value <- min(vh_file$ViralRefSeq_E[vh_file$ViralRefSeq_E > 0])
# Replace all 0 values with the smallest positive value
vh_file$ViralRefSeq_E[vh_file$ViralRefSeq_E == 0] <- min_positive_value
# Get the parameters based on y_column
params <- get_plot_parameters(y_column, cut)
# Access the cutoff and ylabel from the returned list
cutoff <- params$cutoff
default_ylabel <- params$ylabel
# Apply the selected theme
theme_selected <- select_theme(theme_choice)
# set cutoff for contig_len and identity
if(y_column=="contig_len" | y_column== "ViralRefSeq_ident"){
message(paste(y_column," column was selected."))
message(paste("Removing values with E-values higher than: ",cut,"."))
vh_file <- vh_file[vh_file$ViralRefSeq_E < cut,]
message(paste0("after removing rows based on evalue the hittable has ",nrow(vh_file)," rows left."))
is_file_empty(vh_file)
}
# change values of evalues to -log10
if(y_column == "ViralRefSeq_E"){
y_aes <- -log10(vh_file[[y_column]])
}else{
y_aes <- vh_file[[y_column]]
}
# add default subtitle for E-values
if(y_column=="ViralRefSeq_E"){
# define a cut off fot evalue significance
default_sub <- paste0("red line shows viral Refrence E-values under user-defined threshold: ",10^(-cutoff)," (-log10 scale: ",cutoff,")")
}else{
default_sub <- NULL
}
# set default titles
default_titl <- switch(
y_column,
"ViralRefSeq_E" = "Boxplot plotting viral Reference E-Values for each virus family",
"contig_len" = "Boxplot plotting contig length for each virus family",
"ViralRefSeq_ident" = "Boxplot plotting viral Reference Identity for each virus family"
)
# Set the title
title_text <- if (title == "default") default_titl else if (is.null(title) || title == "") NULL else title
# Set the subtitle
subtitle_text <- if (subtitle == "default") default_sub else if (is.null(subtitle) || subtitle == "") NULL else subtitle
# Update xlabel to use user-provided label if provided
xlabel <- ifelse(!is.null(xlabel), xlabel, "Group in query")
# Determine the y-axis label based on user-provided ylabel or default label
ylabel <- ifelse(!is.null(ylabel), ylabel, default_ylabel)
########################
### generate boxplot ###
########################
# print message to console.
plot_boxplot_message(y_column=y_column,x_column=x_column,cutoff)
boxp <- ggplot(vh_file,aes(x=reorder(.data[[x_column]],y_aes,FUN=median),
y=y_aes,fill=.data[[x_column]]))+
geom_boxplot(staplewidth = 0.4)+
labs(x=xlabel,
y=ylabel,
title=title_text,
subtitle = subtitle_text)+
theme_selected+
theme(legend.position = legend_position)+
guides(fill=guide_legend(title=legend_title))+
theme(
plot.title = element_text(
size = title_size,
face = title_face,
color = title_colour),
axis.text.y = element_text(size = ytext_size),
axis.text.x = element_text(size = xtext_size),
axis.title = element_text(size = axis_title_size),
legend.text = element_text(size = legend_text_size),
legend.key.size = unit(1.5, "lines"),
legend.title = element_text(size = legend_title_size, face = legend_title_face),
plot.subtitle = element_text(
size = subtitle_size,
face = subtitle_face,
color= subtitle_colour
)
)
if (flip_coords) {
boxp <- boxp + coord_flip()
}
if(y_column=="ViralRefSeq_E"){
boxp <- boxp+geom_hline(aes(yintercept=cutoff), colour=cut_colour)
}
# add colorblind support
if(colorblind_support){
boxp<- colorbildsupport(boxp,colormap)
}
matched_vector <- consistentColourPalette(vh_file = vh_file, groupby = x_column)
boxp + scale_fill_manual(values = matched_vector)
print(matched_vector)
summary_stats <- boxp_summary_stats(vh_file, group = x_column,ycol =y_column)
if(x_column == "ViralRefSeq_taxonomy"){
vh_file$ViralRefSeq_taxonomy <- tax_column
}
if (y_column == "ViralRefSeq_E") {
outlier <- find_outlier_eval_box(vh_file, group = x_column)
} else if (y_column == "contig_len") {
outlier <- find_outlier_eval_box(vh_file, group = x_column, y_column = y_column)
}
#plot(boxp)
# Prepare the results list
results <- list(boxp = boxp, summary_stats = summary_stats)
# Add outliers if applicable
if (y_column == "ViralRefSeq_E" || y_column == "contig_len") {
results$outlier <- outlier
}
# extract rows below threshold
if (y_column == "ViralRefSeq_E") {
belowthres_boxp <- vhg_filter_belowthresholdboxplot(vh_file,cut)
results$rows_belowthres <- belowthres_boxp
}
# Return the results list
message("Boxplot generation completed.")
return(results)
}
VhgBoxplot()
VhgBoxplot(vh_file)
library(devtools)
install()
# plot 5: Virusgatherer plot for SRA_runs agains contig length
plot5 <- VhgBoxplot(vh_file,x_column = "ViralRefSeq_taxonomy",y_column = "ViralRefSeq_E")
# plot 5: Virusgatherer plot for SRA_runs agains contig length
plot5 <- VhgBoxplot(vh_file,x_column = "ViralRefSeq_taxonomy",y_column = "ViralRefSeq_E")
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 5: Virusgatherer plot for SRA_runs agains contig length
plot5 <- VhgBoxplot(vh_file,x_column = "ViralRefSeq_taxonomy",y_column = "ViralRefSeq_E")
plot5
# plot 5: Virusgatherer plot for SRA_runs agains contig length
plot5 <- VhgBoxplot(vh_file,x_column = "ViralRefSeq_taxonomy",y_column = "ViralRefSeq_E")
library(devtools)
install()
# plot 5: Virusgatherer plot for SRA_runs agains contig length
plot5 <- VhgBoxplot(vh_file,x_column = "ViralRefSeq_taxonomy",y_column = "ViralRefSeq_E")
View(plot5)
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
library(devtools)
document()
install()
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "ViralRefSeq_taxonomy", y_column = "ViralRefSeq_E")
plot1
library(devtools)
document()
check()
install()
library(Virusparies)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
plot1$boxp+ scale_fill_manual(values = plot1$matched_vector)
library(ggplot2)
plot1$boxp+ scale_fill_manual(values = plot1$matched_vector)
rlang::last_trace()
is.na(plot1$matched_vector)
plot1$matched_vector[""]
plot1$matched_vector[]==""
test <-plot1$matched_vector[]==""
plot1$matched_vector[test]
plot1$matched_vector[test] <- "#a9a9a9"
plot1$matched_vector
library(ggplot2)
plot1$boxp+ + scale_fill_manual(values = plot1$matched_vector)
plot1$boxp+ scale_fill_manual(values = plot1$matched_vector)
library(devtools)
document()
check()
install()
library(Virusparies)
?VhgBoxplot
library()
library(devtools)
document()
check()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
names(vh_file)
library(devtools)
document()
check()
check()
install()
library(Virusparies)
?`Virusparies-package`
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
library(devtools)
document()
check()
install()
library(Virusparies)
?`Virusparies-package`
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
consistentColourPalette <- function(vh_file = vh_file, groupby = "best_query") {
unique_phyla <- c(
Taleaviricota = "#800000",
Peploviricota = "#9A6324",
Uroviricota = "#ffd8b1",
Hofneiviricota = "#469990",
Phixviricota = "#000075",
Cossaviricota = "#e6194B",
Cressdnaviricota = "#f58231",
Saleviricota = "#ffe119",
Ambiviricota = "#bfef45",
Duplornaviricota = "#3cb44b",
Kitrinoviricota = "#42d4f4",
Lenarviricota = "#4363d8",
Negarnaviricota = "#911eb4",
Pisuviricota = "#f032e6",
Artverviricota = "#808000",
Nucleocytoviricota = "#fffac8",
Preplasmiviricota = "#aaffc3",
Dividoviricota = "#dcbeff",
unclassified = "#a9a9a9"
)
# Assuming ICTV_data is properly loaded and formatted
ICTV_data <- ICTV_data  # Replace with your actual ICTV_data
# Split the data frame by the 'Phylum' column
ICTV_data_split <- split(ICTV_data, ICTV_data$Phylum)
# Initialize family colors vector
family_colors_vector <- character(length = length(unique(ICTV_data$Family)))
names(family_colors_vector) <- unique(ICTV_data$Family)
# Iterate over each sublist of ICTV_data_split
for (phylum_name in names(ICTV_data_split)) {
# Get the color corresponding to the current phylum
phylum_color <- unique_phyla[phylum_name]
# Get unique families in the sublist
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
# Map each family to its corresponding color
family_colors <- rep(phylum_color, length(unique_families))
# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
# After assigning the colors, remove "viridae" from the names of family_colors_vector
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
# Get unique families in vh_file[groupby]
unique_families_in_data <- unique(vh_file[[groupby]])
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Handle unmatched virus groups (NA values)
unmatched <- is.na(matched_colors)
matched_colors[unmatched] <- unique_phyla["unclassified"]
# Filter out NA values (no matches) and corresponding family names
matched_families <- unique_families_in_data[!is.na(matched_colors)]
matched_colors <- matched_colors[!is.na(matched_colors)]
# Handle empty strings represented as ""
empty_strings <- matched_colors == ""
matched_colors[empty_strings] <- unique_phyla["unclassified"]
# Create matched_vector with matched colors and their names
matched_vector <- c(matched_colors)
names(matched_vector) <- matched_families
return(matched_vector)
}
test <- consistentColourPalette(vh_file)
sub("viridae$", "", unique(vh_file$ViralRefSeq_taxonomy), ignore.case = TRUE)
taxonomy_group_preprocess <- function(vh_file){
# split vh_file.
my_list <- strsplit(vh_file$ViralRefSeq_taxonomy,split = "|",fixed = TRUE)
# Apply the function to each sublist
viridae_elements <- lapply(my_list, extract_viridae)
# Initialize an empty vector to store the filtered names
filtered_names <- vector("list", length = length(viridae_elements))
# Iterate over each element in viridae_elements
for (i in seq_along(viridae_elements)) {
# Check if the element contains two or more strings
if (length(viridae_elements[[i]]) >= 2) {
# Extract only the virus family names without additional text
filtered_names[[i]] <- grep("^[[:alnum:]]+viridae$", viridae_elements[[i]], value = TRUE)
} else {
# If the element contains less than two strings, keep it unchanged
filtered_names[[i]] <- viridae_elements[[i]]
}
}
# Remove elements containing "unclassified" outside the function
viridae_elements <- lapply(filtered_names, function(x) x[!grepl("unclassified", x)])
viridae_elements[is.na(viridae_elements)] <- "unclassified"
vh_file$ViralRefSeq_taxonomy <- unlist(viridae_elements)
return(vh_file)
}
vh_file <- taxonomy_group_preprocess(vh_file = vh_file)
extract_viridae <- function(sublist) {
element <- subset(sublist, grepl("viridae", sublist))
if (length(element) > 0) {
return(element)
} else {
return(NA)  # Return NA if "viridae" is not found in the sublist
}
}
vh_file <- taxonomy_group_preprocess(vh_file = vh_file)
unique(vh_file$ViralRefSeq_taxonomy)
sub("viridae$", "", unique(vh_file$ViralRefSeq_taxonomy), ignore.case = TRUE)
sub("viridae$", "", unique(vh_file$best_query), ignore.case = TRUE)
grepl(sub("viridae$", "", unique(vh_file$ViralRefSeq_taxonomy), ignore.case = TRUE), sub("viridae$", "", unique(vh_file$best_query), ignore.case = TRUE), ignore.case = TRUE)
unique_families_in_data <- sub("viridae$", "", unique(vh_file$ViralRefSeq_taxonomy), ignore.case = TRUE)
family_colors_vector <- unique(vh_file$ViralRefSeq_taxonomy)
family_colors_vector
# Match colors to unique families in vh_file
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
family_cleaned <- str_remove(family, "(?i)viridae$")
# Exact match
exact_match <- names(family_colors_vector)[str_to_lower(names(family_colors_vector)) == str_to_lower(family_cleaned)]
if (length(exact_match) > 0) {
matched_colors[i] <- family_colors_vector[exact_match[1]]
} else {
# Partial match
partial_match <- names(family_colors_vector)[str_detect(names(family_colors_vector), regex(family_cleaned, ignore_case = TRUE))]
if (length(partial_match) > 0) {
matched_colors[i] <- family_colors_vector[partial_match[1]]
} else {
matched_colors[i] <- unique_phyla["unclassified"]
}
}
}
library(stringr)
# Match colors to unique families in vh_file
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
family_cleaned <- str_remove(family, "(?i)viridae$")
# Exact match
exact_match <- names(family_colors_vector)[str_to_lower(names(family_colors_vector)) == str_to_lower(family_cleaned)]
if (length(exact_match) > 0) {
matched_colors[i] <- family_colors_vector[exact_match[1]]
} else {
# Partial match
partial_match <- names(family_colors_vector)[str_detect(names(family_colors_vector), regex(family_cleaned, ignore_case = TRUE))]
if (length(partial_match) > 0) {
matched_colors[i] <- family_colors_vector[partial_match[1]]
} else {
matched_colors[i] <- unique_phyla["unclassified"]
}
}
}
unique_phyla <- c(
Taleaviricota = "#800000",
Peploviricota = "#9A6324",
Uroviricota = "#ffd8b1",
Hofneiviricota = "#469990",
Phixviricota = "#000075",
Cossaviricota = "#e6194B",
Cressdnaviricota = "#f58231",
Saleviricota = "#ffe119",
Ambiviricota = "#bfef45",
Duplornaviricota = "#3cb44b",
Kitrinoviricota = "#42d4f4",
Lenarviricota = "#4363d8",
Negarnaviricota = "#911eb4",
Pisuviricota = "#f032e6",
Artverviricota = "#808000",
Nucleocytoviricota = "#fffac8",
Preplasmiviricota = "#aaffc3",
Dividoviricota = "#dcbeff",
unclassified = "#a9a9a9"
)
# Match colors to unique families in vh_file
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
family_cleaned <- str_remove(family, "(?i)viridae$")
# Exact match
exact_match <- names(family_colors_vector)[str_to_lower(names(family_colors_vector)) == str_to_lower(family_cleaned)]
if (length(exact_match) > 0) {
matched_colors[i] <- family_colors_vector[exact_match[1]]
} else {
# Partial match
partial_match <- names(family_colors_vector)[str_detect(names(family_colors_vector), regex(family_cleaned, ignore_case = TRUE))]
if (length(partial_match) > 0) {
matched_colors[i] <- family_colors_vector[partial_match[1]]
} else {
matched_colors[i] <- unique_phyla["unclassified"]
}
}
}
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Match colors to unique families in vh_file
for (i in seq_along(unique_families_in_data)) {
family <- unique_families_in_data[i]
family_cleaned <- str_remove(family, "(?i)viridae$")
# Exact match
exact_match <- names(family_colors_vector)[str_to_lower(names(family_colors_vector)) == str_to_lower(family_cleaned)]
if (length(exact_match) > 0) {
matched_colors[i] <- family_colors_vector[exact_match[1]]
} else {
# Partial match
partial_match <- names(family_colors_vector)[str_detect(names(family_colors_vector), regex(family_cleaned, ignore_case = TRUE))]
if (length(partial_match) > 0) {
matched_colors[i] <- family_colors_vector[partial_match[1]]
} else {
matched_colors[i] <- unique_phyla["unclassified"]
}
}
}
matched_colors
unmatched <- is.na(matched_colors)
matched_colors[unmatched] <- unique_phyla["unclassified"]
# Filter out NA values (no matches) and corresponding family names
matched_families <- unique_families_in_data[!is.na(matched_colors)]
matched_colors <- matched_colors[!is.na(matched_colors)]
# Handle empty strings represented as ""
empty_strings <- matched_colors == ""
matched_colors[empty_strings] <- unique_phyla["unclassified"]
# Create matched_vector with matched colors and their names
matched_vector <- c(matched_colors)
names(matched_vector) <- matched_families
matched_vector
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
library(devtools)
document()
check()
library(devtools)
document()
check()
library(devtools)
install()
library(devtools)
install()
