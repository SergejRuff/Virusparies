vh_file <- ImportVirusTable(path)
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = NULL)
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "min")
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "max")
library(devtools)
document()
check()
install()
library(Virusparies)
?VhgRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhgRunsBarplot(vh_file,cut = 1e-5,reorder_criteria = NULL)
VhgRunsBarplot(vh_file,cut = 1e-5,reorder_criteria = "min")
VhgRunsBarplot(vh_file,cut = 1e-5,reorder_criteria = "max")
library()
library(Virusparies)
VhgBoxplot()
VhgIdenFacetedScatterPlot()
VhgIdentityScatterPlot()
VhgRunsBarplot()
VhgRunsTable()
vapply(, function, FUN.VALUE = type, ...)
VgConLenViolin()
library(gridExtra)
?plot_grid
?plot_grid
?plot_grid
plot_grid
library(cowplot)
?plot_grid
library(Virusparies)
library(ggplot2)
# Example ggplot2 plot
p <- ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Check if the object is a ggplot
is_ggplot <- inherits(p, "ggplot")
print(is_ggplot)
inherits(p, "ggplot")
library(ggplot2)
is_plot <- function(obj) {
if (!(inherits(obj, "ggplot") || inherits(obj, "recordedplot"))) {
stop("The object is not a plot")
}
return("Plot export completed successfully.")
}
# Example ggplot2 plot
p <- ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Create a base R plot and record it
plot(mtcars$wt, mtcars$mpg)
rp <- recordPlot()
# Check if objects are plots and return the success message if they are
message_ggplot <- is_plot(p)  # Should return "Plot export completed successfully."
print(message_ggplot)
message_recordedplot <- is_plot(rp)  # Should return "Plot export completed successfully."
print(message_recordedplot)
# Test with a non-plot object to see the error
non_plot <- "This is not a plot"
message_non_plot <- is_plot(non_plot)  # Should raise an error
is.list(p)
View(p)
# Load ggplot2 for plot objects
library(ggplot2)
# Example plot objects
plot1 <- ggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()
plot2 <- ggplot(mtcars, aes(x=wt, y=drat)) + geom_point()
# Example list containing plot objects
plot_variable <- list(plot1, plot2)
# Check if plot_variable is a list containing ggplot objects
if (is.list(plot_variable) && all(sapply(plot_variable, function(x) inherits(x, "ggplot")))) {
print("The plot_variable is a list containing ggplot objects.")
} else {
print("The plot_variable is not a list containing ggplot objects.")
}
# Load ggplot2 for plot objects
library(ggplot2)
# Example plot objects
plot1 <- ggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()
plot2 <- ggplot(mtcars, aes(x=wt, y=drat)) + geom_point()
# Example list containing mixed objects
plot_variable <- list(plot1, "not_a_plot", plot2)
# Check if plot_variable is a list containing ggplot objects
if (is.list(plot_variable) && all(sapply(plot_variable, function(x) inherits(x, "ggplot")))) {
print("The plot_variable is a list containing ggplot objects.")
} else {
print("The plot_variable is not a list containing ggplot objects.")
}
# Check if plot_variable is a list containing ggplot objects
if (is.list(plot_1) && all(sapply(plot_variable, function(x) inherits(x, "ggplot")))) {
print("The plot_variable is a list containing ggplot objects.")
} else {
print("The plot_variable is not a list containing ggplot objects.")
}
# Check if plot_variable is a list containing ggplot objects
if (is.list(plot1) && all(sapply(plot_variable, function(x) inherits(x, "ggplot")))) {
print("The plot_variable is a list containing ggplot objects.")
} else {
print("The plot_variable is not a list containing ggplot objects.")
}
plot_grid( p1,p7,p3,p5, p2,p8,p4,p6, ncol=4, nrow=2, rel_widths=c(1,1,1,1.65), rel_heights=c(N1,N2*0.9),
align="v", axis="l", labels=c("A","B","C","D","E","F","G","H"), hjust=-1 )
library(cowplot)
plot_grid( p1,p7,p3,p5, p2,p8,p4,p6, ncol=4, nrow=2, rel_widths=c(1,1,1,1.65), rel_heights=c(N1,N2*0.9),
align="v", axis="l", labels=c("A","B","C","D","E","F","G","H"), hjust=-1 )
# Assuming you have some plots defined as p1, p2, ..., p8
# Example plots (replace with your actual plot objects)
library(ggplot2)
p1 <- ggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()
p2 <- ggplot(mtcars, aes(x=wt, y=drat)) + geom_point()
p3 <- ggplot(mtcars, aes(x=disp, y=drat)) + geom_point()
p4 <- ggplot(mtcars, aes(x=mpg, y=disp)) + geom_point()
p5 <- ggplot(mtcars, aes(x=hp, y=wt)) + geom_point()
p6 <- ggplot(mtcars, aes(x=wt, y=hp)) + geom_point()
p7 <- ggplot(mtcars, aes(x=disp, y=hp)) + geom_point()
p8 <- ggplot(mtcars, aes(x=disp, y=wt)) + geom_point()
# Example of using plot_grid with specified parameters
library(cowplot)
# Relative heights for rows
N1 <- 1
N2 <- 0.9
# Plot grid with custom parameters
plot_grid(
p1, p7, p3, p5,
p2, p8, p4, p6,
ncol = 4, nrow = 2,
rel_widths = c(1, 1, 1, 1.65),
rel_heights = c(N1, N2 * 0.9),
align = "v", axis = "l",
labels = c("A", "B", "C", "D", "E", "F", "G", "H"),
hjust = -1
)
# Assuming you have some plots defined as p1, p2, ..., p8
# Example plots (replace with your actual plot objects)
library(ggplot2)
p1 <- ggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()
p2 <- ggplot(mtcars, aes(x=wt, y=drat)) + geom_point()
p3 <- ggplot(mtcars, aes(x=disp, y=drat)) + geom_point()
p4 <- ggplot(mtcars, aes(x=mpg, y=disp)) + geom_point()
p5 <- ggplot(mtcars, aes(x=hp, y=wt)) + geom_point()
p6 <- ggplot(mtcars, aes(x=wt, y=hp)) + geom_point()
p7 <- ggplot(mtcars, aes(x=disp, y=hp)) + geom_point()
p8 <- ggplot(mtcars, aes(x=disp, y=wt)) + geom_point()
# Example of using plot_grid with specified parameters
library(cowplot)
# Relative heights for rows
N1 <- 1
N2 <- 0.9
# Plot grid with custom parameters
plot_grid(
list(p1, p7, p3, p5,
p2, p8, p4, p6),
ncol = 4, nrow = 2,
rel_widths = c(1, 1, 1, 1.65),
rel_heights = c(N1, N2 * 0.9),
align = "v", axis = "l",
labels = c("A", "B", "C", "D", "E", "F", "G", "H"),
hjust = -1
)
# Assuming you have some plots defined as p1, p2, ..., p8
# Example plots (replace with your actual plot objects)
library(ggplot2)
p1 <- ggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()
p2 <- ggplot(mtcars, aes(x=wt, y=drat)) + geom_point()
p3 <- ggplot(mtcars, aes(x=disp, y=drat)) + geom_point()
p4 <- ggplot(mtcars, aes(x=mpg, y=disp)) + geom_point()
p5 <- ggplot(mtcars, aes(x=hp, y=wt)) + geom_point()
p6 <- ggplot(mtcars, aes(x=wt, y=hp)) + geom_point()
p7 <- ggplot(mtcars, aes(x=disp, y=hp)) + geom_point()
p8 <- ggplot(mtcars, aes(x=disp, y=wt)) + geom_point()
# Example of using plot_grid with specified parameters
library(cowplot)
# Relative heights for rows
N1 <- 1
N2 <- 0.9
# Plot grid with custom parameters
plot_grid(
unlist(list(p1, p7, p3, p5,
p2, p8, p4, p6)),
ncol = 4, nrow = 2,
rel_widths = c(1, 1, 1, 1.65),
rel_heights = c(N1, N2 * 0.9),
align = "v", axis = "l",
labels = c("A", "B", "C", "D", "E", "F", "G", "H"),
hjust = -1
)
# Example plots (replace with your actual plot objects)
library(ggplot2)
p1 <- ggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()
p2 <- ggplot(mtcars, aes(x=wt, y=drat)) + geom_point()
p3 <- ggplot(mtcars, aes(x=disp, y=drat)) + geom_point()
p4 <- ggplot(mtcars, aes(x=mpg, y=disp)) + geom_point()
p5 <- ggplot(mtcars, aes(x=hp, y=wt)) + geom_point()
p6 <- ggplot(mtcars, aes(x=wt, y=hp)) + geom_point()
p7 <- ggplot(mtcars, aes(x=disp, y=hp)) + geom_point()
p8 <- ggplot(mtcars, aes(x=disp, y=wt)) + geom_point()
# Combine plots into a list
plot_list <- list(p1, p7, p3, p5, p2, p8, p4, p6)
# Example of using plot_grid with specified parameters
library(cowplot)
# Relative heights for rows
N1 <- 1
N2 <- 0.9
# Plot grid with custom parameters
plot_grid(
plotlist = plot_list,
ncol = 4, nrow = 2,
rel_widths = c(1, 1, 1, 1.65),
rel_heights = c(N1, N2 * 0.9),
align = "v", axis = "l",
labels = c("A", "B", "C", "D", "E", "F", "G", "H"),
hjust = -1
)
# Example plots (replace with your actual plot objects)
library(ggplot2)
p1 <- ggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()
p2 <- ggplot(mtcars, aes(x=wt, y=drat)) + geom_point()
p3 <- ggplot(mtcars, aes(x=disp, y=drat)) + geom_point()
p4 <- ggplot(mtcars, aes(x=mpg, y=disp)) + geom_point()
p5 <- ggplot(mtcars, aes(x=hp, y=wt)) + geom_point()
p6 <- ggplot(mtcars, aes(x=wt, y=hp)) + geom_point()
p7 <- ggplot(mtcars, aes(x=disp, y=hp)) + geom_point()
p8 <- ggplot(mtcars, aes(x=disp, y=wt)) + geom_point()
# Combine plots into a list
plot_list <- list(p1, p7, p3, p5, p2, p8, p4, p6)
# Example of using plot_grid with specified parameters
library(cowplot)
# Relative heights for rows
N1 <- 1
N2 <- 0.9
# Plot grid with custom parameters
plot_grid(
plotlist = plot_list,
ncol = 4, nrow = 2,
rel_widths = c(1, 1, 1, 1.65),
rel_heights = c(N1, N2 * 0.9),
align = "v", axis = "l",
labels = c("A", "B", "C", "D", "E", "F", "G", "H"),
hjust = -1
)
?grid_plot
library(devtools)
document()
document()
check()
?`cowplot-package`
use_package("cowplot")
document()
check()
install()
library(cowplot)
?grid_plot
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
install()
library(cowplot)
?ggsave2
?ggsave
library(devtools)
document()
document()
document()
document()
check()
document()
check()
install()
library(devtools)
document()
check()
install()
library(devtools)
document()
install()
library(cowplot)
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
document()
check()
install()
?ExportVirusPlot
filename <- "test.pdf"
# Remove the prefix (file extension)
filename_without_extension <- tools::file_path_sans_ext(filename)
new_filename <- paste0(filename_without_extension, ".rds")
library(devtools)
use_package("tools")
document()
check()
document()
check()
install()
getwd()
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
tools::file_path_sans_ext("table.docx")
install()
library(devtools)
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "minimal")
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "dark")
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "void")
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "void)
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "grey" )
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "test". )
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",theme_choice =  "test" )
plot1
?VhgRunsBarplot
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(vh_file,cut = 1e-5)
plot
?VgConLenViolin
# create a violinplot.
violinplot <- VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# create a violinplot.
violinplot <- VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
violinplot
?VhSumHitsBarplot
rm(list = ls())
library(devtools)
document()
check()
install()
libra
library(devtools)
document()
is_file_empty <- function(file) {
if (nrow(file) == 0) {
message("Warning: Input has zero rows. Skipping further processing.")
return(TRUE)
}
return(FALSE)
}
VhgBoxplot <- function(data) {
# Example function to generate boxplot
if (is_file_empty(data)) {
return(invisible(NULL))  # Return NULL if data is empty
}
message("Generating VhgBoxplot...")
boxplot(data)
# Additional processing if needed
# ...
}
# Example usage
empty_data <- data.frame()  # Empty data frame
non_empty_data <- data.frame(x = 1:10, y = rnorm(10))  # Non-empty data frame
VhgBoxplot(empty_data)  # Should skip generating boxplot
VhgBoxplot(non_empty_data)  # Should generate boxplot
is_file_empty <- function(file) {
if (nrow(file) == 0) {
message("Warning: Input has zero rows. Skipping further processing.")
return(invisible(NULL))  # Stop further execution in VhgBoxplot
}
return(FALSE)
}
VhgBoxplot <- function(data) {
# Call is_file_empty to check if data is empty
is_file_empty(data)
# Example function to generate boxplot
message("Generating VhgBoxplot...")
boxplot(data)
# Additional processing if needed
# ...
}
# Example usage
empty_data <- data.frame()  # Empty data frame
non_empty_data <- data.frame(x = 1:10, y = rnorm(10))  # Non-empty data frame
VhgBoxplot(empty_data)  # Should skip generating boxplot
is_file_empty <- function(file) {
if (nrow(file) == 0) {
message("Warning: Input has zero rows. Skipping further processing.")
return(invisible(NULL))  # Stop further execution in VhgBoxplot
}
return(FALSE)
}
VhgBoxplot <- function(data) {
# Call is_file_empty to check if data is empty
is_file_empty(data)
# Example function to generate boxplot
message("Generating VhgBoxplot...")
boxplot(data)
# Additional processing if needed
# ...
}
# Example usage
empty_data <- data.frame()  # Empty data frame
non_empty_data <- data.frame(x = 1:10, y = rnorm(10))  # Non-empty data frame
VhgBoxplot(empty_data)  # Should skip generating boxplot
is_file_empty <- function(file) {
if (nrow(file) == 0) {
message("Warning: Input has zero rows. Skipping further processing.")
return(invisible(NULL))  # Stop further execution in VhgBoxplot
}
return(FALSE)
}
VhgBoxplot <- function(data) {
# Call is_file_empty to check if data is empty
is_file_empty(data)
# Example function to generate boxplot
message("Generating VhgBoxplot...")
boxplot(data)
# Additional processing if needed
# ...
}
# Example usage
empty_data <- data.frame()  # Empty data frame
non_empty_data <- data.frame(x = 1:10, y = rnorm(10))  # Non-empty data frame
VhgBoxplot(empty_data)  # Should skip generating boxplot
library(devtools)
document()
rm(list = ls())
document()
check()
document()
check()
install()
library()
library(devtools)
document()
check()
install()
document()
check()
document()
check()
install()
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
document()
check()
install()
?head
library(devtools)
document()
check()
document()
check()
document()
check()
install()
library(devtools)
document()
check()
library(devtools)
install()
library(devtools)
document()
check()
document()
check()
install()
