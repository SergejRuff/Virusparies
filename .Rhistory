# Create a bar plot with the specified colors
barplot(rep(1, 19), col = colors, names.arg = labels, las = 2, cex.names = 0.7, border = "white", main = "Colorblind-Friendly Colors")
# Adjust margins for better display
par(mar = c(5, 4, 4, 2) + 0.1)
library(ggplot2)
# Define the 20 colors
colors <- c("#1F77B4", "#AEC7E8", "#FF7F0E", "#FFBB78", "#2CA02C", "#98DF8A",
"#FF9896", "#9467BD", "#C5B0D5", "#8C564B", "#C49C94",
"#E377C2", "#F7B6D2", "#7F7F7F", "#C7C7C7", "#BCBD22", "#DBDB8D",
"#17BECF", "#9EDAE5")
# Generate labels for the bars
labels <- paste("Color", 1:19)
# Adjust margins for better display
par(mar = c(5, 4, 4, 2) + 0.1)
# Create a bar plot with the specified colors and save it to a variable
plot_variable <- recordPlot({
barplot(rep(1, 19), col = colors, names.arg = labels, las = 2, cex.names = 0.7, border = "white", main = "Colorblind-Friendly Colors")
})
# Display the saved plot
plot_variable
cvdPlot(
plot = plot_variable,
layout = c( "deuteranope", "protanope", "desaturate")
)
plot_variable
cvdPlot(
plot = plot_variable,
layout = c( "deuteranope", "protanope", "desaturate")
)
# Load the necessary library
library(ggplot2)
# Define the 20 colors
colors <- c("#1F77B4", "#AEC7E8", "#FF7F0E", "#FFBB78", "#2CA02C", "#98DF8A",
"#D62728", "#FF9896", "#9467BD", "#C5B0D5", "#8C564B", "#C49C94",
"#E377C2", "#F7B6D2", "#7F7F7F", "#C7C7C7", "#BCBD22", "#DBDB8D",
"#17BECF", "#9EDAE5")
# Create a data frame with colors and labels
df <- data.frame(
label = paste("Color", 1:20),
value = rep(1, 20)
)
# Create a ggplot object
ggplot_object <- ggplot(df, aes(x = label, y = value, fill = label)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = colors) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Colorblind-Friendly Colors", x = NULL, y = NULL)
# Display the ggplot object
print(ggplot_object)
cvdPlot(
plot = ggplot_object,
layout = c( "deuteranope", "protanope", "desaturate")
)
cvdPlot(
plot = ggplot_object,
layout = c("original", "deuteranope", "protanope", "desaturate")
)
cvdPlot(
plot = ggplot_object,
layout = c("original", "deuteranope", "protanope")
)
# Load the necessary library
library(ggplot2)
# Define the colors and their corresponding names
colors <- c("#006BA4", "#FF800E", "#ABABAB", "#595959", "#5F9ED1",
"#C85200", "#898989", "#A2C8EC", "#FFBC79", "#CFCFCF")
names <- c("darkcyan(0.159), teal(0.163), steelblue(0.296)",
"darkorange(0.072), orange(0.155), chocolate(0.208)",
"darkgray(0.014), darkgrey(0.014), silver(0.143)",
"dimgrey(0.109), dimgray(0.109), darkslategray(0.174)",
"cornflowerblue(0.117), steelblue(0.186), cadetblue(0.192)",
"chocolate(0.153), darkgoldenrod(0.218), orangered(0.222)",
"grey(0.061), gray(0.061), lightslategrey(0.095)",
"lightsteelblue(0.079), lightblue(0.080), skyblue(0.109)",
"lightsalmon(0.110), burlywood(0.141), sandybrown(0.143)",
"lightgray(0.027), lightgrey(0.027), thistle(0.080)")
# Create a data frame
df <- data.frame(
label = paste("Color", 1:10),
value = rep(1, 10),
color_hex = colors,
color_names = names
)
# Create a ggplot object
ggplot_object <- ggplot(df, aes(x = label, y = value, fill = color_hex)) +
geom_bar(stat = "identity") +
scale_fill_identity() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
labs(title = "Colorblind-Friendly Colors with Corresponding Names") +
geom_text(aes(label = color_names), color = "black", angle = 90, hjust = 0, vjust = 0.5, size = 3, nudge_y = 0.2)
# Display the ggplot object
print(ggplot_object)
library(devtools)
document()
check()
document()
check()
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",reorder_criteria = NULL)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",reorder_criteria = "min")
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",reorder_criteria = "max")
VgConLenViolin()
?VgConLenViolin()
?geom_jitter(
?geom_jitter()
library(devtools)
document()
check()
install()
library(Virusparies)
?VhgRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhgRunsBarplot(vh_file,cut = 1e-5)
VhgRunsBarplot(vh_file,cut = 1e-5,reorder_criteria = "max")
VhgRunsBarplot(vh_file,cut = 1e-5,reorder_criteria = "min")
VhgRunsBarplot(vh_file,cut = 1e-5,reorder_criteria = NULL)
test <- VhgRunsBarplot(vh_file,cut = 1e-5,reorder_criteria = "min")
max(test$sample_run)
min(test$sample_run)
min(test$sample_run$unique_SRA_run)
max(test$sample_run$unique_SRA_run)
VhgRunsBarplot(vh_file,cut = 1e-5,reorder_criteria = "min")
VhgRunsBarplot(vh_file,cut = 1e-5,reorder_criteria = "max")
VhgRunsBarplot(vh_file,cut = 1e-5,reorder_criteria = NULL)
test$sample_run$unique_SRA_run
test$sample_run
VhgRunsBarplot(vh_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5,reorder_criteria = NULL)
VhgRunsBarplot(vh_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5,reorder_criteria = "max")
VhgRunsBarplot(vh_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5,reorder_criteria = "min")
library(devtools)
document()
check()
install()
library(Virusparies)
?VhSumHitsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "max")
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = NULL)
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "min")
test <- VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "min")
?reorder()
library(dplyr)
library(ggplot2)
# Sample data
test <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25)
)
ggplot(data = test, aes(x = reorder(vh_group, sum, FUN = min), y = sum, fill = vh_group)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Minimum Sum",
x = "vh_group (ordered by min sum)",
y = "sum") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Sample data
vh_group <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25),
phylum = c("Phylum1", "Phylum2", "Phylum3", "Phylum1", "Phylum2", "Phylum3")
)
# Define parameters
groupby <- "vh_group"
reorder_criteria <- "min"  # Can be "max" or "min"
# Generate the plot
sum_plot <- ggplot(data = vh_group, aes(x = if (!is.null(reorder_criteria)) {
reorder(.data[[groupby]], .data$sum,
FUN = switch(reorder_criteria,
"max" = max,
"min" = min))
} else {
factor(.data[[groupby]], levels = rev(unique(sort(.data[[groupby]]))))
}, y = .data$sum, fill = .data$phylum)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Sum Criteria",
x = "vh_group (ordered by criteria)",
y = "sum") +
theme_minimal()
# Print the plot
print(sum_plot)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Sample data
vh_group <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25),
phylum = c("Phylum1", "Phylum2", "Phylum3", "Phylum1", "Phylum2", "Phylum3")
)
# Define parameters
groupby <- "vh_group"
reorder_criteria <- "min"  # Can be "max" or "min"
# Generate the plot
sum_plot <- ggplot(data = vh_group, aes(x = if (!is.null(reorder_criteria)) {
reorder(.data[[groupby]], .data$sum,
FUN = switch(reorder_criteria,
"max" = max,
"min" = min))
} else {
factor(.data[[groupby]], levels = rev(unique(sort(.data[[groupby]]))))
}, y = .data$sum, fill = .data$phylum)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Sum Criteria",
x = "vh_group (ordered by criteria)",
y = "sum") +
theme_minimal()
# Print the plot
print(sum_plot)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Sample data
vh_group <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25),
phylum = c("Phylum1", "Phylum2", "Phylum3", "Phylum1", "Phylum2", "Phylum3")
)
# Define parameters
groupby <- "vh_group"
reorder_criteria <- "max"  # Can be "max" or "min"
# Generate the plot
sum_plot <- ggplot(data = vh_group, aes(x = if (!is.null(reorder_criteria)) {
reorder(.data[[groupby]], .data$sum,
FUN = switch(reorder_criteria,
"max" = max,
"min" = min))
} else {
factor(.data[[groupby]], levels = rev(unique(sort(.data[[groupby]]))))
}, y = .data$sum, fill = .data$phylum)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Sum Criteria",
x = "vh_group (ordered by criteria)",
y = "sum") +
theme_minimal()
# Print the plot
print(sum_plot)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Sample data
vh_group <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25),
phylum = c("Phylum1", "Phylum2", "Phylum3", "Phylum1", "Phylum2", "Phylum3")
)
# Define parameters
groupby <- "vh_group"
reorder_criteria <- "max"  # Can be "max" or "min"
# Generate the plot
sum_plot <- ggplot(data = vh_group, aes(x = if (!is.null(reorder_criteria)) {
reorder(.data[[groupby]], .data$sum,
FUN = switch(reorder_criteria,
"max" = max,
"min" = min))
} else {
factor(.data[[groupby]], levels = rev(unique(sort(.data[[groupby]]))))
}, y = .data$sum, fill = .data$phylum)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Sum Criteria",
x = "vh_group (ordered by criteria)",
y = "sum") +
theme_minimal()
# Print the plot
print(sum_plot)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Sample data
vh_group <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25),
phylum = c("Phylum1", "Phylum2", "Phylum3", "Phylum1", "Phylum2", "Phylum3")
)
# Define parameters
groupby <- "vh_group"
reorder_criteria <- "max"  # Can be "max" or "min"
# Generate the plot
sum_plot <- ggplot(data = vh_group, aes(x = if (!is.null(reorder_criteria)) {
reorder(.data[[groupby]], .data$sum,
FUN = function(x) switch(reorder_criteria,
"max" = max(x),
"min" = min(x)))
} else {
factor(.data[[groupby]], levels = rev(unique(sort(.data[[groupby]]))))
}, y = .data$sum, fill = .data$phylum)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Sum Criteria",
x = "vh_group (ordered by criteria)",
y = "sum") +
theme_minimal()
# Print the plot
print(sum_plot)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Sample data
vh_group <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25),
phylum = c("Phylum1", "Phylum2", "Phylum3", "Phylum1", "Phylum2", "Phylum3")
)
# Define parameters
groupby <- "vh_group"
reorder_criteria <- "min"  # Can be "max" or "min"
# Generate the plot
sum_plot <- ggplot(data = vh_group, aes(x = if (!is.null(reorder_criteria)) {
reorder(.data[[groupby]], .data$sum,
FUN = function(x) switch(reorder_criteria,
"max" = max(x),
"min" = min(x)))
} else {
factor(.data[[groupby]], levels = rev(unique(sort(.data[[groupby]]))))
}, y = .data$sum, fill = .data$phylum)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Sum Criteria",
x = "vh_group (ordered by criteria)",
y = "sum") +
theme_minimal()
# Print the plot
print(sum_plot)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Sample data
vh_group <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25),
phylum = c("Phylum1", "Phylum2", "Phylum3", "Phylum1", "Phylum2", "Phylum3")
)
# Define parameters
groupby <- "vh_group"
reorder_criteria <- "max"  # Can be "max" or "min"
# Generate the plot
sum_plot <- ggplot(data = vh_group, aes(x = if (!is.null(reorder_criteria)) {
reorder(.data[[groupby]], .data$sum,
FUN = function(x) {
if (reorder_criteria == "max") {
max(x)
} else if (reorder_criteria == "min") {
min(x)
} else {
stop("Invalid reorder_criteria. Choose 'max' or 'min'.")
}
})
} else {
factor(.data[[groupby]], levels = rev(unique(sort(.data[[groupby]]))))
}, y = .data$sum, fill = .data$phylum)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Sum Criteria",
x = "vh_group (ordered by criteria)",
y = "sum") +
theme_minimal()
# Print the plot
print(sum_plot)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Sample data
vh_group <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25),
phylum = c("Phylum1", "Phylum2", "Phylum3", "Phylum1", "Phylum2", "Phylum3")
)
# Define parameters
groupby <- "vh_group"
reorder_criteria <- "min"  # Can be "max" or "min"
# Generate the plot
sum_plot <- ggplot(data = vh_group, aes(x = if (!is.null(reorder_criteria)) {
reorder(.data[[groupby]], .data$sum,
FUN = function(x) {
if (reorder_criteria == "max") {
max(x)
} else if (reorder_criteria == "min") {
min(x)
} else {
stop("Invalid reorder_criteria. Choose 'max' or 'min'.")
}
})
} else {
factor(.data[[groupby]], levels = rev(unique(sort(.data[[groupby]]))))
}, y = .data$sum, fill = .data$phylum)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Sum Criteria",
x = "vh_group (ordered by criteria)",
y = "sum") +
theme_minimal()
# Print the plot
print(sum_plot)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Sample data
vh_group <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25),
phylum = c("Phylum1", "Phylum2", "Phylum3", "Phylum1", "Phylum2", "Phylum3")
)
# Define parameters
groupby <- "vh_group"
reorder_criteria <- "max"  # Can be "max" or "min"
# Generate the plot
sum_plot <- ggplot(data = vh_group, aes(x = reorder(.data[[groupby]], if (reorder_criteria == "max") -sum else sum), y = sum, fill = phylum)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Sum Criteria",
x = "vh_group (ordered by criteria)",
y = "sum") +
theme_minimal()
# Print the plot
print(sum_plot)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Sample data
vh_group <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25),
phylum = c("Phylum1", "Phylum2", "Phylum3", "Phylum1", "Phylum2", "Phylum3")
)
# Define parameters
groupby <- "vh_group"
reorder_criteria <- "min"  # Can be "max" or "min"
# Generate the plot
sum_plot <- ggplot(data = vh_group, aes(x = reorder(.data[[groupby]], if (reorder_criteria == "max") -sum else sum), y = sum, fill = phylum)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Sum Criteria",
x = "vh_group (ordered by criteria)",
y = "sum") +
theme_minimal()
# Print the plot
print(sum_plot)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Sample data
vh_group <- tibble::tibble(
vh_group = c("A", "B", "C", "A", "B", "C"),
sum = c(10, 20, 30, 5, 15, 25),
phylum = c("Phylum1", "Phylum2", "Phylum3", "Phylum1", "Phylum2", "Phylum3")
)
# Define parameters
groupby <- "vh_group"
reorder_criteria <- NULL  # Can be "max" or "min"
# Generate the plot
sum_plot <- ggplot(data = vh_group, aes(x = reorder(.data[[groupby]], if (reorder_criteria == "max") -sum else sum), y = sum, fill = phylum)) +
geom_bar(stat = "identity") +
labs(title = "Ordered vh_group by Sum Criteria",
x = "vh_group (ordered by criteria)",
y = "sum") +
theme_minimal()
# Print the plot
print(sum_plot)
library(devtools)
document()
check()
install()
library(Virusparies)
?VhSumHitsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = NULL)
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "max")
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "min")
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "max")
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "test")
libra
library(devtools)
document()
check()
library(Virusparies)
?VhSumHitsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = NULL)
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "max")
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "min")
test <- VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "min")
-test$vh_group$sum
test$vh_group$sum
libra
library(devtools)
document()
check()
install()
library(Virusparies)
?VhSumHitsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = NULL)
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "max")
VhSumHitsBarplot(vh_file,cut = 1e-5,reorder_criteria = "min")
libra
library(devtools)
document()
check()
install()
