) %>%
ungroup()
# Optionally add a row with the total for each column
if (show_total) {
total_row <- summary_table %>%
summarize(
ViralRefSeq_taxonomy = "Total",
!!less_than_label := sum(!!sym(less_than_label), na.rm = TRUE),
!!more_or_equal_label := sum(!!sym(more_or_equal_label), na.rm = TRUE),
total = sum(total, na.rm = TRUE),
mean = NA_real_,
median = NA_real_,
Q1 = NA_real_,
Q3 = NA_real_,
sd = NA_real_,
min = NA_real_,
max = NA_real_
)
# Bind the total row to the summary table
summary_table <- bind_rows(summary_table, total_row)
}
return(summary_table)
}
p <- SummarizeViralIdent(file,80,1e-5,extra_stats = c("median"))
View(p)
SummarizeViralIdent <- function(file,
ident_cutoff = 90,
cut = NULL,
show_total = FALSE,
extra_stats = NULL) {
#is_file_empty(file)
if (is_file_empty(file)) {
#message("Skipping VhgBoxplot generation due to empty data.")
return(invisible(NULL))  # Return invisible(NULL) to stop further execution
}
# Apply the filter if `cut` is not NULL
if (!is.null(cut)) {
file <- file[file$ViralRefSeq_E < cut, ]
message(paste0("after removing rows based on evalue the hittable has ",nrow(file)," rows left."))
#is_file_empty(file)
if (is_file_empty(file)) {
#message("Skipping VhgBoxplot generation due to empty data.")
return(invisible(NULL))  # Return invisible(NULL) to stop further execution
}
}
# Create dynamic variable names
less_than_label <- paste0("less_than_", ident_cutoff)
more_or_equal_label <- paste0("equal_or_more_than_",ident_cutoff)
# Group by ViralRefSeq_taxonomy and summarize the data
summary_table <- file %>%
group_by(ViralRefSeq_taxonomy) %>%
summarize(
!!less_than_label := sum(ViralRefSeq_ident < ident_cutoff, na.rm = TRUE),
!!more_or_equal_label := sum(ViralRefSeq_ident >= ident_cutoff, na.rm = TRUE),
total = n(),
mean = if ("mean" %in% extra_stats) mean(ViralRefSeq_ident, na.rm = TRUE) else NA_real_,
median = if ("median" %in% extra_stats) median(ViralRefSeq_ident, na.rm = TRUE) else NA_real_,
Q1 = if ("Q1" %in% extra_stats) quantile(ViralRefSeq_ident, probs = 0.25, na.rm = TRUE) else NA_real_,
Q3 = if ("Q3" %in% extra_stats) quantile(ViralRefSeq_ident, probs = 0.75, na.rm = TRUE) else NA_real_,
sd = if ("sd" %in% extra_stats) sd(ViralRefSeq_ident, na.rm = TRUE) else NA_real_,
min = if ("min" %in% extra_stats) min(ViralRefSeq_ident, na.rm = TRUE) else NA_real_,
max = if ("max" %in% extra_stats) max(ViralRefSeq_ident, na.rm = TRUE) else NA_real_
) %>%
ungroup()
# Remove columns not in `extra_stats`
if (!is.null(extra_stats)) {
# Select columns based on `extra_stats` and mandatory columns
mandatory_columns <- c(less_than_label, more_or_equal_label, "total")
selected_columns <- c(mandatory_columns, extra_stats)
summary_table <- summary_table %>%
select(ViralRefSeq_taxonomy, all_of(selected_columns))
}
# Optionally add a row with the total for each column
if (show_total) {
total_row <- summary_table %>%
summarize(
ViralRefSeq_taxonomy = "Total",
!!less_than_label := sum(!!sym(less_than_label), na.rm = TRUE),
!!more_or_equal_label := sum(!!sym(more_or_equal_label), na.rm = TRUE),
total = sum(total, na.rm = TRUE),
mean = NA_real_,
median = NA_real_,
Q1 = NA_real_,
Q3 = NA_real_,
sd = NA_real_,
min = NA_real_,
max = NA_real_
)
# Bind the total row to the summary table
summary_table <- bind_rows(summary_table, total_row)
}
return(summary_table)
}
p <- SummarizeViralIdent(file,80,1e-5,extra_stats = c("median"))
View(p)
p <- SummarizeViralIdent(file,80,1e-5)
p <- SummarizeViralIdent(file,80,1e-5)
View(p)
SummarizeViralIdent <- function(file,
ident_cutoff = 90,
cut = NULL,
show_total = FALSE,
extra_stats = NULL) {
#is_file_empty(file)
if (is_file_empty(file)) {
#message("Skipping VhgBoxplot generation due to empty data.")
return(invisible(NULL))  # Return invisible(NULL) to stop further execution
}
# Apply the filter if `cut` is not NULL
if (!is.null(cut)) {
file <- file[file$ViralRefSeq_E < cut, ]
message(paste0("after removing rows based on evalue the hittable has ",nrow(file)," rows left."))
#is_file_empty(file)
if (is_file_empty(file)) {
#message("Skipping VhgBoxplot generation due to empty data.")
return(invisible(NULL))  # Return invisible(NULL) to stop further execution
}
}
# Create dynamic variable names
less_than_label <- paste0("less_than_", ident_cutoff)
more_or_equal_label <- paste0("equal_or_more_than_",ident_cutoff)
# Group by ViralRefSeq_taxonomy and summarize the data
summary_table <- file %>%
group_by(ViralRefSeq_taxonomy) %>%
summarize(
!!less_than_label := sum(ViralRefSeq_ident < ident_cutoff, na.rm = TRUE),
!!more_or_equal_label := sum(ViralRefSeq_ident >= ident_cutoff, na.rm = TRUE),
total = n(),
mean = if ("mean" %in% extra_stats) mean(ViralRefSeq_ident, na.rm = TRUE) else NA_real_,
median = if ("median" %in% extra_stats) median(ViralRefSeq_ident, na.rm = TRUE) else NA_real_,
Q1 = if ("Q1" %in% extra_stats) quantile(ViralRefSeq_ident, probs = 0.25, na.rm = TRUE) else NA_real_,
Q3 = if ("Q3" %in% extra_stats) quantile(ViralRefSeq_ident, probs = 0.75, na.rm = TRUE) else NA_real_,
sd = if ("sd" %in% extra_stats) sd(ViralRefSeq_ident, na.rm = TRUE) else NA_real_,
min = if ("min" %in% extra_stats) min(ViralRefSeq_ident, na.rm = TRUE) else NA_real_,
max = if ("max" %in% extra_stats) max(ViralRefSeq_ident, na.rm = TRUE) else NA_real_
) %>%
ungroup()
# Remove columns not in `extra_stats` if `extra_stats` is not NULL
if (!is.null(extra_stats)) {
# Define the mandatory columns
mandatory_columns <- c(less_than_label, more_or_equal_label, "total")
# Create the list of columns to keep
selected_columns <- c(mandatory_columns, extra_stats)
# Keep only the selected columns
summary_table <- summary_table %>%
select(ViralRefSeq_taxonomy, all_of(selected_columns))
} else {
# If extra_stats is NULL, remove all additional stats columns
summary_table <- summary_table %>%
select(ViralRefSeq_taxonomy, !!sym(less_than_label), !!sym(more_or_equal_label), total)
}
# Optionally add a row with the total for each column
if (show_total) {
total_row <- summary_table %>%
summarize(
ViralRefSeq_taxonomy = "Total",
!!less_than_label := sum(!!sym(less_than_label), na.rm = TRUE),
!!more_or_equal_label := sum(!!sym(more_or_equal_label), na.rm = TRUE),
total = sum(total, na.rm = TRUE),
mean = NA_real_,
median = NA_real_,
Q1 = NA_real_,
Q3 = NA_real_,
sd = NA_real_,
min = NA_real_,
max = NA_real_
)
# Bind the total row to the summary table
summary_table <- bind_rows(summary_table, total_row)
}
return(summary_table)
}
p <- SummarizeViralIdent(file,80,1e-5)
View(p)
p <- SummarizeViralIdent(file,80,1e-5,extra_stats = c("median"))
View(p)
?VgConLenViolin
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)+
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
names(vg_file)
#' @title SummarizeViralStats: Generate summary stats outside of plot functions
#'
#' @description
#' Summarizes data by grouping it according to a specified metric (contig length, E-value or Identity).
#' SummarizeViralStats generates a summary table that includes counts of observations based on a specified metric cutoff.
#' It computes relevant summary statistics depending on the selected metric, with options to filter rows
#' based on a cutoff value.
#'
#'
#' @param file VirusHunterGatherer hittable.
#'
#' @param groupby (optional): A character specifying the column containing the groups (default: "best_query").
#' Note: Gatherer hittables do not have a "best_query" column. Please provide an appropriate column for grouping.
#'
#' @param metric A character string specifying the name of the metric column to be used for calculations.
#'   This column must be present in \code{file}. Supported metric columns include:
#'   \itemize{
#'     \item "contig_len"
#'     \item "ViralRefSeq_E"
#'     \item "ViralRefSeq_ident"
#'   }
#
#'
#' @param metric_cutoff A numeric value used to classify the metric into two categories: below cutoff and above or equal to cutoff.
#'
#' @param filter_cutoff A numeric value for optional filtering of the data based on E-value. Rows where the specified filtering column has a value
#'   less than this cutoff are retained. If \code{NULL}, no filtering is applied. Default is \code{NULL}.
#'
#' @param show_total A logical value indicating whether to include a row with the total sums for each column in the summary table.
#'   Default is \code{FALSE}.
#'
#' @param extra_stats A character vector specifying additional summary statistics to include in the output. Options include:
#'   \itemize{
#'     \item \code{"mean"}
#'     \item \code{"median"}
#'     \item \code{"Q1"}
#'     \item \code{"Q3"}
#'     \item \code{"sd"}
#'     \item \code{"min"}
#'     \item \code{"max"}
#'   }
#'   If \code{NULL} (the default), only the basic counts are included.
#'
#' @return A data frame summarizing the viral stats. The output includes:
#'   \itemize{
#'     \item The count of observations below and above or equal to the \code{metric_cutoff}.
#'     \item Optional additional summary statistics as specified by \code{extra_stats}.
#'     \item An optional total row if \code{show_total} is \code{TRUE}.
#'   }
#'
#' @examples
#' # Example usage:
#' # vhData <- read.csv("path_to_vh_file.csv")
#' # result <- SummarizeViralStats(vhData,
#' #                                groupby = "best_query",
#' #                                metric = "ViralRefSeq_ident",
#' #                                metric_cutoff = 80,
#' #                                filter_cutoff = 1e-5,
#' #                                show_total = TRUE,
#' #                                extra_stats = c("median", "mean"))
#' # print(result)
#'
#' @export
SummarizeViralStats <- function(file,
groupby = "best_query",
metric,
metric_cutoff,
filter_cutoff = NULL,
show_total = FALSE,
extra_stats = NULL) {
#is_file_empty(file)
if (is_file_empty(file)) {
#message("Skipping VhgBoxplot generation due to empty data.")
return(invisible(NULL))  # Return invisible(NULL) to stop further exefilter_cutoffion
}
if (!(groupby %in% c("best_query", "ViralRefSeq_taxonomy"))) {
stop('Invalid value for groupby. Please use either "best_query" or "ViralRefSeq_taxonomy".')
}
required_columns <- c("ViralRefSeq_E",groupby,"ViralRefSeq_ident")
if (metric == "contig_len") {
required_columns <- c(required_columns, "contig_len")
}
check_columns(file,required_columns)
# Apply the filter if `filter_cutoff` is not NULL
if (!is.null(filter_cutoff)) {
file <- file[file$ViralRefSeq_E < filter_cutoff, ]
message(paste0("after removing rows based on evalue the hittable has ",nrow(file)," rows left."))
#is_file_empty(file)
if (is_file_empty(file)) {
#message("Skipping VhgBoxplot generation due to empty data.")
return(invisible(NULL))  # Return invisible(NULL) to stop further exefilter_cutoffion
}
}
# Create dynamic variable names
less_than_label <- paste0("less_than_", metric_cutoff)
more_or_equal_label <- paste0("equal_or_more_than_",metric_cutoff)
# Group by .data[[groupby]] and summarize the data
summary_table <- file %>%
group_by(.data[[groupby]]) %>%
summarize(
!!less_than_label := sum(.data[[metric]] < metric_cutoffoff, na.rm = TRUE),
!!more_or_equal_label := sum(.data[[metric]] >= metric_cutoffoff, na.rm = TRUE),
total = n(),
mean = if ("mean" %in% extra_stats) mean(.data[[metric]], na.rm = TRUE) else NA_real_,
median = if ("median" %in% extra_stats) median(.data[[metric]], na.rm = TRUE) else NA_real_,
Q1 = if ("Q1" %in% extra_stats) quantile(.data[[metric]], probs = 0.25, na.rm = TRUE) else NA_real_,
Q3 = if ("Q3" %in% extra_stats) quantile(.data[[metric]], probs = 0.75, na.rm = TRUE) else NA_real_,
sd = if ("sd" %in% extra_stats) sd(.data[[metric]], na.rm = TRUE) else NA_real_,
min = if ("min" %in% extra_stats) min(.data[[metric]], na.rm = TRUE) else NA_real_,
max = if ("max" %in% extra_stats) max(.data[[metric]], na.rm = TRUE) else NA_real_
) %>%
ungroup()
# Remove columns not in `extra_stats` if `extra_stats` is not NULL
if (!is.null(extra_stats)) {
# Define the mandatory columns
mandatory_columns <- c(less_than_label, more_or_equal_label, "total")
# Create the list of columns to keep
selected_columns <- c(mandatory_columns, extra_stats)
# Keep only the selected columns
summary_table <- summary_table %>%
select(.data[[groupby]], all_of(selected_columns))
} else {
# If extra_stats is NULL, remove all additional stats columns
summary_table <- summary_table %>%
select(.data[[groupby]], !!sym(less_than_label), !!sym(more_or_equal_label), total)
}
# Optionally add a row with the total for each column
if (show_total) {
total_row <- summary_table %>%
summarize(
.data[[groupby]] = "Total",
p <- SummarizeViralIdent(file,80,1e-5,extra_stats = c("median"),show_total = TRUE)
View(p)
p <- SummarizeViralIdent(file,80,1e-5,extra_stats = c("median"),show_total = FALSE)
library(devtools)
document()
document()
check()
document()
check()
document()
check()
check()
load_all()
?SummarizeViralIdent(file,)
?SummarizeViralStats
p <- SummarizeViralStats(file=file,groupby = "best_query",metric = "ViralRefSeq_ident",metric_cutoff = 90,show_total = TRUE,filter_cutoff = 1e-5,extra_stats = c("median","Q1","Q3"))
load_all()
p <- SummarizeViralStats(file=file,groupby = "best_query",metric = "ViralRefSeq_ident",metric_cutoff = 90,show_total = TRUE,filter_cutoff = 1e-5,extra_stats = c("median","Q1","Q3"))
load_all()
p <- SummarizeViralStats(file=file,groupby = "best_query",metric = "ViralRefSeq_ident",metric_cutoff = 90,show_total = TRUE,filter_cutoff = 1e-5,extra_stats = c("median","Q1","Q3"))
View(p)
?VgConLenViolin
?VhgBoxplot
# plot 2 for identity
plot2 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident")
plot2
document()
check()
load_all()
p <- SummarizeViralStats(file=file,groupby = "best_query",metric = "ViralRefSeq_ident",metric_cutoff = 90,show_total = TRUE,filter_cutoff = 1e-5,extra_stats = c("median","Q1","Q3"))
load_all()
p <- SummarizeViralStats(file=file,groupby = "best_query",metric = "ViralRefSeq_ident",metric_cutoff = 90,show_total = TRUE,filter_cutoff = 1e-5,extra_stats = c("median","Q1","Q3"))
rlang::last_trace()
load_all()
p <- SummarizeViralStats(file=file,groupby = "best_query",metric = "ViralRefSeq_ident",metric_cutoff = 90,show_total = TRUE,filter_cutoff = 1e-5,extra_stats = c("median","Q1","Q3"))
load_all()
p <- SummarizeViralStats(file=file,groupby = "best_query",metric = "ViralRefSeq_ident",metric_cutoff = 90,show_total = TRUE,filter_cutoff = 1e-5,extra_stats = c("median","Q1","Q3"))
load_all()
p <- SummarizeViralStats(file=file,groupby = "best_query",metric = "ViralRefSeq_ident",metric_cutoff = 90,show_total = TRUE,filter_cutoff = 1e-5,extra_stats = c("median","Q1","Q3"))
View(p)
p <- SummarizeViralStats(file=file,groupby = "best_query",metric = "ViralRefSeq_ident",metric_cutoff = 90,show_total = TRUE,filter_cutoff = 1e-5,extra_stats = c("median","Q1"))
View(p)
document()
check()
load_all()
?SummarizeViralStats
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
stats <- SummarizeViralStats(file=file,
groupby = "best_query",
metric = "ViralRefSeq_ident",
metric_cutoff = 90,
show_total = TRUE,
filter_cutoff = 1e-5,
extra_stats = c("median","Q1","Q3"))
print(stats)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
stats <- SummarizeViralStats(file=file,
groupby = "best_query",
metric = "ViralRefSeq_ident",
metric_cutoff = 90,
show_total = TRUE,
filter_cutoff = 1e-5,
extra_stats = c("median","Q1","Q3","median","sd"))
print(stats)
document()
check()
?VhgIdenFacetedScatterPlot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# vgplot: virusgatherer plot with ViralRefSeq_taxonomy as custom grouping
vgplot <- VhgIdenFacetedScatterPlot(vg_file,groupby = "ViralRefSeq_taxonomy")
vgplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# vgplot: virusgatherer plot with ViralRefSeq_taxonomy as custom grouping
vgplot <- VhgIdenFacetedScatterPlot(vg_file,groupby = "ViralRefSeq_taxonomy",subtitle = "test")
vgplot
?VhgRunsBarplot
# import data
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(file,cut = 1e-5)
plot
# import data
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(file,cut = 1e-5,subtitle = NULL)
load_all()
# import data
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(file,cut = 1e-5,subtitle = NULL)
plot
?VhgBoxplot
# plot 1 for e-values
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E",subtitle = NULL)
# plot 1 for e-values
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E",title = NULL)
load_all()
# plot 1 for e-values
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E",title = NULL)
plot1
# plot 1 for e-values
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E",subtitle = NULL)
plot1
?VhSumHitsBarplot
# plot 1: plot boxplot for "identity"
plot <- VhSumHitsBarplot(vh_file,cut = 1e-5)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhSumHitsBarplot(vh_file,cut = 1e-5)
plot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhSumHitsBarplot(vh_file,cut = 1e-5,title = NULL)
plot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhSumHitsBarplot(vh_file,cut = 1e-5,subtitle = NULL)
load_all()
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhSumHitsBarplot(vh_file,cut = 1e-5,subtitle = NULL)
plot
all_names <- names(file)
if (!("SRA_run" %in% all_names) && !("run_id" %in% all_names)) {
stop("Neither 'SRA_run' nor 'run_id' found in file. Available column names: ", paste(all_names, collapse = ", "))
}
n_distinct(coalesce(file$SRA_run, file$run_id))
c("SRA_run", "run_id")[c("SRA_run", "run_id") %in% names(file)]
available_columns <- c("SRA_run", "run_id")[c("SRA_run", "run_id") %in% names(file)]
available_columns
available_columns[1]]
available_columns[1]
available_columns[[1]]
load_all()
?VhgRunsBarplot
# import data
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(file,cut = 1e-5)
plot
load_all()
# import data
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(file,cut = 1e-5)
plot
load_all()
# import data
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(file,cut = 1e-5)
plot
document()
check()
# import data
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(file,cut = 1e-5)
plot
is.data.frame(file)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for e-values
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
is.data.frame(plot1$rows_belowthres)
colnames(plot1$rows_belowthres)
nrow(file)
document()
check()
document()
check()
load_all()
?CombineHittables
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
file2 <- ImportVirusTable(path)  # both files have 180 observations
combined_file <- CombineHittables(file,file2)
print(nrow(combined_file))
View(combined_file)
?`Virusparies-package`
