face = subtitle_face,
color= subtitle_colour
))
if (flip_coords) {
run_bar <- run_bar + coord_flip()
}
return(list(plot=run_bar,
sample_run=sample_run))
}
# Define custom fill colors
custom_colors <- c("red", "blue", "green", "yellow")
# Call the function with custom_fill_color argument
plot_result <- vhRunsBarplot(vh_file = vh_file)
# Now plot_result$plot will contain the ggplot object using custom colors
plot_result$plot
# Define custom fill colors
custom_colors <- c("red", "blue", "green", "yellow")
# Call the function with custom_fill_color argument
plot_result <- vhRunsBarplot(vh_file = vh_file,show_legend = FALSE)
# Now plot_result$plot will contain the ggplot object using custom colors
plot_result$plot
#' vhRunsBarplot: Generate a bar plot showing the number of datasets with unique runs found for
#' each Virus group.
#'
#' @param vh_file Dataframe containing Virushunter hittables results.
#' @param cut (optional) The significance cutoff value for E-values (default: 1e-5).
#' Removes rows in vh_file with values larger than cutoff value in ViralRefSeq_E column.
#' @param theme_choice (optional) A character indicating the ggplot2 theme to apply.
#' Options include "minimal", "classic", "light", "dark", "void", "grey" (or "gray"), "bw", "linedraw", and "test". Default is "minimal".
#' @param flip_coords (optional) Logical indicating whether to flip the coordinates of the plot. Default is TRUE.
#' @param title (optional) A character specifying the title of the plot. Default is "Number of datasets with hits found for each Virus group".
#' @param title_size (optional) The size of the plot title. Default is 16.
#' @param title_face (optional) The font face of the plot title. Default is "bold".
#' @param title_colour (optional) The color of the plot title. Default is "#2a475e".
#' @param subtitle (optional) A character specifying the subtitle of the plot.
#' Default is "default", which calculates the total number of datasets with hits and returns it as
#' "total number of datasets with hits: " followed by the calculated number. an empty string ("") removes the subtitle.
#' @param subtitle_size (optional) The size of the plot subtitle. Default is 12.
#' @param subtitle_face (optional) The font face of the plot subtitle. Default is "bold".
#' @param subtitle_colour (optional) The color of the plot subtitle. Default is "#1b2838".
#' @param xlabel (optional) A character specifying the label for the x-axis. Default is "Virus family found in query".
#' @param ylabel (optional) A character specifying the label for the y-axis. Default is "Number of datasets with hits".
#' @param axis_title_size (optional) The size of axis titles. Default is 12.
#' @param xtext_size (optional) The size of x-axis text labels. Default is 10.
#' @param ytext_size (optional) The size of y-axis text labels. Default is 10.
#' @param legend_title (optional) A character specifying the title of the legend. Default is "virus family".
#' @param legend_position (optional) The position of the legend. Default is "bottom".
#' @param legend_title_size (optional) The size of the legend title. Default is 12.
#' @param legend_title_face (optional) The font face of the legend title. Default is "bold".
#' @param legend_text_size (optional) The size of the legend text. Default is 10.
#' @param plot_text_size (optional) The size of the text labels added to the plot. Default is 3.5.
#' @param plot_text_position_dodge (optional) The degree of dodging for positioning text labels. Default is 0.9.
#' @param plot_text_hjust (optional) The horizontal justification of text labels. Default is -0.1.
#' @param plot_text_vjust (optional) The vertical justification of text labels. Default is 0.5.
#' It is recommended to change `vjust` when setting `flip_coords = FALSE`.
#' @param plot_text_colour (optional) The color of the text labels added to the plot. Default is "black".
#'
#' @return A list containing the bar plot and optionally the generated table and processed data
#'
#' @examples
#' path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
#' vh_file <- importVirusTable(path)
#'
#' # plot 1: plot boxplot for "identity"
#' plot <- vhRunsBarplot(vh_file,cut = 1e-5)
#' plot
#'
#' # return sample_run inside plot object
#' print(plot$sample_run)
#'
#' # Plot 2: Customized plot with modified settings
#' plot_custom <- vhRunsBarplot(
#'   vh_file,
#'   cut = 1e-6, # Lower cutoff value
#'   theme_choice = "grey", # Classic theme
#'   title = "Customized Bar Plot", # Custom title
#'   subtitle = "test_subtitle", # No subtitle
#'   xlabel = "Custom X Label", # Custom x-axis label
#'   ylabel = "Custom Y Label", # Custom y-axis label
#'   legend_position = "top", # Legend position on top
#'   plot_text_size = 5, # Larger text label size
#'   plot_text_colour = "red" # Red text labels
#' )
#' plot_custom
#'
#' @import ggplot2
#' @importFrom rlang .data
#' @export
vhRunsBarplot <- function(vh_file,cut = 1e-5,
theme_choice = "minimal",
flip_coords = TRUE,
title = "Number of datasets with hits found for each Virus group",
title_size = 16,
title_face = "bold",
title_colour = "#2a475e",
subtitle = "default",
subtitle_size = 12,
subtitle_face = "bold",
subtitle_colour = "#1b2838",
xlabel = "Virus family found in query",
ylabel = "Number of datesets with hits",
axis_title_size = 12,
xtext_size = 10,
ytext_size = 10,
legend_title = "virus family",
legend_position = "bottom",
legend_title_size = 12,
legend_title_face = "bold",
legend_text_size = 10,
plot_text_size = 3.5,
plot_text_position_dodge = 0.9,
plot_text_hjust = -0.1,
plot_text_vjust = 0.5,
plot_text_colour = "black"
){
# check if hittable is empty
is_file_empty(vh_file)
# Filter obj
vh_file <- vh_file[vh_file$ViralRefSeq_E < cut,]
message(paste0("after removing rows based on evalue the hittable has ",nrow(vh_file)," rows left."))
#check if obj has 0 ob after filtering
is_file_empty(vh_file)
# Apply the selected theme
theme_selected <- select_theme(theme_choice)
# preprocess data for plot
sample_run <- preprocess_runs_bar(vh_file)
# Set the subtitle based on the input
if (subtitle == "default") {
subtitle_text <- paste0("total number of datasets with hits: ", sum(sample_run$unique_SRA_run))
} else {
subtitle_text <- ifelse(is.null(subtitle) || subtitle == "", NULL, subtitle)
}
#####################
### Generate Plot ###
### #################
run_bar <- ggplot(data = sample_run,aes(x=reorder(.data$best_query,.data$unique_SRA_run,FUN=max),y=.data$unique_SRA_run,fill= .data$best_query))+
geom_bar(stat = "identity")+
labs(title = title,
x= xlabel,
y= ylabel,
subtitle = subtitle_text)+
theme_selected+
theme(legend.position = legend_position,
axis.text.y = element_text(size = ytext_size),
axis.text.x = element_text(size = xtext_size),
axis.title = element_text(size = axis_title_size ),
legend.text = element_text(size = legend_text_size),
legend.key.size = unit(1.5, "lines"),
legend.title = element_text(size = legend_title_size, face = legend_title_face))+
guides(fill=guide_legend(title=legend_title))+
geom_text(aes(label = .data$res),
hjust = plot_text_hjust,
vjust= plot_text_vjust,
color = plot_text_colour,
position = position_dodge(plot_text_position_dodge),
size = plot_text_size)+
scale_y_continuous(expand = c(0, 0), limits = c(0, max(sample_run$unique_SRA_run)+max(sample_run$unique_SRA_run)/10))+
theme(
# This is the new default font in the plot
plot.title = element_text(
size = title_size,
face = title_face,
color = title_colour),
# Statistical annotations below the main title
plot.subtitle = element_text(
size = subtitle_size,
face = subtitle_face,
color= subtitle_colour
))
if (flip_coords) {
run_bar <- run_bar + coord_flip()
}
#plot(run_bar)
return(list(plot=run_bar,
sample_run=sample_run))
}
# Define custom fill colors
custom_colors <- c("red", "blue", "green", "yellow")
# Call the function with custom_fill_color argument
plot_result <- vhRunsBarplot(vh_file = vh_file,legend_position = "none")
# Now plot_result$plot will contain the ggplot object using custom colors
plot_result$plot
# Define custom fill colors
custom_colors <- c("red", "blue", "green", "yellow")
# Call the function with custom_fill_color argument
plot_result <- vhRunsBarplot(vh_file = vh_file)
# Now plot_result$plot will contain the ggplot object using custom colors
plot_result$plot
# Define custom fill colors
custom_colors <- c("red", "blue", "green", "yellow")
# Call the function with custom_fill_color argument
plot_result <- vhRunsBarplot(vh_file = vh_file,legend_position = "none")
# Now plot_result$plot will contain the ggplot object using custom colors
plot_result$plot
install.packages("colorBlindness")
library(colorBlindness)
?colorBlindness
?colorBlindness
replacePlotColor(plot_result$plot)
plot(replacePlotColor(plot_result$plot))
cvdPlot(
plot = lplot_result$plot,
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
cvdPlot(
plot = plot_result$plot,
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
cvdPlot(
plot = plot_result$plot,
layout = c( "deuteranope", "protanope", "desaturate")
)
plot <- cvdPlot(
plot = plot_result$plot,
layout = c( "desaturate")
)
plot
plot <- cvdPlot(
plot = plot_result$plot,
layout = c( "protanope")
)
plot
# Define custom fill colors
custom_colors <- c("red", "blue", "green", "yellow")
# Call the function with custom_fill_color argument
plot_result <- vhRunsBarplot(vh_file = vh_file)
# Now plot_result$plot will contain the ggplot object using custom colors
plot <- cvdPlot(
plot = plot_result$plot,
layout = c( "protanope")
)
plot
plot <- cvdPlot(
+     plot = plot_result$plot,
plot <- cvdPlot(
+     plot = plot_result$plot,
plot <- cvdPlot(plot = plot_result$plot,layout = "protanope")
plot
library(devtools)
document()
rm(list=ls())
document()
check()
use_package("colorBlindness",type = "Imports")
document()
check()
document()
check()
install()
library(devtools)
library(Virusparies)
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vhRunsBarplot(vh_file,cut = 1e-5,colorblind = "deuteranope")
document()
check()
install()
library(Virusparies)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vhRunsBarplot(vh_file,cut = 1e-5,colorblind = "deuteranope")
vhRunsBarplot(vh_file,cut = 1e-5,colorblind = "protanope")
vhRunsBarplot(vh_file,cut = 1e-5,colorblind = "desaturate")
vhRunsBarplot(vh_file,cut = 1e-5,colorblind = "enhanced")
vhRunsBarplot(vh_file,cut = 1e-5,colorblind = "enhanced.deuteranope")
vhRunsBarplot(vh_file,cut = 1e-5,colorblind = "enhanced.protanope")
?cvdPlot
test <- vhRunsBarplot(vh_file,cut = 1e-5,colorblind = "enhanced.protanope")
test$plot
test$plot + theme(plot.background = element_blank(),
panel.background = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
library(ggplot2)
test$plot + theme(plot.background = element_blank(),
panel.background = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
test$plot <- test$plot + theme(plot.background = element_blank(),
panel.background = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
test$plot
plot(test$plot)
test <- vhRunsBarplot(vh_file,cut = 1e-5,colorblind = "enhanced.protanope")
test$plot + labs(title = NULL)
test$plot + labs(title = NULL)
test$plot$layout$panel_params
test$plot$layout
test$plot$layout$coord_params
test$plot$layers
grep(test$plot,"enchanced prot")
grep(test$plot$layers,"enchanced prot")
test$plot$labels
test$plot$guides
test$plot$layout
test$plot$labels
test$plot$
test$plot$guides
test$plot$layers
View(test$plot$layers)
# Assuming test$plot is a ggplot object
# Loop through each layer in test$plot$layers
for (i in seq_along(test$plot$layers)) {
layer <- test$plot$layers[[i]]
# Check if the layer contains the "enhanced prot" label
if ("enhanced prot" %in% layer$label) {
print(paste("Layer index:", i))
print(layer)  # Print the layer details for further inspection
}
}
View(layer)
# Assuming test$plot is a ggplot object
# Loop through each layer in test$plot$layers
for (i in seq_along(test$plot$layers)) {
layer <- test$plot$layers[[i]]
# Check if the layer contains the "enhanced prot" label
if ("enhanced prot" %in% layer) {
print(paste("Layer index:", i))
print(layer)  # Print the layer details for further inspection
}
}
# Assuming test$plot is a ggplot object
# Loop through each layer in test$plot$layers
for (i in seq_along(test$plot$layers)) {
layer <- test$plot$layers[[i]]
# Check if the layer contains the "enhanced prot" label
if ("enhanced prot" %in% layer$layer_data) {
print(paste("Layer index:", i))
print(layer)  # Print the layer details for further inspection
}
}
test$plot$layers
test$plot+labs(caption = NULL)
test$plot
test$plot+labs(caption = NULL)
test$plot+labs(tag = NULL)
test$plot$labels
test$plot$labels$label
test$plot$plot_env
test$plot$facet
cvdPlot <- function(plot = last_plot(), layout = c("origin", "deuteranope",
"protanope", "desaturate")) {
choices <- c(origin = "none", deuteranope = "deuteranope",
protanope = "protanope", desaturate = "desaturate",
enhanced = "safe", enhanced.deuteranope = "enhanced.deuteranope",
enhanced.protanope = "enhanced.protanope", enhanced.desaturate = "enhanced.desaturate")
labels <- c(none = "normal vision", deuteranope = "deuteranopia (6%)",
protanope = "protanopia (2%)", desaturate = "desaturated (BW)",
safe = "enhanced vision", enhanced.deuteranope = "enhanced deut",
enhanced.protanope = "enhanced prot", enhanced.desaturate = "enhanced desat")
layout <- match.arg(layout, choices = names(choices), several.ok = TRUE)
layout <- choices[layout]
expr <- substitute(plot)
chk <- function() {
res <- !inherits(plot, c("gg", "grob", "gList"))
return(res)
}
if (chk()) {
pin <- par("pin")
tmpfile <- tempfile()
sink(tmpfile, type = "output")
plot <- tryCatch(grid.grabExpr(show(plot), warn = 0,
wrap = TRUE, width = pin[1], height = pin[2]), error = function(e) {
message("Cannot handle this plot. Error message:",
e)
})
if (is.null(plot)) {
if (is.call(expr)) {
plot <- tryCatch(grid.grabExpr(grid.echo(function() eval(expr)),
warn = 0, wrap = TRUE, width = pin[1], height = pin[2]),
error = function(e) {
message("Cannot handle this plot. Error message:",
e)
})
}
}
sink()
unlink(tmpfile)
if (is.null(plot)) {
stop("Cannnot handle this plot")
}
}
if (is(plot, "gList")) {
u <- unit(1, "null")
plot <- gtable_col(NULL, list(gTree(children = plot)),
u, u)
plot$layout$clip <- "inherit"
}
if (!is(plot, "grob"))
plot <- plot_to_gtable(plot)
layout1 <- layout[!grepl("^enhanced", layout)]
layout2 <- layout[grepl("^enhanced", layout)]
if (length(layout1) > 0) {
dat <- lapply(layout1, replaceColors, grob = plot)
}
else {
dat <- list()
}
if (length(layout2) > 0) {
grob <- replaceColors(plot, "safe")
types <- sub("enhanced.", "", layout2)
dat2 <- lapply(types, replaceColors, grob = grob)
names(dat2) <- layout2
dat <- c(dat, dat2)
}
dat$scale <- 0.9
dat$labels <- labels[layout]
# Remove the next line that calls plot_grid
# do.call(plot_grid, dat)
}
cvdPlot(vhRunsBarplot(vh_file,cut = 1e-5))
test$plot$facet
test$plot$guides
test$plot$layers
test$plot$labels <- NULL
test$plot
test$plot$layers
test$plot$layout$setup
test$plot$layout$coord
test$plot$layout$facet
test$plot$layout$layout
test$plot$layout
rm(list = ls())
library(devtools)
document()
check()
use_package("methods",type = "Imports")
document()
use_package("gtable")
document()
check()
install.packages("cblindplot")
install.packages("colorblind")
install.packages("ggthemes")
?colorblind_pal(
?colorblind_pal()
?colorblind_support
?colorblind
?scale_fill_colorblind(...)
p <- ggplot(mtcars) + geom_point(aes(x = wt, y = mpg,
colour = factor(gear))) + facet_wrap(~am)
p + theme_igray()
p <- ggplot(mtcars) + geom_point(aes(x = wt, y = mpg,
colour = factor(gear))) + facet_wrap(~am)
p + theme_igray() + scale_colour_colorblind()
document()
check()
use_package("ggthemes")
document()
check()
install()
library(Virusparies)
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5)
plot
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5,colorblind = TRUE)
plot
library(devtools)
install()
?vhRunsBarplot
library(Virusparies)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5)
plot
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5,colorblind = TRUE)
plot
?cvdplot
library(devtools)
document()
check()
use_package("colorBlindness")
document()
check()
document()
check()
install()
library(Virusparies)
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5,colorblind = "enhanced.desaturate")
plot
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5)
plot
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-6)
plot
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-10)
plot
View(vh_file)
plot <- vhRunsBarplot(vh_file,cut = 1e-13)
plot
plot <- vhRunsBarplot(vh_file,cut = 1e-13,colorblind = "enhanced")
plot
