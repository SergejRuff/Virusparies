Order = "virales",
Suborder = "virineae",
Family = "viridae",
Subfamily = "virinae",
Genus = "virus"
)
valid_ranks <- names(taxa_list)
if (!(taxa_rank %in% valid_ranks)) {
stop("Error: Invalid taxa rank provided. Please provide one of: Subphylum, Class, Subclass, Order, Suborder, Family, Subfamily, Genus")
}
return(taxa_list[[taxa_rank]])
}
taxa_rank <- taxonomy_rank_hierarchy("Family")
str_extract(file$ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
library(stringr)
str_extract(file$ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
taxa_rank <- taxonomy_rank_hierarchy("Subgenus")
taxa_rank <- taxonomy_rank_hierarchy("Genus")
str_extract(file$ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
document()
check()
document()
document()
document()
document()
check()
document()
document()
check()
taxa_list <- list(
"viricotina",
"viricetes",
"viricetidae",
"virales",
"virineae",
"viridae",
"virinae",
"virus"
)
# Define the names for each element
taxa_names <- c(
"Subphylum",
"Class",
"Subclass",
"Order",
"Suborder",
"Family",
"Subfamily",
"Genus"
)
# Assign names to the list elements using setNames()
taxa_list <- setNames(taxa_list, taxa_names)
# Print the resulting list with names assigned
taxa_list
document()
check()
library(tidyverse)
?pivot_longer
?str_split
?unnest
document()
check()
use_package("tidyr")
document()
check()
?str_extract
document()
check()
load_all()
?VhgPreprocessTaxa
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
vh_file_filtered <- VhgPreprocessTaxa(vh_file,"Family")
print("ViralRefSeq_taxonomy before processing:\n")
print(head(vh_file$ViralRefSeq_taxonomy,5))
print("ViralRefSeq_taxonomy after processing:\n")
print(head(vh_file_filtered$ViralRefSeq_taxonomy,5))
table(vh_file_filtered$ViralRefSeq_taxonomy)
?VhgRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(file,cut = 1e-5)
plot
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
# plot 2 for identity
plot2 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident")
plot2
?VhSumHitsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhSumHitsBarplot(vh_file,cut = 1e-5)
plot
install()
table(vh_file_filtered$ViralRefSeq_taxonomy)
?VhgBoxplot
library(Virusparies)
?VhgBoxplot
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
?VhgPreprocessTaxa
vg_file_filtered <- VhgPreprocessTaxa(vg_file,"Family")
View(vg_file_filtered)
table(vg_file_filtered$ViralRefSeq_taxonomy)
document()
check()
document()
check()
document()
check()
load_all()
vg_file_filtered <- VhgPreprocessTaxa(vg_file,"Family")
table(vg_file_filtered$ViralRefSeq_taxonomy)
install()
document()
check()
document()
check()
document()
check()
load_all()
document()
document()
document()
check()
?str_detect
?str_remove_all
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
load_all()
?VhgPreprocessTaxa
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
vh_file_filtered <- VhgPreprocessTaxa(vh_file,"Family")
print("ViralRefSeq_taxonomy before processing:\n")
print(head(vh_file$ViralRefSeq_taxonomy,5))
print("ViralRefSeq_taxonomy after processing:\n")
print(head(vh_file_filtered$ViralRefSeq_taxonomy,5))
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
# plot 2 for identity
plot2 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident")
plot2
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# plot 4: Virusgatherer plot for ViralRefSeq_taxonomy agains contig length
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
plot5
install()
document()
check()
load_all()
?VhgPreprocessTaxa
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
vh_file_filtered <- VhgPreprocessTaxa(vh_file,"Family")
print("ViralRefSeq_taxonomy before processing:\n")
print(head(vh_file$ViralRefSeq_taxonomy,5))
print("ViralRefSeq_taxonomy after processing:\n")
print(head(vh_file_filtered$ViralRefSeq_taxonomy,5))
install()
document()
check()
install()
document()
check()
install()
document()
document()
check()
document()
document()
check()
min_positive_value = 0.0001
if(min_positive_value<0.00001):print("TRUE")
if(min_positive_value<0.00001)print("TRUE")
if(min_positive_value<0.001)print("TRUE")
min_positive_value
min_positive_value-1e-10
min_positive_value+1e-10
min_positive_value-(1e-10)
min_positive_value-(0.0000000001)
cutoff <- 1e-5
cutoff + 10^-10
cutoff - 10^-10
cutoff
cutoff * 10^-10
document()
check()
install()
install.packages("taxize")
install.packages("taxonomizr")
library(taxonomizr)
?taxonomizr
?getDescendants
getDescendants("Homo_sapiens")
prepareDatabase('accessionTaxa.sql')
install.packages("taxize")
library(taxize)
tax_name("Homo Sapiens", get = 'Order', db = 'ncbi')
tax_name("Homo Sapiens", get = 'Order', db = 'ncbi')$Order
test <- tax_name("Homo Sapiens", get = 'Order', db = 'ncbi')$Order
test
?tax_name("Homo Sapiens", get = 'Order', db = 'ncbi')$Order
?tax_name
tax_name("Homo Sapiens", get = 'Order', db = 'ncbi',messages = FALSE)$Order
suppressMessages(tax_name("Homo Sapiens", get = 'Order', db = 'ncbi',messages = FALSE)$Order)
document()
check()
deparse(substitute(arg1))
deparse_args <- function(...) {
args <- as.list(match.call())[-1]  # Capture the unevaluated arguments
deparsed_args <- lapply(args, function(arg) deparse(arg))
return(deparsed_args)
}
# Example usage:
a <- 10
b <- 20
c <- 30
result <- deparse_args(a, b, c)
print(result)
deparse_args <- function(...) {
args <- as.list(match.call())[-1]  # Capture the unevaluated arguments
deparsed_args <- lapply(args, function(arg) deparse(arg))
return(deparsed_args)
}
# Example usage:
a <- 10
b <- 20
c <- 30
result <- deparse_args(d)
print(result)
test <- test2
mysum2 <- function(dfrm, arg1, arg2){
a1 <- deparse(substitute(arg1)); a2 <-  deparse(substitute(arg2))
sum(dfrm[[a1]]) +sum(dfrm[[a2]]) }
mysum2(dat, blue, red)
dat <- data.frame(blue = rnorm(10), red= rnorm(10))
mysum2 <- function(dfrm, arg1, arg2){
a1 <- deparse(substitute(arg1)); a2 <-  deparse(substitute(arg2))
print(a1);print(a2);sum(dfrm[[a1]]) +sum(dfrm[[a2]]) }
mysum2(dat, blue, red)
blue <- "yellow"
dat <- data.frame(blue = rnorm(10), red= rnorm(10))
mysum2 <- function(dfrm, arg1, arg2){
a1 <- deparse(substitute(arg1)); a2 <-  deparse(substitute(arg2))
print(a1);print(a2);sum(dfrm[[a1]]) +sum(dfrm[[a2]]) }
mysum2(dat, blue, red)
# Define the function to deparse the arguments
deparse_args <- function(...) {
args <- as.list(match.call())[-1]  # Capture the unevaluated arguments
deparsed_args <- lapply(args, function(arg) deparse(arg))
return(deparsed_args)
}
x_column ="best_query"
y_column = "ViralRefSeq_E"
deparse_args(x_column, y_column)
col_names <- deparse_args(x_column, y_column)
sym(col_names[[1]])
library(rlang)
sym(col_names[[1]])
# Define the function to deparse the arguments
deparse_args <- function(...) {
args <- list(...)
deparsed_args <- lapply(args, function(arg) deparse(substitute(arg)))
return(deparsed_args)
}
col_names <- deparse_args(x_column, y_column)
col_names
deparse_args(substitute(x_column), substitute(y_column))
deparse_args <- function(...) {
args <- list(...)
deparsed_args <- lapply(args, function(arg) {
if (is.symbol(arg)) {
deparse(arg)
} else {
arg
}
})
return(deparsed_args)
}
deparse_args(substitute(x_column), substitute(y_column))
col_names <- deparse_args(substitute(x_column), substitute(y_column))
x_column <- col_names[[1]]
x_column
deparse(substitute(x_column))
x_column ="best_query"
deparse(substitute(x_column))
# Function to convert arguments to strings
deparse_args <- function(...) {
args <- list(...)
deparsed_args <- lapply(args, function(arg) {
expr <- substitute(arg)
deparse(expr)
})
return(deparsed_args)
}
deparse_args(x_column, y_column)
col_names[[1]]
View(col_names)
col_names[[1]]
arg1 = x
test <- function(x1){a1 <- deparse(substitute(x1));return(a1)}
test(x_column)
test2 <- function(x){test(x)}
test2(test3)
# Function to convert arguments to strings
deparse_args <- function(...) {
args <- list(...)
deparsed_args <- lapply(args, function(arg) {
expr <- substitute(arg)
if (is.name(expr)) {
return(deparse(expr))
} else {
return(deparse(expr))
}
})
return(deparsed_args)
}
x_column
test2 <- functiuon(x_column,y_column){return(deparse_args(x_column, y_column))}
test2 <- functiuon(x_column,y_column)return(deparse_args(x_column, y_column))
test2 <- functiuon(x_column,y_column){deparse_args(x_column, y_column))}
foo <- functiuon(x_column,y_column){deparse_args(x_column, y_column))}
foo <- functiuon(x_column,y_column){test <- deparse_args(x_column, y_column));return(test)}
foo <- function(x_column,y_column){test <- deparse_args(x_column, y_column));return(test)}
foo <- function(x_column,y_column){test <- deparse_args(x_column, y_column);return(test)}
p <-foo("best_query","Viral");print(p)
p
View(p)
p[[1]]
# Function to convert arguments to strings
deparse_args <- function(...) {
args <- list(...)
deparsed_args <- lapply(args, function(arg) {
expr <- substitute(arg)
deparse(expr)[1]
})
return(deparsed_args)
}
p <-foo("best_query","Viral");print(p)
p <-foo("best_query","Viral");print(p)
p <-foo("best_query",Viral);print(p)
p <-foo(best_query,Viral);print(p)
x_column
enquo(x_column)
enquo(x_column)[1]
enquo(x_column)[2]
as.character(enquo(x_column)[2])
foo <- function(x){as.character(enquo(x_column)[2])}
foo(best_query)
foo(Viral_RefSeq)
foo("best_query")
foo(best_query)
as.character(enquo(x_column)[2])
# Define the function
convert_args_to_strings <- function(...) {
# Capture all arguments using quosures
args <- enquos(...)
# Convert each argument to a character string
args_as_char <- sapply(args, function(arg) {
# Convert the quosure to a character string
as.character(arg)
})
# Print the converted arguments
print(args_as_char)
# Return the character strings
return(args_as_char)
}
converted_args <- convert_args_to_strings(1, "text", 3.14, TRUE, factor(c("a", "b", "c")))
converted_args
as.character(enquo(x_column)[2])
# Function to convert arguments to strings
deparse_args <- function(...) {
args <- list(...)
deparsed_args <- lapply(args, function(arg) {
expr <- as.character(enquo(arg)[2])
})
return(deparsed_args)
}
deparse_args(test,test2,test3)
# Function to convert arguments to strings using quosures
deparse_args <- function(...) {
args <- list(...)
deparsed_args <- lapply(args, function(arg) {
# Capture the argument as a quosure
quo <- enquo(arg)
# Extract the expression and convert it to a string
as.character(deparse(quo_get_expr(quo)))
})
return(deparsed_args)
}
deparse_args(test,test2,test3)
# Example usage
best_query <- "best_query"
ViralRefSeq_E <- "ViralRefSeq_E"
contig_len <- "contig_len"
deparse_args(best_query, ViralRefSeq_E, contig_len)
# Example usage
best_query <- "best_query"
ViralRefSeq_E <- "ViralRefSeq_E"
contig_len <- "contig_len"
p<- deparse_args(best_query, ViralRefSeq_E, contig_len)
p
View(p)
p[[1]]
# Function to convert arguments to strings without extra quotes
deparse_args <- function(...) {
args <- list(...)
deparsed_args <- lapply(args, function(arg) {
# Capture the argument as a quosure
quo <- enquo(arg)
# Extract the expression and convert it to a string
expr <- quo_get_expr(quo)
# Remove extra quotes and return the string
as.character(expr)
})
return(deparsed_args)
}
# Example usage
best_query <- "best_query"
ViralRefSeq_E <- "ViralRefSeq_E"
contig_len <- "contig_len"
deparse_args(best_query, ViralRefSeq_E, contig_len)
# Function to convert arguments to strings without extra quotes
deparse_args <- function(...) {
args <- list(...)
deparsed_args <- lapply(args, function(arg) {
# Capture the argument as a quosure
quo <- enquo(arg)
# Extract the expression and convert it to a string
expr <- quo_get_expr(quo)
# Remove extra quotes and return the string
as.character(expr)
})
return(deparsed_args)
}
# Example usage
best_query <- "best_query"
ViralRefSeq_E <- "ViralRefSeq_E"
contig_len <- "contig_len"
p <- deparse_args(best_query, ViralRefSeq_E, contig_len)
p[1]
p <- deparse_args("best_query", ViralRefSeq_E, contig_len)
p[1]
groupby = "best_query"
deparse_args(groupby)
non_string <- deparse_args(groupby,taxa_rank,theme_choice,subtitle_face,legend_title,legend_position,legend_title_face)
taxa_rank = "Family"
theme_choice = "linedraw"
title_face = "bold"
subtitle_face = "bold"
legend_title = "Group
legend_position = "bottom"
legend_title_face = "bold"
deparse_args(groupby,taxa_rank,theme_choice,subtitle_face,legend_title,legend_position,legend_title_face)
legend_title = "Group"
deparse_args(groupby,taxa_rank,theme_choice,subtitle_face,legend_title,legend_position,legend_title_face)
legend_position = "bottom"
deparse_args(groupby,taxa_rank,theme_choice,subtitle_face,legend_title,legend_position,legend_title_face)
non_string[1]
non_string <- deparse_args(groupby,taxa_rank,theme_choice,subtitle_face,legend_title,legend_position,legend_title_face)
non_string[1]
non_string[[1]]
groupby <- non_string[[1]]
groupby
non_string <- deparse_args(groupby,taxa_rank,theme_choice,subtitle_face,legend_title,legend_position,legend_title_face)
groupby <- non_string[[1]]
taxa_rank <- non_string[[2]]
theme_choice <- non_string[[3]]
subtitle_face <- non_string[[4]]
legend_title <- non_string[[5]]
legend_position <- non_string[[6]]
legend_title_face <- non_string[[7]]
legend_position
groupby = best_query
document()
load_all()
?VhgIdenFacetedScatterPlot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
VhgIdenFacetedScatterPlot(file,cutoff = 1e-5,groupby = best_query)
VhgIdenFacetedScatterPlot(file,cutoff = 1e-5,groupby = ViralRefSeq_E)
VhgIdenFacetedScatterPlot(file,cutoff = 1e-5,groupby = ViralRefSeq_taxonomy)
VhgIdenFacetedScatterPlot(file,cutoff = 1e-5,groupby = ViralRefSeq_taxonomy)
deparse_args(groupby=ViralRefSeq_taxonomy,taxa_rank,theme_choice,subtitle_face,legend_title,legend_position,legend_title_face)
deparse_args(ViralRefSeq_taxonomy,taxa_rank,theme_choice,subtitle_face,legend_title,legend_position,legend_title_face)
groupby = ViralRefSeq_taxonomy
document()
check()
check()
