xtext_size = "numeric",
ytext_size = "numeric",
legend_title = "character",
legend_position = "character",
legend_title_size = "numeric",
legend_title_face = "character",
legend_text_size = "numeric",
plot_text_size = "numeric",
plot_text_position_dodge = "numeric",
plot_text_hjust = "numeric",
plot_text_vjust = "numeric",
plot_text_colour = "character",
colorblind_support = "logical",
colormap = "character"
)
# Define the function with error handling
vhRunsBarplot <- function(vh_file, cut = 1e-5) {
args <- list(
vh_file = "character",
cut = "numeric"
)
for (arg in names(args)) {
if (!is(args[[arg]], get(arg))) {
stop(paste(arg, "must be of type", args[[arg]]))
}
}
# Function body...
cat("Function executed successfully!\n")
}
# Example usage
vhRunsBarplot("example.txt", cut = 0.01)  # Correct arguments
# Define a function to check argument types
checkArgumentTypes <- function(func, arg_types) {
for (arg in names(arg_types)) {
if (!is(get(arg, envir = func), arg_types[[arg]])) {
stop(paste(arg, "must be of type", arg_types[[arg]]))
}
}
}
# Define your function vhRunsBarplot
vhRunsBarplot <- function(vh_file, cut = 1e-5) {
checkArgumentTypes(environment(), list(
vh_file = "character",
cut = "numeric"
))
# Function body...
cat("Function executed successfully!\n")
}
vhRunsBarplot("example.txt", cut = 0.01)
vhRunsBarplot(123, cut = 0.01)  # vh_file must be of type character
vhRunsBarplot("example.txt", cut = "0.01")
# Define a function to check argument types
checkArgumentTypes <- function(func, arg_types) {
for (arg in names(arg_types)) {
if (!is(get(arg, envir = func), arg_types[[arg]])) {
stop(paste("Error in", deparse(substitute(func)), ":",
arg, "must be of type", arg_types[[arg]]))
}
}
}
# Define your function vhRunsBarplot
vhRunsBarplot <- function(vh_file, cut = 1e-5) {
checkArgumentTypes(environment(), list(
vh_file = "character",
cut = "numeric"
))
# Function body...
cat("Function executed successfully!\n")
}
# Example usage
vhRunsBarplot("example.txt", cut = 0.01)  # Correct arguments
# Incorrect arguments (triggering errors)
vhRunsBarplot(123, cut = 0.01)  # vh_file must be of type character
# Define a function to check argument types
checkArgumentTypes <- function(func, arg_types) {
for (arg in names(arg_types)) {
if (!is(get(arg, envir = func), arg_types[[arg]])) {
stop(paste("Error:", arg, "must be of type", arg_types[[arg]]))
}
}
}
# Define your function vhRunsBarplot
vhRunsBarplot <- function(vh_file, cut = 1e-5) {
checkArgumentTypes(environment(), list(
vh_file = "character",
cut = "numeric"
))
# Function body...
cat("Function executed successfully!\n")
}
# Example usage
vhRunsBarplot("example.txt", cut = 0.01)  # Correct arguments
# Incorrect arguments (triggering errors)
vhRunsBarplot(123, cut = 0.01)  # vh_file must be of type character
# Define a function to check argument types
checkArgumentTypes <- function(func, arg_types) {
for (arg in names(arg_types)) {
if (!is(get(arg, envir = func), arg_types[[arg]])) {
stop(paste("Error:", arg, "must be of type", arg_types[[arg]]))
}
}
}
# Define your function vhRunsBarplot
vhRunsBarplot <- function(vh_file, cut = 1e-5) {
checkArgumentTypes(environment(), list(
vh_file = "character",
cut = "numeric"
))
# Function body...
cat("Function executed successfully!\n")
}
# Example usage
vhRunsBarplot("example.txt", cut = 0.01)  # Correct arguments
# Incorrect arguments (triggering errors)
vhRunsBarplot(123, cut = 0.01)  # vh_file must be of type character
# Define a function to check argument types
checkArgumentTypes <- function(func, arg_types, func_name) {
for (arg in names(arg_types)) {
if (!is(get(arg, envir = func), arg_types[[arg]])) {
stop(paste("Error in", func_name, ":",
arg, "must be of type", arg_types[[arg]]))
}
}
}
# Incorrect arguments (triggering errors)
vhRunsBarplot(123, cut = 0.01)  # vh_file must be of type character
# Define your function vhRunsBarplot
vhRunsBarplot <- function(vh_file, cut = 1e-5) {
checkArgumentTypes(environment(), list(
vh_file = "character",
cut = "numeric"
), "vhRunsBarplot")
# Function body...
cat("Function executed successfully!\n")
}
# Example usage
vhRunsBarplot("example.txt", cut = 0.01)  # Correct arguments
# Incorrect arguments (triggering errors)
vhRunsBarplot(123, cut = 0.01)  # vh_file must be of type character
?environment()
# Define a function to check argument types
checkArgumentTypes <- function(func, arg_types) {
func_name <- deparse(substitute(func))
for (arg in names(arg_types)) {
if (!is(get(arg, envir = func), arg_types[[arg]])) {
stop(paste("Error in", func_name, ":",
arg, "must be of type", arg_types[[arg]]))
}
}
}
# Define your function vhRunsBarplot
vhRunsBarplot <- function(vh_file, cut = 1e-5) {
checkArgumentTypes(environment(), list(
vh_file = "character",
cut = "numeric"
))
# Function body...
cat("Function executed successfully!\n")
}
# Example usage
vhRunsBarplot("example.txt", cut = 0.01)  # Correct arguments
# Incorrect arguments (triggering errors)
vhRunsBarplot(123, cut = 0.01)  # vh_file must be of type character
# Define a function to check argument types
checkArgumentTypes <- function(func, arg_types) {
func_name <- as.character(substitute(func))
for (arg in names(arg_types)) {
if (!is(get(arg, envir = func), arg_types[[arg]])) {
stop(paste("Error in", func_name, ":",
arg, "must be of type", arg_types[[arg]]))
}
}
}
# Define your function vhRunsBarplot
vhRunsBarplot <- function(vh_file, cut = 1e-5) {
checkArgumentTypes(vhRunsBarplot, list(
vh_file = "character",
cut = "numeric"
))
# Function body...
cat("Function executed successfully!\n")
}
# Example usage
vhRunsBarplot("example.txt", cut = 0.01)  # Correct arguments
# Define a function to check argument types
checkArgumentTypes <- function(func, arg_types) {
func_name <- as.character(substitute(func))
for (arg in names(arg_types)) {
if (!is(get(arg, envir = func), arg_types[[arg]])) {
stop(paste("Error in", func_name, ":",
arg, "must be of type", arg_types[[arg]]))
}
}
}
# Define your function vhRunsBarplot
vhRunsBarplot <- function(vh_file, cut = 1e-5) {
checkArgumentTypes(enviroment(), list(
vh_file = "character",
cut = "numeric"
))
# Function body...
cat("Function executed successfully!\n")
}
# Example usage
vhRunsBarplot("example.txt", cut = 0.01)  # Correct arguments
foo <- function(x, y, z) {
stopifnot(length(x)==1L , is.numeric(x))
}
foo('a')
foo(c(1,2))
foo <- function(x, y, z) {
stopifnot( is.numeric(x))
}
foo(c(1,2))
foo <- function(x, y, z) {
if (is.list(x)) {
lapply(x, function(element) stopifnot(is.numeric(element)))
} else {
stopifnot(is.numeric(x))
}
}
# Test with a list
my_list <- list(1, 2, 3, "a")
foo(my_list)
foo <- function(x, y, z) {
if (is.list(x)) {
lapply(x, function(element) stopifnot(is.numeric(element)))
} else {
stopifnot(is.numeric(x))
}
}
# Test with a list
my_list <- list(1, 2, 3)
foo(my_list)
foo <- function(x, y, z) {
if (is.list(x)) {
invisible(lapply(x, function(element) stopifnot(is.numeric(element))))
} else {
stopifnot(is.numeric(x))
}
}
my_list <- list(1, 2, 3)
oo(my_list)
my_list <- list(1, 2, 3)
foo(my_list)
my_list <- list(1, 2, 3,"a")
foo(my_list)
say_hello <- function(name) {
stopifnot(paste0(deparse(substitute(name))," must be a character.") = is.character(name))
say_hello(theme_choice)
say_hello <- function(name) {
stopifnot(paste0(deparse(substitute(name))," must be a character.") = is.character(name))
say_hello <- function(name) {
stopifnot(paste0(deparse(substitute(name))," must be a character.") = is.character(name))
say_hello <- function(name) {
stopifnot(paste0(deparse(substitute(name))," must be a character.") == "character")
}
say_hello(theme_choice)
say_hello <- function(name) {
stopifnot(!is.character(name))
message(paste0(deparse(substitute(name))," must be a character."))
}
say_hello(theme_choice)
arg_character <- function(name) {
if (!is.character(name)) {
errorMessage <- paste("Input argument", deparse(substitute(name)), "must be a character")
return(errorMessage)
}
}
result <- is_character(123)     # This will return: "Input argument 123 must be a character"
arg_character(123)
arg_character <- function(name) {
if (!is.character(name)) {
errorMessage <- paste("Input argument", deparse(substitute(name)), "must be a character")
stop(errorMessage)
}
}
arg_character(123)
theme <- 123
arg_character(theme)
arg_numeric_or_integer <- function(name) {
if (!(is.numeric(name) || is.integer(name))) {
errorMessage <- paste("Input argument", deparse(substitute(name)), "must be numeric or integer")
stop(errorMessage)
}
}
arg_numeric_or_integer(3.14)    # This will not stop the program and return NULL
arg_numeric_or_integer(5L)      # This will not stop the program and return NULL
arg_numeric_or_integer("hello")
arg_logical <- function(name) {
if (!is.logical(name)) {
errorMessage <- paste("Input argument", deparse(substitute(name)), "must be logical")
stop(errorMessage)
}
}
arg_logical(TRUE)    # This will not stop the program and return NULL
arg_logical(0)
arg_logical(FALSE)
arg_character(subtitle_colour)
cut = 1e-5
class(cut)
class(NULL)
library(Virusparies)
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vhRunsBarplot(vh_file,cut = NULL)
rm(list=ls())
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vhRunsBarplot(vh_file,cut = NULL)
vhRunsBarplot(vh_file,cut = 1000000)
VhgBoxplot()
?VhgBoxplot()
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",cut=NULL)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",cut=10000)
import gatherer files
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",cut = NULL)
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",cut = NULL)
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",cut = 1000000)
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",legend_title_size = "2")
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",legend_title_size = "hello")
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",legend_title_size = "3")
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",legend_title_size = "200")
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",legend_title_size = "test")
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",plot_text_vjust="heööp" )
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",plot_text_vjust="10" )
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",plot_text_vjust=10 )
VhgBoxplot(vg_file,x_column = "SRA_run",y_column = "contig_len",plot_text_vjust=10 )
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = 3)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom")
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_size = "2")
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_size = "hello")
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",subtitle_colour = "test")
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",subtitle_colour = "2")
library(devtools)
document()
check()
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",legend_title_face = "bold")
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",legend_title_face = 2)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",legend_title_face = 3)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",legend_title_face = 4)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_face = 4)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_face = 3)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_colour = 3)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_colour = 4)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = 3)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = 2)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = 1)
document()
check()
document()
check()
install()
library(Virusparies)
?vhIdentityBoxTable
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vhRunsBarplot(vh_file,cut = 1e-5,legend_position = 3)
vhRunsBarplot(vh_file,cut = 1e-5,theme_choice = 3)
vhRunsBarplot(vh_file,cut = 1e-5,colormap = 3)
vhRunsBarplot(vh_file,cut = 1e-5,flip_coords = 2)
vhRunsBarplot(vh_file,cut = 1e-5,flip_coords = FALSE)
vhRunsBarplot(vh_file,cut = 1e-5,flip_coords = TRUE)
vhRunsBarplot(vh_file,cut = 1e-5,colorblind_support = 3)
vhRunsBarplot(vh_file,cut = 1e-5,colorblind_support = TRUE)
vhRunsBarplot(vh_file,cut = 1e-5,colorblind_support = TRUE,colormap = 3)
vhRunsBarplot(vh_file,cut = 1e-5,colorblind_support = TRUE,colormap = "A")
cut = 1e-5
-log10(cut)
cut = 0.00001
-log10(cut)
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",cut = 0.00001)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",cut = 0.0000000000001)
library(devtools)
document()
document()
check()
install()
library(Virusparies)
?VhgIdenFacetedScatterPlot
library(devtools)
document()
install()
