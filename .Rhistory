install.packages('Seurat')
library(Virusparies)
?VhgIdentityScatterPlot
document()
check()
install()
library(Virusparies)
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# plot 4: Virusgatherer plot for ViralRefSeq_taxonomy agains contig length
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
plot5
names(vh_file)
names(vg_file)
document()
check()
install()
library(Virusparies)
?VhgBoxplot
document()
load_all()
?VhgBoxplot
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident")
VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident",flip_coords = FALSE)
VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident",flip_coords = TRUE)
document()
install()
library(Virusparies)
?VhgBoxplot
document()
install()
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident")
document()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
document()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
# plot 2 for identity
plot2 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident")
plot2
# plot 3 custom arguments used
plot3 <- VhgBoxplot(file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "right")
plot3
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# plot 4: Virusgatherer plot for ViralRefSeq_taxonomy agains contig length
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
plot5
?VhgIdenFacetedScatterPlot
# plot 1
plot <- VhgIdenFacetedScatterPlot(file,cutoff = 1e-5)
plot
# plot 2 with custom data
custom_plot <- VhgIdenFacetedScatterPlot(file,
cutoff = 1e-4,
theme_choice = "dark",
title = "Custom Scatterplot",
title_size = 18,
title_face = "italic",
title_colour = "orange",
xlabel = "Custom X Label",
ylabel = "Custom Y Label",
axis_title_size = 14,
legend_position = "right",
true_colour = "green",
false_colour = "purple")
custom_plot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# vgplot: virusgatherer plot with ViralRefSeq_taxonomy as custom grouping
vgplot <- VhgIdenFacetedScatterPlot(vg_file,groupby = "ViralRefSeq_taxonomy")
vgplot
?VhgRunsBarplot
# plot 1: plot boxplot for "identity"
plot <- VhgRunsBarplot(file,cut = 1e-5)
plot
document()
check()
install()
library(Virusparies)
?VgConLenViolin
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = FALSE)
VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
?VhgRunsBarplot
VhgRunsBarplot(file,cut = 1e-5)
VhgRunsBarplot(file,cut = 1e-5)
document()
load_all()
VhgRunsBarplot(file,cut = 1e-5)
VhgRunsBarplot(vg_file,cut = 1e-5)
VhgRunsBarplot(vg_file,cut = 1e-5,groupby = "ViralRefSeq_taxonomy")
document()
load_all()
VhgRunsBarplot(vg_file,cut = 1e-5,groupby = "ViralRefSeq_taxonomy")
?VhSumHitsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- VhSumHitsBarplot(vh_file,cut = 1e-5)
plot
?VhgIdenFacetedScatterPlot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1
plot <- VhgIdenFacetedScatterPlot(file,cutoff = 1e-5)
plot
?VhgIdenFacetedScatterPlot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1
plot <- VhgIdenFacetedScatterPlot(file,cutoff = 1e-5)
plot
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
# plot 2 for identity
plot2 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_ident")
plot2
# plot 3 custom arguments used
plot3 <- VhgBoxplot(file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "right")
plot3
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# plot 4: Virusgatherer plot for ViralRefSeq_taxonomy agains contig length
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
plot5
?`Virusparies-package`
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# create a violinplot.
violinplot <- VgConLenViolin(vg_file=vg_file,cut = 1e-5,log10_scale = TRUE)
violinplot
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
all(grepl("taxid:", file))
all(grepl("taxid:", file$ViralRefSeq_taxonomy))
grepl("taxid:", file$ViralRefSeq_taxonomy)
all(grepl("taxid:", vh_file$ViralRefSeq_taxonomy))
all(grepl("taxid:", file$ViralRefSeq_taxonomy))
!all(grepl("taxid:", file$ViralRefSeq_taxonomy))
vh_file <- data.frame(ViralRefSeq_taxonomy = c(
"taxid:12345 species:Virus_A",
"species:Virus_B taxid:67890",
"taxid:11223 species:Virus_C",
"species:Virus_D taxid:44556",
"taxid:33445 species:Virus_E"
))
all(grepl("^taxid:", vh_file$ViralRefSeq_taxonomy))
vh_file <- data.frame(ViralRefSeq_taxonomy = c(
"taxid:12345 species:Virus_A",
"taxid:Virus_B taxid:67890",
"taxid:11223 species:Virus_C",
"taxid:Virus_D taxid:44556",
"taxid:33445 species:Virus_E"
))
all(grepl("^taxid:", vh_file$ViralRefSeq_taxonomy))
!all(grepl("^taxid:", vh_file$ViralRefSeq_taxonomy))
vh_file <- data.frame(ViralRefSeq_taxonomy = c(
"taxid:12345 species:Virus_A",
"species:Virus_B taxid:67890",
"taxid:11223 species:Virus_C",
"species:Virus_D taxid:44556",
"taxid:33445 species:Virus_E"
))
!all(grepl("^taxid:", vh_file$ViralRefSeq_taxonomy))
document()
check()
load_all()
?VhgPreprocessTaxa
vh_file_filtered <- VhgPreprocessTaxa(vh_file,"Family")
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path)
vh_file_filtered <- VhgPreprocessTaxa(vh_file,"Family")
View(vh_file_filtered)
vh_file_filtered <- VhgPreprocessTaxa(vh_file_filtered,"Family")
VhgRunsBarplot(file,groupby = "ViralRefSeq_taxonomy")
VhgRunsBarplot(vh_file_filtered,groupby = "ViralRefSeq_taxonomy")
VhgBoxplot(vh_file_filtered,groupby = "ViralRefSeq_taxonomy")
VhgBoxplot(vh_file_filtered,x_column  = "ViralRefSeq_taxonomy")
check()
install()
virus_groups ="text"
# Convert a single character input to a character vector
if (is.character(virus_groups) && length(virus_groups) == 1) {
virus_groups <- unlist(strsplit(virus_groups, ","))
}
virus_groups
virus_groups =c("text")
# Convert a single character input to a character vector
if (is.character(virus_groups) && length(virus_groups) == 1) {
virus_groups <- unlist(strsplit(virus_groups, ","))
}
virus_groups
unlist(strsplit(virus_groups, ","))
class(unlist(strsplit(virus_groups, ",")))
is.list(c("test"))
is.vector(c("test"))
is.character(c("test"))
VhgSubsetHittable <- function(file,
group_column="best_query",
virus_groups = NULL,
) {
VhgSubsetHittable <- function(file,
group_column="best_query",
virus_groups = NULL
) {
# Apply user-defined virus_groups criteria if provided
if (!is.null(virus_groups)) {
valid_columns <- c("ViralRefSeq_taxonomy", "best_query")
if (!(group_column %in% valid_columns)) {
stop("Error: 'group_column' must be either 'ViralRefSeq_taxonomy' or 'best_query'.")
}
unique_groups <- unique(file[[group_column]])
# Ensure virus_groups is a character vector
if (is.character(virus_groups)) {
virus_groups <- as.character(virus_groups)
} else {
stop("Error: 'virus_groups' must be a character or a character vector.")
}
# Separate inclusion and exclusion groups
include_groups <- virus_groups[!startsWith(virus_groups, "-")]
exclude_groups <- sub("^-", "", virus_groups[startsWith(virus_groups, "-")])
# Validate the groups
if (length(include_groups) > 0 && !all(include_groups %in% unique_groups)) {
stop("Error: include_groups contain entries that do not match unique values in group_column.")
}
if (length(exclude_groups) > 0 && !all(exclude_groups %in% unique_groups)) {
stop("Error: exclude_groups contain entries that do not match unique values in group_column.")
}
# Apply inclusion criteria
if (length(include_groups) > 0) {
file <- file[file[[group_column]] %in% include_groups, ]
}
# Apply exclusion criteria
if (length(exclude_groups) > 0) {
file <- file[!file[[group_column]] %in% exclude_groups, ]
}
}
# Additional filtering criteria can be applied here
return(file)
}
table(vh_file$best_query)
VhgSubsetHittable(vh_file,virus_groups = "Hepadna-Nackedna_TP")
VhgSubsetHittable(vh_file,virus_groups = -"Hepadna-Nackedna_TP")
VhgSubsetHittable <- function(file,
group_column = "best_query",
virus_groups = NULL) {
# Apply user-defined virus_groups criteria if provided
if (!is.null(virus_groups)) {
valid_columns <- c("ViralRefSeq_taxonomy", "best_query")
if (!(group_column %in% valid_columns)) {
stop("Error: 'group_column' must be either 'ViralRefSeq_taxonomy' or 'best_query'.")
}
unique_groups <- unique(file[[group_column]])
# Handle inclusion and exclusion of groups
if (is.character(virus_groups)) {
virus_groups <- list(include = virus_groups, exclude = character())
} else if (is.list(virus_groups)) {
if (!all(names(virus_groups) %in% c("include", "exclude"))) {
stop("Error: 'virus_groups' list must have 'include' and/or 'exclude' elements.")
}
if (!is.character(virus_groups$include)) {
stop("Error: 'virus_groups$include' must be a character vector.")
}
if (!is.character(virus_groups$exclude)) {
stop("Error: 'virus_groups$exclude' must be a character vector.")
}
} else {
stop("Error: 'virus_groups' must be a character vector or a list with 'include' and/or 'exclude' elements.")
}
# Validate and apply inclusion criteria
if (length(virus_groups$include) > 0) {
if (!all(virus_groups$include %in% unique_groups)) {
stop("Error: include_groups contain entries that do not match unique values in group_column.")
}
file <- file[file[[group_column]] %in% virus_groups$include, ]
}
# Apply exclusion criteria
if (length(virus_groups$exclude) > 0) {
if (!all(virus_groups$exclude %in% unique_groups)) {
stop("Error: exclude_groups contain entries that do not match unique values in group_column.")
}
file <- file[!file[[group_column]] %in% virus_groups$exclude, ]
}
}
# Additional filtering criteria can be applied here
return(file)
}
result <- VhgSubsetHittable(vh_file, virus_groups = list(include = "Hepadna-Nackedna_TP"))
VhgSubsetHittable <- function(file,
group_column = "best_query",
virus_groups = NULL) {
# Helper function to validate and process group criteria
process_groups <- function(groups, include_exclude) {
if (!is.null(groups) && !is.character(groups)) {
stop(paste("Error: 'virus_groups$", include_exclude, "' must be a character vector."))
}
if (is.character(groups)) {
unique_groups <- unique(file[[group_column]])
if (!all(groups %in% unique_groups)) {
stop(paste("Error:", include_exclude, "groups contain entries that do not match unique values in group_column."))
}
if (include_exclude == "include") {
return(file[file[[group_column]] %in% groups, ])
} else if (include_exclude == "exclude") {
return(file[!file[[group_column]] %in% groups, ])
}
}
return(file)
}
# Apply user-defined virus_groups criteria if provided
if (!is.null(virus_groups)) {
valid_columns <- c("ViralRefSeq_taxonomy", "best_query")
if (!(group_column %in% valid_columns)) {
stop("Error: 'group_column' must be either 'ViralRefSeq_taxonomy' or 'best_query'.")
}
if (is.list(virus_groups)) {
file <- process_groups(virus_groups$include, "include")
file <- process_groups(virus_groups$exclude, "exclude")
} else {
file <- process_groups(virus_groups, "include")
}
}
# Additional filtering criteria can be applied here
return(file)
}
result <- VhgSubsetHittable(vh_file, virus_groups = "Hepadna-Nackedna_TP")
result
result <- VhgSubsetHittable(vh_file, virus_groups = c("Hepadna-Nackedna_TP", "Gemini_Rep"))
results
result
result <- VhgSubsetHittable(vh_file, virus_groups = list(exclude = "Hepadna-Nackedna_TP"))
table(result$best_query)
document()
document()
document()
check()
load_all()
?VhgSubsetHittable
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
VhgSubsetHittable(file, virus_groups = "Hepadna-Nackedna_TP")
VhgSubsetHittable(file, virus_groups = c("Hepadna-Nackedna_TP", "Gemini_Rep"))
VhgSubsetHittable(file, virus_groups = list(exclude = "Hepadna-Nackedna_TP"))
VhgSubsetHittable(vh_file, virus_groups = list(exclude =
c("Hepadna-Nackedna_TP", "Anello_ORF1core")))
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# check dimensions before filtering
cat("The dimensions of the VirusHunter Hittable before filtering are: \n");dim(file)
# we only want the Anello_ORF1core from "best_query" col in this example
cat("\nCounts of 'best_query' values before filtering:\n")
table(file$best_query)
# summary stats
# Summary statistics before filtering
cat("\nSummary statistics of 'num_hits' column before filtering:\n")
summary(file$num_hits)
cat("\nSummary statistics of 'ViralRefSeq_ident' column before filtering:\n")
summary(file$ViralRefSeq_ident)
cat("\nSummary statistics of 'ViralRefSeq_E' column before filtering:\n")
summary(file$ViralRefSeq_E)
file_filtered <- VhgSubsetHittable(file,group_column = "best_query",
virus_groups = "Anello_ORF1core",
num_hits_min = 4,ViralRefSeq_ident_criteria = -90,ViralRefSeq_E_criteria = 0.00001)
# check dimensions after filtering
cat("The dimensions of the VirusHunter Hittable after filtering are: \n");dim(file_filtered)
# Summary statistics after filtering
cat("\nCounts of 'best_query' values after filtering:\n")
table(file_filtered$best_query)
cat("\nSummary statistics of 'num_hits' column after filtering:\n")
summary(file_filtered$num_hits)
cat("\nSummary statistics of 'ViralRefSeq_ident' column after filtering:\n")
summary(file_filtered$ViralRefSeq_ident)
cat("\nSummary statistics of 'ViralRefSeq_E' column after filtering:\n")
summary(file_filtered$ViralRefSeq_E)
document()
check()
document()
load_all()
?VhgSubsetHittable
document()
load_all()
?VhgSubsetHittable
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap(Phylum, ncol = wrap_ncol)
library(Virusparies)
library(ggplot2)
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap(Phylum, ncol = wrap_ncol)
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap(Phylum, ncol = 2)
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap(best_query, ncol = 2)
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap(ViralRefSeq_taxonomy, ncol = 2)
plot1$boxp +  # Define colors for TRUE and FALSE
facet_wrap( ncol = 2)
facet_ncol =1
if(!is.null(facet_ncol)&facet_ncol >1){
print("TRUE")
}
facet_ncol =2
if(!is.null(facet_ncol)&facet_ncol >1){
print("TRUE")
}
facet_ncol =NULL
if(!is.null(facet_ncol)&facet_ncol >3){
print("TRUE")
}
facet_ncol =4
if(!is.null(facet_ncol)&facet_ncol >3){
print("TRUE")
}
if(!is.null(facet_ncol)&facet_ncol >3){
print("TRUE")
}
facet_ncol =NULL
if(!is.null(facet_ncol)&facet_ncol >3){
print("TRUE")
}
if(!is.null(facet_ncol)&&facet_ncol >3){
print("TRUE")
}
facet_ncol =4
if(!is.null(facet_ncol)&&facet_ncol >3){
print("TRUE")
}
?facet_wrap
document()
check()
load_all()
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E",facet_ncol = 2)
plot1
plot1
?facet_wrap
document()
load_all()
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
file <- ImportVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(file, x_column = "best_query", y_column = "ViralRefSeq_E",facet_ncol = 2)
plot1
plot1
document()
check()
install()
