test$plot + labs(title = NULL)
test$plot + labs(title = NULL)
test$plot$layout$panel_params
test$plot$layout
test$plot$layout$coord_params
test$plot$layers
grep(test$plot,"enchanced prot")
grep(test$plot$layers,"enchanced prot")
test$plot$labels
test$plot$guides
test$plot$layout
test$plot$labels
test$plot$
test$plot$guides
test$plot$layers
View(test$plot$layers)
# Assuming test$plot is a ggplot object
# Loop through each layer in test$plot$layers
for (i in seq_along(test$plot$layers)) {
layer <- test$plot$layers[[i]]
# Check if the layer contains the "enhanced prot" label
if ("enhanced prot" %in% layer$label) {
print(paste("Layer index:", i))
print(layer)  # Print the layer details for further inspection
}
}
View(layer)
# Assuming test$plot is a ggplot object
# Loop through each layer in test$plot$layers
for (i in seq_along(test$plot$layers)) {
layer <- test$plot$layers[[i]]
# Check if the layer contains the "enhanced prot" label
if ("enhanced prot" %in% layer) {
print(paste("Layer index:", i))
print(layer)  # Print the layer details for further inspection
}
}
# Assuming test$plot is a ggplot object
# Loop through each layer in test$plot$layers
for (i in seq_along(test$plot$layers)) {
layer <- test$plot$layers[[i]]
# Check if the layer contains the "enhanced prot" label
if ("enhanced prot" %in% layer$layer_data) {
print(paste("Layer index:", i))
print(layer)  # Print the layer details for further inspection
}
}
test$plot$layers
test$plot+labs(caption = NULL)
test$plot
test$plot+labs(caption = NULL)
test$plot+labs(tag = NULL)
test$plot$labels
test$plot$labels$label
test$plot$plot_env
test$plot$facet
cvdPlot <- function(plot = last_plot(), layout = c("origin", "deuteranope",
"protanope", "desaturate")) {
choices <- c(origin = "none", deuteranope = "deuteranope",
protanope = "protanope", desaturate = "desaturate",
enhanced = "safe", enhanced.deuteranope = "enhanced.deuteranope",
enhanced.protanope = "enhanced.protanope", enhanced.desaturate = "enhanced.desaturate")
labels <- c(none = "normal vision", deuteranope = "deuteranopia (6%)",
protanope = "protanopia (2%)", desaturate = "desaturated (BW)",
safe = "enhanced vision", enhanced.deuteranope = "enhanced deut",
enhanced.protanope = "enhanced prot", enhanced.desaturate = "enhanced desat")
layout <- match.arg(layout, choices = names(choices), several.ok = TRUE)
layout <- choices[layout]
expr <- substitute(plot)
chk <- function() {
res <- !inherits(plot, c("gg", "grob", "gList"))
return(res)
}
if (chk()) {
pin <- par("pin")
tmpfile <- tempfile()
sink(tmpfile, type = "output")
plot <- tryCatch(grid.grabExpr(show(plot), warn = 0,
wrap = TRUE, width = pin[1], height = pin[2]), error = function(e) {
message("Cannot handle this plot. Error message:",
e)
})
if (is.null(plot)) {
if (is.call(expr)) {
plot <- tryCatch(grid.grabExpr(grid.echo(function() eval(expr)),
warn = 0, wrap = TRUE, width = pin[1], height = pin[2]),
error = function(e) {
message("Cannot handle this plot. Error message:",
e)
})
}
}
sink()
unlink(tmpfile)
if (is.null(plot)) {
stop("Cannnot handle this plot")
}
}
if (is(plot, "gList")) {
u <- unit(1, "null")
plot <- gtable_col(NULL, list(gTree(children = plot)),
u, u)
plot$layout$clip <- "inherit"
}
if (!is(plot, "grob"))
plot <- plot_to_gtable(plot)
layout1 <- layout[!grepl("^enhanced", layout)]
layout2 <- layout[grepl("^enhanced", layout)]
if (length(layout1) > 0) {
dat <- lapply(layout1, replaceColors, grob = plot)
}
else {
dat <- list()
}
if (length(layout2) > 0) {
grob <- replaceColors(plot, "safe")
types <- sub("enhanced.", "", layout2)
dat2 <- lapply(types, replaceColors, grob = grob)
names(dat2) <- layout2
dat <- c(dat, dat2)
}
dat$scale <- 0.9
dat$labels <- labels[layout]
# Remove the next line that calls plot_grid
# do.call(plot_grid, dat)
}
cvdPlot(vhRunsBarplot(vh_file,cut = 1e-5))
test$plot$facet
test$plot$guides
test$plot$layers
test$plot$labels <- NULL
test$plot
test$plot$layers
test$plot$layout$setup
test$plot$layout$coord
test$plot$layout$facet
test$plot$layout$layout
test$plot$layout
rm(list = ls())
library(devtools)
document()
check()
use_package("methods",type = "Imports")
document()
use_package("gtable")
document()
check()
install.packages("cblindplot")
install.packages("colorblind")
install.packages("ggthemes")
?colorblind_pal(
?colorblind_pal()
?colorblind_support
?colorblind
?scale_fill_colorblind(...)
p <- ggplot(mtcars) + geom_point(aes(x = wt, y = mpg,
colour = factor(gear))) + facet_wrap(~am)
p + theme_igray()
p <- ggplot(mtcars) + geom_point(aes(x = wt, y = mpg,
colour = factor(gear))) + facet_wrap(~am)
p + theme_igray() + scale_colour_colorblind()
document()
check()
use_package("ggthemes")
document()
check()
install()
library(Virusparies)
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5)
plot
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5,colorblind = TRUE)
plot
library(devtools)
install()
?vhRunsBarplot
library(Virusparies)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5)
plot
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5,colorblind = TRUE)
plot
?cvdplot
library(devtools)
document()
check()
use_package("colorBlindness")
document()
check()
document()
check()
install()
library(Virusparies)
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5,colorblind = "enhanced.desaturate")
plot
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5)
plot
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-6)
plot
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-10)
plot
View(vh_file)
plot <- vhRunsBarplot(vh_file,cut = 1e-13)
plot
plot <- vhRunsBarplot(vh_file,cut = 1e-13,colorblind = "enhanced")
plot
library(devtools)
document()
check()
document()
check()
document()
check()
install()
library(Virusparies)
?VhgIdentityScatterPlot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
VhgIdentityScatterPlot(vh_file,cutoff = 1e-5)
VhgIdentityScatterPlot(vh_file,cutoff = 1e-5,colorblind = "enhanced.desaturate")
VhgIdentityScatterPlot(vh_file,cutoff = 1e-5,colorblind = "enhanced.desaturate")
VhgIdentityScatterPlot(vh_file,cutoff = 1e-5,colorblind = "enhanced")
VhgIdentityScatterPlot(vh_file,cutoff = 1e-5,colorblind = "deuteranope")
names(vh_file)
document()
library(devtools)
document()
check()
document()
names(vh_file)
document()
check()
document()
check()
document()
check()
names(vh_file)
groupby = "best_query"
is.character(groupby)
groupby = 1
is.character(groupby)
check_input_type <- function(input_list, option) {
# Check if the option is valid (either 1 or 2)
if (!option %in% c(1, 2)) {
stop("Invalid option. Please choose 1 for character or 2 for numeric.")
}
# Define the type-checking function based on the option
is_correct_type <- if (option == 1) is.character else is.numeric
# Check each element in the input list
for (i in seq_along(input_list)) {
if (!is_correct_type(input_list[[i]])) {
element_type <- if (option == 1) "character" else "numeric"
stop("Error: Element at index ", i, " must be ", element_type, ".")
}
}
}
groupby
check_input_type(groupby,2)
check_input_type(groupby,1)
#' @keywords internal
check_input_type <- function(input_list, option) {
# Check if the option is valid (either 1 or 2)
if (!option %in% c(1, 2)) {
stop("Invalid option. Please choose 1 for character or 2 for numeric.")
}
# Define the type-checking function based on the option
is_correct_type <- if (option == 1) is.character else is.numeric
# Check each element in the input list
for (element in input_list) {
if (!is_correct_type(element)) {
element_type <- if (option == 1) "character" else "numeric"
stop("Error: Element '", element, "' must be ", element_type, ".")
}
}
}
check_input_type(groupby,1)
class(vh_file$SRA_run)
class(vh_file$ViralRefSeq_E)
inherits(vh_file$SRA_run,"character")
inherits(vh_file$SRA_run,"numeric")
check_input_type(vh_file,c("ViralRefSeq_E","ViralRefSeq_ident"),2)
check_input_type <- function(vh_file, columns, option) {
# Check if the option is valid (either 1 or 2)
if (!option %in% c(1, 2)) {
stop("Invalid option. Please choose 1 for character or 2 for numeric.")
}
# Define the expected class based on the option
expected_class <- if (option == 1) "character" else "numeric"
# Check if the specified columns exist in vh_file
all_names <- names(vh_file)
for (col in columns) {
if (!(col %in% all_names)) {
stop("Column '", col, "' not found in vh_file. Available column names: ", paste(all_names, collapse = ", "))
}
# Check the class of the column
if (!inherits(vh_file[[col]], expected_class)) {
stop("Error: Column '", col, "' must be of type ", expected_class, ".")
}
}
}
check_input_type(vh_file,c("ViralRefSeq_E","ViralRefSeq_ident"),2)
check_input_type(vh_file,c("ViralRefSeq_E","ViralRefSeq_ident"),1)
y_column = "ViralRefSeq_E"
check_input_type(vh_file,y_column,2)
document()
check()
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
class(vg_file$contig_len)
document()
check()
document()
check()
document()
check()
document()
check()
install()
library(Virusparies)
?importVirusTable
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
library(devtools)
document()
check()
document()
check()
install()
library(Virusparies)
install.packages("ggsci")
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5)
plot
library(ggsci)
plot+ scale_color_npg()
plot+scale_color_npg()
plot
plot$plot+scale_color_npg()
plot$plot+ scale_fill_npg()
plot$plot+ scale_fill_aaas()
plot$plot+ scale_fill_lancet()
plot$plot+ scale_color_jama()
plot$plot+ scale_color_bmj()
plot$plot+ scale_fill_bmj()
?scale_fill_bmj()
plot$plot+ scale_fill_jco()
plot$plot+scale_fill_ucscgb()
plot$plot+scale_fill_d3()
plot$plot+scale_fill_locuszoom()
plot$plot+scale_fill_cosmic()
plot$plot+scale_fill_futurama()
plot$plot+scale_fill_tron()
plot$plot+scale_fill_startrek()
?scale_fill_startrek()
plot$plot+scale_fill_material()
plot$plot+scale_fill_simpsons()
install.packages("rcartocolor")
display_carto_all(colorblind_friendly = TRUE)
library(rcartocolor)
display_carto_all(colorblind_friendly = TRUE)
install.packages("viridis")
library(viridis)
plot
plot$plot+
scale_fill_viridis()
plot$plot+
scale_fill_viridis(discrete = TRUE)
test <- plot$plot+
scale_fill_viridis(discrete = TRUE)
library(colorBlindness)
cvdPlot(
plot = test,
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
cvdPlot(
plot = plot$plot,
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
?scale_fill_viridis()
library(devtools)
use_package("viridis")
document()
check()
document()
check()
install()
library(Virusparies)
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5)
plot
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5,colorblind_support = TRUE)
plot$plot
?VhgIdentityScatterPlot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
plot <- VhgIdentityScatterPlot(vh_file,cutoff = 1e-5)
plot
plot <- VhgIdentityScatterPlot(vh_file,cutoff = 1e-5,colorblind_support = TRUE)
plot
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",colorblind_support = TRUE)
plot1
library(colorBlindness)
cvdPlot(
plot = plot1$boxp,
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
plot <- VhgIdentityScatterPlot(vh_file,cutoff = 1e-5)
cvdPlot(
plot = plot,
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
?vhSumHitsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhSumHitsBarplot(vh_file,cut = 1e-5)
plot
cvdPlot(
plot = plot,
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
?VhgIdenFacetedScatterPlot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1
plot <- VhgIdenFacetedScatterPlot(vh_file,cutoff = 1e-5)
cvdPlot(
plot = plot,
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1
plot <- VhgIdenFacetedScatterPlot(vh_file,cutoff = 1e-5,colorblind_support = TRUE)
cvdPlot(
plot = plot,
layout = c("origin", "deuteranope", "protanope", "desaturate")
)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhSumHitsBarplot(vh_file,cut = 1e-5,colorblind_support = TRUE)
plot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhSumHitsBarplot(vh_file,cut = 1e-5)
plot
?VhgIdentityScatterPlot
# Basic plot
plot <- VhgIdentityScatterPlot(vh_file,cutoff = 1e-5,colorblind_support = FALSE)
plot
# Basic plot
plot <- VhgIdentityScatterPlot(vh_file,cutoff = 1e-5,colorblind_support = TRUE)
plot
plot
plot+scale_color_viridis(discrete = TRUE)
library(viridis)
plot+scale_color_viridis(discrete = TRUE)
library(devtools)
document()
pkgload::dev_help('colorbildsupport_')
check()
document()
check()
install()
library(Virusparies)
library(colorBlindness)
?VhgIdentityScatterPlot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# Basic plot
plot <- VhgIdentityScatterPlot(vh_file,cutoff = 1e-5)
plot
# Basic plot
plot <- VhgIdentityScatterPlot(vh_file,cutoff = 1e-5,colorblind_support = TRUE)
plot
?scale_color_viridis
library(devtools)
document()
check()
document()
check()
install()
