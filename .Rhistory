library(dplyr)
n_distinct(vg_file[["best_query"]])
n_distinct(vg_file[["SRA_Run"]])
names(vg_file)
n_distinct(vg_file[["SRA_run"]])
n_distinct(coalesce(vh_file$SRA_run, vh_file$run_id))
n_distinct(coalesce(vg_file$SRA_run, vh_file$run_id))
n_distinct(coalesce(vg_file$SRA_run, vg_file$run_id))
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
n_distinct(coalesce(vh_file$SRA_run, vh_file$run_id))
names(vh_file)
vh_file <- vh_file %>%
rename(run_id = SRA_run)
names(vh_file)
n_distinct(coalesce(vh_file$SRA_run, vh_file$run_id))
library(devtools)
document()
check()
check()
?coalesce
document()
document()
check()
document()
check()
install()
library(Virusparies)
?vhRunsBarplot
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
vhRunsBarplot(vh_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
vhRunsBarplot(vg_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
library(devtools)
document()
check()
?VhgBoxplot
vhRunsBarplot(vg_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
document()
check()
extract_viridae <- function(sublist) {
element <- subset(sublist, grepl("viridae", sublist))
if (length(element) > 0) {
return(element)
} else {
return(NA)  # Return NA if "viridae" is not found in the sublist
}
}
#' preprocess ViralRefSeq_taxonomy elements
#'
#' @param vh_file hittables file
#'
#' @details
#' Besides best_query the user can utilize the ViralRefSeq_taxonomy column as x_column or groupby
#' in plots. That columns needs to be preprocessed as it it too long and has too many unique elements
#' to be used for grouping. The element containing "viridae" is used because the first one is the tax ID.
#'  NA are replaced by "unclassified" and existing "unclassified" are removed.
#'
#'
#' @return vh_file with preprocessed ViralRefSeq_taxonomy elements
#'
#' @keywords internal
taxonomy_group_preprocess <- function(vh_file){
# split vh_file.
my_list <- strsplit(vh_file$ViralRefSeq_taxonomy,split = "|",fixed = TRUE)
# Apply the function to each sublist
viridae_elements <- lapply(my_list, extract_viridae)
# Initialize an empty vector to store the filtered names
filtered_names <- vector("list", length = length(viridae_elements))
# Iterate over each element in viridae_elements
for (i in seq_along(viridae_elements)) {
# Check if the element contains two or more strings
if (length(viridae_elements[[i]]) >= 2) {
# Extract only the virus family names without additional text
filtered_names[[i]] <- grep("^[[:alnum:]]+viridae$", viridae_elements[[i]], value = TRUE)
} else {
# If the element contains less than two strings, keep it unchanged
filtered_names[[i]] <- viridae_elements[[i]]
}
}
# Remove elements containing "unclassified" outside the function
viridae_elements <- lapply(filtered_names, function(x) x[!grepl("unclassified", x)])
viridae_elements[is.na(viridae_elements)] <- "unclassified"
vh_file$ViralRefSeq_taxonomy <- unlist(viridae_elements)
return(vh_file)
}
test <- taxonomy_group_preprocess(vg_file)
test$ViralRefSeq_taxonomy
test$ViralRefSeq_taxonomy = "unclassified"
test$ViralRefSeq_taxonomy
test <- taxonomy_group_preprocess(vg_file)
View(test)
View(vg_file)
vg_file$ViralRefSeq_taxonomy[141]
document()
document()
document()
document()
document()
document()
document()
document()
library(Virusparies)
?VhgIdenFacetedScatterPlot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1
plot <- VhgIdenFacetedScatterPlot(vh_file,cutoff = 1e-5)
?VhgIdentityScatterPlot
VhgIdentityScatterPlot(vh_file,cutoff = 1e-5)
?VhgIdenFacetedScatterPlot
VhgIdenFacetedScatterPlot(vh_file,cutoff = 1e-5)
VhgIdenFacetedScatterPlot(vh_file,cutoff = 1e-5,legend_title = "test")
VhgIdenFacetedScatterPlot(vh_file,cutoff = 1e-5,legend_position = "right")
document()
check()
document()
check()
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5)
plot
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
# plot 1: plot boxplot for "identity"
vhRunsBarplot(vg_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
vhRunsTable(vg_file)
document()
check()
document()
check()
vhRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
document()
document()
check()
document()
check()
install()
vhRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
VhgRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
library(Virusparies)
?VhgRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
VhgRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
VhgRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
library(devtools)
document()
check()
document()
document()
document()
check()
document()
check()
document()
document()
check()
document()
document()
check()
library(devtools)
document()
document()
check()
library(readxl)
library(devtools)
ICTV_data <- read_xlsx("/media/sergej/My Book/Rskripte_f-r_masterarbeit-main/data/ICTV_Master_Species_List_2023_MSL39.v2.xlsx")
ICTV_data <- read_xlsx("/media/sergej/My Book/Rskripte_f-r_masterarbeit-main/data/ICTV_Master_Species_List_2023_MSL39.v2.xlsx",sheet = 2)
use_data(ICTV_data,internal = TRUE)
check()
check()
install()
library(devtools)
document()
check()
install()
?VhgBoxplot
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vh_file <- ImportVirusTable(path2)
#'
#'
#' @keywords internal
extract_viridae <- function(sublist) {
element <- subset(sublist, grepl("viridae", sublist))
if (length(element) > 0) {
return(element)
} else {
return(NA)  # Return NA if "viridae" is not found in the sublist
}
}
#' preprocess ViralRefSeq_taxonomy elements
#'
#' @param vh_file hittables file
#'
#' @details
#' Besides best_query the user can utilize the ViralRefSeq_taxonomy column as x_column or groupby
#' in plots. That columns needs to be preprocessed as it it too long and has too many unique elements
#' to be used for grouping. The element containing "viridae" is used because the first one is the tax ID.
#'  NA are replaced by "unclassified" and existing "unclassified" are removed.
#'
#'
#' @return vh_file with preprocessed ViralRefSeq_taxonomy elements
#'
#' @import dplyr
#' @importFrom rlang .data
#' @keywords internal
taxonomy_group_preprocess <- function(vh_file) {
# Split vh_file.
my_list <- strsplit(vh_file$ViralRefSeq_taxonomy, split = "|", fixed = TRUE)
# Apply the function to each sublist
viridae_elements <- lapply(my_list, extract_viridae)
# Initialize an empty vector to store the filtered names
filtered_names <- vector("list", length = length(viridae_elements))
# Iterate over each element in viridae_elements
for (i in seq_along(viridae_elements)) {
# Check if the element contains two or more strings
if (length(viridae_elements[[i]]) >= 2) {
# Extract only the virus family names without additional text
filtered_names[[i]] <- grep("^[[:alnum:]]+viridae$", viridae_elements[[i]], value = TRUE)
} else {
# If the element contains less than two strings, keep it unchanged
filtered_names[[i]] <- viridae_elements[[i]]
}
}
# Load ICTV data (assuming the ICTV data is properly loaded and formatted)
ICTV_data <- ICTV_data
# Initialize a vector to store the processed taxonomy names
processed_taxonomy <- vector("character", length = length(unlist(filtered_names)))
for (i in seq_along(filtered_names)) {
entry <- filtered_names[[i]]
if (is.na(entry) || length(entry) == 0) {
# Find matching rows in ICTV_data based on various taxonomic levels
match_row <- ICTV_data %>%
filter(.data$Subphylum %in% my_list[[i]] |
.data$Class %in% my_list[[i]] |
.data$Subclass %in% my_list[[i]] |
.data$Order %in% my_list[[i]] |
.data$Suborder %in% my_list[[i]] |
.data$Family %in% my_list[[i]])
if (nrow(match_row) > 0) {
phylum <- match_row$Phylum[1]
processed_taxonomy[i] <- paste("unclassified", phylum)
} else {
processed_taxonomy[i] <- "unclassified"
}
} else {
processed_taxonomy[i] <- entry
}
}
# Update the ViralRefSeq_taxonomy column in vh_file
vh_file$ViralRefSeq_taxonomy <- unlist(processed_taxonomy)
return(vh_file)
}
vh_file <- taxonomy_group_preprocess(vh_file)
library(readxl)
ICTV_data <- read_xlsx("/media/sergej/My Book/Rskripte_f-r_masterarbeit-main/data/ICTV_Master_Species_List_2023_MSL39.v2.xlsx")
ICTV_data <- read_xlsx("/media/sergej/My Book/Rskripte_f-r_masterarbeit-main/data/ICTV_Master_Species_List_2023_MSL39.v2.xlsx",sheet = 2)
View(vh_file)
vh_file <- taxonomy_group_preprocess(vh_file)
library(dplyr)
vh_file <- taxonomy_group_preprocess(vh_file)
unique_phyla <- c(
Taleaviricota = "#800000",
Peploviricota = "#9A6324",
Uroviricota = "#ffd8b1",
Hofneiviricota = "#469990",
Phixviricota = "#000075",
Cossaviricota = "#e6194B",
Cressdnaviricota = "#f58231",
Saleviricota = "#ffe119",
Ambiviricota = "#bfef45",
Duplornaviricota = "#3cb44b",
Kitrinoviricota = "#42d4f4",
Lenarviricota = "#4363d8",
Negarnaviricota = "#911eb4",
Pisuviricota = "#f032e6",
Artverviricota = "#808000",
Nucleocytoviricota = "#fffac8",
Preplasmiviricota = "#aaffc3",
Dividoviricota = "#dcbeff",
unclassified = "#a9a9a9"
)
# Assuming ICTV_data is properly loaded and formatted
ICTV_data <- ICTV_data  # Replace with your actual ICTV_data
# Split the data frame by the 'Phylum' column
ICTV_data_split <- split(ICTV_data, ICTV_data$Phylum)
# Initialize family colors vector
family_colors_vector <- character(length = length(unique(ICTV_data$Family)))
names(family_colors_vector) <- unique(ICTV_data$Family)
phylum_mapping <- list()
for (phylum_name in names(ICTV_data_split)) {
phylum_color <- unique_phyla[phylum_name]
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
family_colors <- rep(phylum_color, length(unique_families))
family_colors_vector[unique_families] <- family_colors
phylum_mapping[unique_families] <- phylum_name
}
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
phylum_mapping
# Get unique families in vh_file[groupby]
unique_families_in_data <- unique(vh_file[[groupby]])
# Handle unmatched virus groups (NA values)
unmatched <- is.na(matched_colors)
# Create a named vector
names(labels) <- unique_labels
# Get unique families in vh_file[groupby]
unique_families_in_data <- unique(vh_file[["ViralRefSeq_taxonomy"]])
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
#print(partial_matches)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
# Handle unmatched virus groups (NA values)
unmatched <- is.na(matched_colors)
matched_colors[unmatched] <- unique_phyla["unclassified"]
# Filter out NA values (no matches) and corresponding family names
matched_families <- unique_families_in_data[!is.na(matched_colors)]
matched_colors <- matched_colors[!is.na(matched_colors)]
# Handle empty strings represented as ""
empty_strings <- matched_colors == ""
matched_colors[empty_strings] <- unique_phyla["unclassified"]
# Create matched_vector with matched colors and their names
matched_vector <- c(matched_colors)
names(matched_vector) <- matched_families
# Iterate over the colors in family_colors_vector
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
legend_labels[legend_labels == "#a9a9a9"]<- "unclassified"
# Extract unique names and corresponding values
unique_labels <- unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
# Loop through legend_labels to substitute "unclassified" entries
for (label in names(legend_labels)) {
if (grepl("^unclassified", label)) {  # Check if label starts with "unclassified"
phylum <- sub("^unclassified (.*)", "\\1", label)  # Extract the phylum name
legend_labels[label] <- phylum  # Replace "unclassified" with the phylum name
}
}
legend_labels
labels
names(legend_labels)
names(unique_phyla)
names(legend_labels)
legend_labels
unique(legend_labels)
names(labels)
setdiff(names(labels), unique(legend_labels))
# Define the unique_phyla with colors
unique_phyla <- c(
Taleaviricota = "#800000",
Peploviricota = "#9A6324",
Uroviricota = "#ffd8b1",
Hofneiviricota = "#469990",
Phixviricota = "#000075",
Cossaviricota = "#e6194B",
Cressdnaviricota = "#f58231",
Saleviricota = "#ffe119",
Ambiviricota = "#bfef45",
Duplornaviricota = "#3cb44b",
Kitrinoviricota = "#42d4f4",
Lenarviricota = "#4363d8",
Negarnaviricota = "#911eb4",
Pisuviricota = "#f032e6",
Artverviricota = "#808000",
Nucleocytoviricota = "#fffac8",
Preplasmiviricota = "#aaffc3",
Dividoviricota = "#dcbeff",
unclassified = "#a9a9a9"
)
# Example legend_labels vector
legend_labels <- c(
Anelloviridae = "unclassified",
Hepadnaviridae = "Artverviricota",
Phycodnaviridae = "Nucleocytoviricota",
Peduoviridae = "Uroviricota",
"unclassified Uroviricota" = "Uroviricota",
Parvoviridae = "Cossaviricota",
Haloferuviridae = "Uroviricota",
Genomoviridae = "Cressdnaviricota",
Circoviridae = "Cressdnaviricota",
Mimiviridae = "Nucleocytoviricota",
Orthoherpesviridae = "Peploviricota",
Allomimiviridae = "Nucleocytoviricota",
Straboviridae = "Uroviricota",
Geminiviridae = "Cressdnaviricota"
)
# Identify missing phyla names
missing_phyla <- setdiff(names(unique_phyla), unique(legend_labels))
# Add missing phyla names to legend_labels with their corresponding colors
for (phylum in missing_phyla) {
legend_labels[phylum] <- unique_phyla[phylum]
}
# Print updated legend_labels
print(legend_labels)
unique_phyla["Lenarviricota"]
# Iterate over the colors in family_colors_vector
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
legend_labels[legend_labels == "#a9a9a9"]<- "unclassified"
# Extract unique names and corresponding values
unique_labels <- unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
# Loop through legend_labels to substitute "unclassified" entries
for (label in names(legend_labels)) {
if (grepl("^unclassified", label)) {  # Check if label starts with "unclassified"
phylum <- sub("^unclassified (.*)", "\\1", label)  # Extract the phylum name
legend_labels[label] <- phylum  # Replace "unclassified" with the phylum name
}
}
legend_labels
labels
unique_phyla["Lenarviricota"]
labels["Lenarviricota"] <- unique_phyla["Lenarviricota"]
unique_phyla["Lenarviricota"]
labels
setdiff(names(labels), unique(legend_labels))
rm(list = ls())
library(devtools)
document()
check()
install()
?Vhg
library(Virusparies)
?VhgBoxplot
library(Virusparies)
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- ImportVirusTable(path2)
# plot 4: Virusgatherer plot for ViralRefSeq_taxonomy agains contig length
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
plot5
library(dplyr)
?`dplyr-package`
library(devtools)
document()
check()
document()
document()
document()
check()
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
document()
check()
document()
check()
install()
?VgConLenViolin
library(Virusparies)
?VgConLenViolin
library(devtools)
document()
check()
install()
library(Virusparies)
?VgConLenViolin
library(devtools)
document()
check()
document()
check()
document()
document()
check()
install()
