# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
# After assigning the colors, remove "viridae" from the names of family_colors_vector
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
# Rename "Pseudo" to "PseudoPseudo"
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
phylum_mapping
phylum_mapping
family_colors_vector
unique_families
phylum_mapping <- list()
for (phylum_name in names(ICTV_data_split)) {
phylum_color <- unique_phyla[phylum_name]
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
family_colors <- rep(phylum_color, length(unique_families))
family_colors_vector[unique_families] <- family_colors
phylum_mapping[unique_families] <- phylum_name
}
phylum_mapping
phylum_mapping <- list()
# Iterate over each sublist of ICTV_data_split
for (phylum_name in names(ICTV_data_split)) {
# Get the color corresponding to the current phylum
phylum_color <- unique_phyla[phylum_name]
# Get unique families in the sublist
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
# Map each family to its corresponding color
family_colors <- rep(phylum_color, length(unique_families))
family_colors_vector[unique_families] <- family_colors
# Assign colors to the virus family names
family_colors_vector[unique_families] <- family_colors
}
# After assigning the colors, remove "viridae" from the names of family_colors_vector
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
# Rename "Pseudo" to "PseudoPseudo"
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
phylum_mapping
phylum_mapping <- list()
for (phylum_name in names(ICTV_data_split)) {
phylum_color <- unique_phyla[phylum_name]
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
family_colors <- rep(phylum_color, length(unique_families))
family_colors_vector[unique_families] <- family_colors
phylum_mapping[unique_families] <- phylum_name
}
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
phylum_mapping
family_colors_vector
phylum_mapping <- list()
for (phylum_name in names(ICTV_data_split)) {
phylum_color <- unique_phyla[phylum_name]
unique_families <- unique(ICTV_data_split[[phylum_name]]$Family)
family_colors <- rep(phylum_color, length(unique_families))
family_colors_vector[unique_families] <- family_colors
phylum_mapping[unique_families] <- phylum_name
}
names(family_colors_vector) <- sub("viridae$", "", names(family_colors_vector), ignore.case = TRUE)
names(family_colors_vector)[names(family_colors_vector) == "Pseudo"] <- "PseudoPseudo"
names(family_colors_vector) <- gsub("^(Allo|Ortho|Pseudo)", "", names(family_colors_vector), ignore.case = TRUE)
names(phylum_mapping ) <- sub("viridae$", "", names(phylum_mapping ), ignore.case = TRUE)
names(phylum_mapping )[names(phylum_mapping ) == "Pseudo"] <- "PseudoPseudo"
names(phylum_mapping ) <- gsub("^(Allo|Ortho|Pseudo)", "", names(phylum_mapping ), ignore.case = TRUE)
phylum_mapping
# Get unique families in vh_file[groupby]
unique_families_in_data <- unique(vh_file[[groupby]])
unique_families_in_data <- unique(vh_file[["best_query"]])
# Initialize a vector to store matched colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
# Iterate over the colors in family_colors_vector
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
# Check for partial matches between color names and family names
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
#print(partial_matches)
# Assign the color to matched family names
matched_colors[partial_matches] <- color
}
matched_colors
matched_colors <- rep(NA_character_, length(unique_families_in_data))
for (i in seq_along(family_colors_vector)) {
color <- family_colors_vector[i]
partial_matches <- grepl(names(color), unique_families_in_data, ignore.case = TRUE)
matched_colors[partial_matches] <- color
}
matched_colors
# Handle unmatched virus groups (NA values)
unmatched <- is.na(matched_colors)
matched_colors[unmatched] <- unique_phyla["unclassified"]
# Filter out NA values (no matches) and corresponding family names
matched_families <- unique_families_in_data[!is.na(matched_colors)]
matched_colors <- matched_colors[!is.na(matched_colors)]
# Handle empty strings represented as ""
empty_strings <- matched_colors == ""
matched_colors[empty_strings] <- unique_phyla["unclassified"]
# Create matched_vector with matched colors and their names
matched_vector <- c(matched_colors)
names(matched_vector) <- matched_families
matched_vector
# Iterate over the colors in family_colors_vector
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
# Extract unique names and corresponding values
unique_labels <- unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
legend_labels
labels
matched_vector[match(unique_labels, legend_labels)]
unique(legend_labels)
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
labels
unique(legend_labels)["#a9a9a9"]
unique(legend_labels)== "#a9a9a9"
names(updated_labels)[names(updated_labels) == "#a9a9a9"] <- "unclassified"
unique_labels
names(unique_labels)[names(unique_labels) == "#a9a9a9"] <- "unclassified"
unique_labels
legend_labels
legend_labels[legend_labels == "#a9a9a9"]
legend_labels[legend_labels == "#a9a9a9"]<- "unclassified"
legend_labels
# Iterate over the colors in family_colors_vector
legend_labels <- matched_vector
for (i in seq_along(phylum_mapping)) {
color <- names(phylum_mapping)[i]
partial_matches <- grepl(color, names(legend_labels), ignore.case = TRUE)
if (!any(is.na(partial_matches)) && any(partial_matches) && !is.na(phylum_mapping[[color]])) {
legend_labels[partial_matches] <- phylum_mapping[[color]]
}
}
legend_labels[legend_labels == "#a9a9a9"]<- "unclassified"
# Extract unique names and corresponding values
unique_labels <- unique(legend_labels)
labels <- matched_vector[match(unique_labels, legend_labels)]
# Create a named vector
names(labels) <- unique_labels
legend_labels
labels
library(devtools)
document()
check()
# Given data
legend_labels <- c("Anello_ORF1core", "Gemini_Rep", "Genomo_Rep", "Hepadna-Nackedna_TP")
matched_vector <- c("#a9a9a9", "#f58231", "#f58231", "#808000")
# Create a named vector using legend_labels as names and matched_vector as values
named_vector <- setNames(matched_vector, legend_labels)
# Add a new entry with "unclassified" and the value "#a9a9a9"
named_vector <- c(named_vector, unclassified = "#a9a9a9")
# Print the result
print(named_vector)
named_vector[named_vector == "#a9a9a9"]<- "unclassified"
named_vector
install()
library(Virusparies)
?VhgBoxplot
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "ViralRefSeq_taxonomy", y_column = "ViralRefSeq_E")
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "ViralRefSeq_taxonomy", y_column = "ViralRefSeq_E")
plot1
rm(list = ls())
library(devtools)
document()
check()
library(Virusparies)
vh_sumhitbar_preprocessing <- function(vh_file,groupby="best_query"){
vh_group <- vh_file %>%
group_by(.data[[groupby]]) %>%
summarize(sum=sum(.data$num_hits))%>%
mutate(
perc = round(proportions(.data$sum) * 100, 2),
res = str_c(.data$sum, " (", .data$perc, "%)"),
cyl = as.factor(.data[[groupby]])
)
return(vh_group)
}
vh_group <- vh_sumhitbar_preprocessing(vh_file,"best_query")
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vh_group <- vh_sumhitbar_preprocessing(vh_file,"best_query")
vh_group
# Extract unique values from vh_file$best_query
unique_queries <- unique(vh_group[[groupby]])
unique_queries <- unique(vh_group[["best_query"]])
unique_queries
pyhlum_names <- legend_labels[unique_queries]
document()
rm(list = ls())
check()
install()
library(Virusparies)
?vhSumHitsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vhSumHitsBarplot(vh_file,groupby = "VirusRefSeq_taxonomy",cut = 1e-5)
vhSumHitsBarplot(vh_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
library(devtools)
document()
check()
install()
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1 for evalues
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
plot5 <- VhgBoxplot(vg_file,x_column = "ViralRefSeq_taxonomy",y_column = "contig_len")
plot5
document()
check()
library(devtools)
document()
check()
install()
?VhgIdentityScatterPlot
?VhgIdentityScatterPlot
?VhgIdenFacetedScatterPlot
?vhRunsBarplot
document()
check()
install()
library(Virusparies)
?vhRunsBarplot
vhRunsBarplot(vh_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vhRunsBarplot(vh_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
vhRunsBarplot(vg_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
preprocess_runs_bar <- function(vh_file,groupby="best_query"){
all_names <- names(vh_file)
# Check if either "SRA_run" or "run_id" exists in vh_file
if (!("SRA_run" %in% all_names) && !("run_id" %in% all_names)) {
stop("Neither 'SRA_run' nor 'run_id' found in vh_file. Available column names: ", paste(all_names, collapse = ", "))
}
check_columns(vh_file,groupby)
sample_run <- vh_file %>%
group_by(.data[[groupby]]) %>%
summarise(unique_SRA_run = n_distinct(across(any_of(c("SRA_run", "run_id"))))) %>%
mutate(
perc = round(proportions(.data$unique_SRA_run) * 100, 2),
res = str_c(.data$unique_SRA_run, " (", .data$perc, "%)"),
cyl = as.factor(.data[[groupby]])
)
return(sample_run)
}
preprocess_runs_bar(vh_file)
preprocess_runs_bar <- function(vh_file,groupby="best_query"){
all_names <- names(vh_file)
# Check if either "SRA_run" or "run_id" exists in vh_file
if (!("SRA_run" %in% all_names) && !("run_id" %in% all_names)) {
stop("Neither 'SRA_run' nor 'run_id' found in vh_file. Available column names: ", paste(all_names, collapse = ", "))
}
sample_run <- vh_file %>%
group_by(.data[[groupby]]) %>%
summarise(unique_SRA_run = n_distinct(across(any_of(c("SRA_run", "run_id"))))) %>%
mutate(
perc = round(proportions(.data$unique_SRA_run) * 100, 2),
res = str_c(.data$unique_SRA_run, " (", .data$perc, "%)"),
cyl = as.factor(.data[[groupby]])
)
return(sample_run)
}
preprocess_runs_bar(vh_file)
library(dplyr)
preprocess_runs_bar(vh_file)
library(stringr)
preprocess_runs_bar(vh_file)
sum(unique(vh_file$SRA_run))
length(unique(vh_file$SRA_run))
n_distinct(vh_file$SRA_run)
preprocess_runs_bar <- function(vh_file,groupby="best_query"){
all_names <- names(vh_file)
# Check if either "SRA_run" or "run_id" exists in vh_file
if (!("SRA_run" %in% all_names) && !("run_id" %in% all_names)) {
stop("Neither 'SRA_run' nor 'run_id' found in vh_file. Available column names: ", paste(all_names, collapse = ", "))
}
total_unique_SRA_run <- n_distinct(vh_file$SRA_run)
sample_run <- vh_file %>%
group_by(.data[[groupby]]) %>%
summarise(unique_SRA_run = n_distinct(across(any_of(c("SRA_run", "run_id"))))) %>%
mutate(
perc = round(unique_SRA_run / total_unique_SRA_run * 100, 2),
res = paste(unique_SRA_run, " (", perc, "%)"),
cyl = as.factor(.data[[groupby]])
)
return(sample_run)
}
preprocess_runs_bar(vh_file)
rm(list = ls())
library(devtools)
document()
check()
check()
install()
library(Virusparies)
?vhRunsBarplot
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
names(vg_file)
n_distinct(vg_file[["best_query"]])
library(dplyr)
n_distinct(vg_file[["best_query"]])
n_distinct(vg_file[["SRA_Run"]])
names(vg_file)
n_distinct(vg_file[["SRA_run"]])
n_distinct(coalesce(vh_file$SRA_run, vh_file$run_id))
n_distinct(coalesce(vg_file$SRA_run, vh_file$run_id))
n_distinct(coalesce(vg_file$SRA_run, vg_file$run_id))
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
n_distinct(coalesce(vh_file$SRA_run, vh_file$run_id))
names(vh_file)
vh_file <- vh_file %>%
rename(run_id = SRA_run)
names(vh_file)
n_distinct(coalesce(vh_file$SRA_run, vh_file$run_id))
library(devtools)
document()
check()
check()
?coalesce
document()
document()
check()
document()
check()
install()
library(Virusparies)
?vhRunsBarplot
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
vhRunsBarplot(vh_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
vhRunsBarplot(vg_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
library(devtools)
document()
check()
?VhgBoxplot
vhRunsBarplot(vg_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
document()
check()
extract_viridae <- function(sublist) {
element <- subset(sublist, grepl("viridae", sublist))
if (length(element) > 0) {
return(element)
} else {
return(NA)  # Return NA if "viridae" is not found in the sublist
}
}
#' preprocess ViralRefSeq_taxonomy elements
#'
#' @param vh_file hittables file
#'
#' @details
#' Besides best_query the user can utilize the ViralRefSeq_taxonomy column as x_column or groupby
#' in plots. That columns needs to be preprocessed as it it too long and has too many unique elements
#' to be used for grouping. The element containing "viridae" is used because the first one is the tax ID.
#'  NA are replaced by "unclassified" and existing "unclassified" are removed.
#'
#'
#' @return vh_file with preprocessed ViralRefSeq_taxonomy elements
#'
#' @keywords internal
taxonomy_group_preprocess <- function(vh_file){
# split vh_file.
my_list <- strsplit(vh_file$ViralRefSeq_taxonomy,split = "|",fixed = TRUE)
# Apply the function to each sublist
viridae_elements <- lapply(my_list, extract_viridae)
# Initialize an empty vector to store the filtered names
filtered_names <- vector("list", length = length(viridae_elements))
# Iterate over each element in viridae_elements
for (i in seq_along(viridae_elements)) {
# Check if the element contains two or more strings
if (length(viridae_elements[[i]]) >= 2) {
# Extract only the virus family names without additional text
filtered_names[[i]] <- grep("^[[:alnum:]]+viridae$", viridae_elements[[i]], value = TRUE)
} else {
# If the element contains less than two strings, keep it unchanged
filtered_names[[i]] <- viridae_elements[[i]]
}
}
# Remove elements containing "unclassified" outside the function
viridae_elements <- lapply(filtered_names, function(x) x[!grepl("unclassified", x)])
viridae_elements[is.na(viridae_elements)] <- "unclassified"
vh_file$ViralRefSeq_taxonomy <- unlist(viridae_elements)
return(vh_file)
}
test <- taxonomy_group_preprocess(vg_file)
test$ViralRefSeq_taxonomy
test$ViralRefSeq_taxonomy = "unclassified"
test$ViralRefSeq_taxonomy
test <- taxonomy_group_preprocess(vg_file)
View(test)
View(vg_file)
vg_file$ViralRefSeq_taxonomy[141]
document()
document()
document()
document()
document()
document()
document()
document()
library(Virusparies)
?VhgIdenFacetedScatterPlot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1
plot <- VhgIdenFacetedScatterPlot(vh_file,cutoff = 1e-5)
?VhgIdentityScatterPlot
VhgIdentityScatterPlot(vh_file,cutoff = 1e-5)
?VhgIdenFacetedScatterPlot
VhgIdenFacetedScatterPlot(vh_file,cutoff = 1e-5)
VhgIdenFacetedScatterPlot(vh_file,cutoff = 1e-5,legend_title = "test")
VhgIdenFacetedScatterPlot(vh_file,cutoff = 1e-5,legend_position = "right")
document()
check()
document()
check()
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
# plot 1: plot boxplot for "identity"
plot <- vhRunsBarplot(vh_file,cut = 1e-5)
plot
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
# plot 1: plot boxplot for "identity"
vhRunsBarplot(vg_file,groupby = "ViralRefSeq_taxonomy",cut = 1e-5)
vhRunsTable(vg_file)
document()
check()
document()
check()
vhRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
document()
document()
check()
document()
check()
install()
vhRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
VhgRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
library(Virusparies)
?VhgRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
VhgRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
?VhgBoxplot
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
VhgRunsTable(vg_file,groupby = "ViralRefSeq_taxonomy")
library(devtools)
document()
check()
document()
document()
document()
check()
document()
check()
document()
document()
check()
document()
document()
check()
