print(paste0("using the following cut off: ", cutoff))
boxp <- ggplot(vh_file,aes(x=reorder(best_query,-log10(ViralRefSeq_E),FUN=median),
y=-log10(ViralRefSeq_E),fill=best_query))+
geom_boxplot(staplewidth = 0.4)+
labs(x="virus family query",
y="-log10 of viral Reference E-values",
title="Boxplot plotting viral Refrence E-Values for each virus family",
subtitle = paste0("red line shows viral Refrence E-values under user-defined threshold: ",10^(-cutoff)," (-log10 scale: ",cutoff,")"))+
geom_hline(aes(yintercept=cutoff), colour="#990000")+
theme_linedraw()+
theme(legend.position = "bottom")+
guides(fill=guide_legend(title="virus family"))+
coord_flip()+
theme(
# This is the new default font in the plot
text = element_text(family = "Roboto", size = 8, color = "black"),
plot.title = element_text(
family = "Lobster Two",
size = 16,
face = "bold",
color = "#2a475e"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.key.size = unit(1.5, "lines"),
legend.title = element_text(size = 12, face = "bold"),
plot.subtitle = element_text(size = 10)
)
}
if(eval_vs_iden=="identity"){
message("boxplot plotting identity for each virus group")
boxp <- ggplot(xlsx_file,aes(x=reorder(best_query,ViralRefSeq_ident,FUN=median),
y=ViralRefSeq_ident,fill=best_query))+
geom_boxplot(staplewidth = 0.4)+
labs(x="virus family query",
y="-log10 of viral Reference Identity",
title="Boxplot plotting viral Refrence Identity for each virus family")+
theme_linedraw()+
theme(legend.position = "bottom")+
guides(fill=guide_legend(title="virus family"))+
coord_flip()+
theme(
# This is the new default font in the plot
text = element_text(family = "Roboto", size = 8, color = "black"),
plot.title = element_text(
family = "Lobster Two",
size = 16,
face = "bold",
color = "#2a475e"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.key.size = unit(1.5, "lines"),
legend.title = element_text(size = 12, face = "bold")
)
}
if(eval_vs_iden=="evalue"){
print("generating summary stats in dataframe and gt-table outlier extraction for evalue-boxplots")
summary_stats <- vh_sum_stat_evavlue_boxplot(vh_file,cutoff)
outlier <- find_outlier_eval_box(vh_file)
gt_tablebox <- creat_table_eval_box(summary_stats)
}
if(eval_vs_iden=="identity"){
print("generating summary stats in dataframe and gt-table for identity-boxplots")
summary_stats <- summary_stats_identity(vh_file)
gt_tablebox <- summary_stats_identity_gt(summary_stats)
}
plot(boxp)
if(eval_vs_iden=="evalue"){
return(list(boxp=boxp,summary_stats=summary_stats,outlier=outlier,gt_tablebox=gt_tablebox))
}
if(eval_vs_iden=="identity"){
return(list(boxp=boxp,summary_stats=summary_stats,gt_tablebox=gt_tablebox))
}
}
test <- vh_refeval_iden_boxplot(xlsx_file,eval_vs_iden = "identity")
vh_refeval_iden_boxplot <- function(vh_file,cut = 1e-5,eval_vs_iden="evalue"){
# define a cut off fot evalue significance
cutoff <- -log10(cut)
########################
### generate boxplot ###
########################
if(eval_vs_iden=="evalue"){
message("boxplot plotting RefSeq evalues for each virus group")
print(paste0("using the following cut off: ", cutoff))
boxp <- ggplot(vh_file,aes(x=reorder(best_query,-log10(ViralRefSeq_E),FUN=median),
y=-log10(ViralRefSeq_E),fill=best_query))+
geom_boxplot(staplewidth = 0.4)+
labs(x="virus family query",
y="-log10 of viral Reference E-values",
title="Boxplot plotting viral Refrence E-Values for each virus family",
subtitle = paste0("red line shows viral Refrence E-values under user-defined threshold: ",10^(-cutoff)," (-log10 scale: ",cutoff,")"))+
geom_hline(aes(yintercept=cutoff), colour="#990000")+
theme_linedraw()+
theme(legend.position = "bottom")+
guides(fill=guide_legend(title="virus family"))+
coord_flip()+
theme(
# This is the new default font in the plot
text = element_text(family = "Roboto", size = 8, color = "black"),
plot.title = element_text(
family = "Lobster Two",
size = 16,
face = "bold",
color = "#2a475e"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.key.size = unit(1.5, "lines"),
legend.title = element_text(size = 12, face = "bold"),
plot.subtitle = element_text(size = 10)
)
}
if(eval_vs_iden=="identity"){
message("boxplot plotting identity for each virus group")
boxp <- ggplot(xlsx_file,aes(x=reorder(best_query,ViralRefSeq_ident,FUN=median),
y=ViralRefSeq_ident,fill=best_query))+
geom_boxplot(staplewidth = 0.4)+
labs(x="virus family query",
y="-log10 of viral Reference Identity",
title="Boxplot plotting viral Refrence Identity for each virus family")+
theme_linedraw()+
theme(legend.position = "bottom")+
guides(fill=guide_legend(title="virus family"))+
coord_flip()+
theme(
# This is the new default font in the plot
text = element_text(family = "Roboto", size = 8, color = "black"),
plot.title = element_text(
family = "Lobster Two",
size = 16,
face = "bold",
color = "#2a475e"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.key.size = unit(1.5, "lines"),
legend.title = element_text(size = 12, face = "bold")
)
}
if(eval_vs_iden=="evalue"){
print("generating summary stats in dataframe and gt-table outlier extraction for evalue-boxplots")
summary_stats <- vh_sum_stat_evavlue_boxplot(vh_file,cutoff)
outlier <- find_outlier_eval_box(vh_file)
gt_tablebox <- creat_table_eval_box(summary_stats)
}
if(eval_vs_iden=="identity"){
print("generating summary stats in dataframe and gt-table for identity-boxplots")
summary_stats <- summary_stats_identity(vh_file)
gt_tablebox <- summary_stats_identity_gt(summary_stats)
gt_tablebox
}
plot(boxp)
if(eval_vs_iden=="evalue"){
return(list(boxp=boxp,summary_stats=summary_stats,outlier=outlier,gt_tablebox=gt_tablebox))
}
if(eval_vs_iden=="identity"){
return(list(boxp=boxp,summary_stats=summary_stats,gt_tablebox=gt_tablebox))
}
}
test <- vh_refeval_iden_boxplot(xlsx_file,eval_vs_iden = "identity")
gt(test[3])
gt(test[[3]])
test <- vh_refeval_iden_boxplot(xlsx_file,eval_vs_iden = "evalue")
vh_refeval_iden_boxplot <- function(vh_file,cut = 1e-5,eval_vs_iden="evalue"){
# define a cut off fot evalue significance
cutoff <- -log10(cut)
########################
### generate boxplot ###
########################
if(eval_vs_iden=="evalue"){
message("boxplot plotting RefSeq evalues for each virus group")
print(paste0("using the following cut off: ", cutoff))
boxp <- ggplot(vh_file,aes(x=reorder(best_query,-log10(ViralRefSeq_E),FUN=median),
y=-log10(ViralRefSeq_E),fill=best_query))+
geom_boxplot(staplewidth = 0.4)+
labs(x="virus family query",
y="-log10 of viral Reference E-values",
title="Boxplot plotting viral Refrence E-Values for each virus family",
subtitle = paste0("red line shows viral Refrence E-values under user-defined threshold: ",10^(-cutoff)," (-log10 scale: ",cutoff,")"))+
geom_hline(aes(yintercept=cutoff), colour="#990000")+
theme_linedraw()+
theme(legend.position = "bottom")+
guides(fill=guide_legend(title="virus family"))+
coord_flip()+
theme(
# This is the new default font in the plot
text = element_text(family = "Roboto", size = 8, color = "black"),
plot.title = element_text(
family = "Lobster Two",
size = 16,
face = "bold",
color = "#2a475e"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.key.size = unit(1.5, "lines"),
legend.title = element_text(size = 12, face = "bold"),
plot.subtitle = element_text(size = 10)
)
}
if(eval_vs_iden=="identity"){
message("boxplot plotting identity for each virus group")
boxp <- ggplot(xlsx_file,aes(x=reorder(best_query,ViralRefSeq_ident,FUN=median),
y=ViralRefSeq_ident,fill=best_query))+
geom_boxplot(staplewidth = 0.4)+
labs(x="virus family query",
y="-log10 of viral Reference Identity",
title="Boxplot plotting viral Refrence Identity for each virus family")+
theme_linedraw()+
theme(legend.position = "bottom")+
guides(fill=guide_legend(title="virus family"))+
coord_flip()+
theme(
# This is the new default font in the plot
text = element_text(family = "Roboto", size = 8, color = "black"),
plot.title = element_text(
family = "Lobster Two",
size = 16,
face = "bold",
color = "#2a475e"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.key.size = unit(1.5, "lines"),
legend.title = element_text(size = 12, face = "bold")
)
}
if(eval_vs_iden=="evalue"){
print("generating summary stats in dataframe and gt-table outlier extraction for evalue-boxplots")
summary_stats <- vh_sum_stat_evavlue_boxplot(vh_file,cutoff)
outlier <- find_outlier_eval_box(vh_file)
gt_tablebox <- creat_table_eval_box(summary_stats)
gt(gt_tablebox)
}
if(eval_vs_iden=="identity"){
print("generating summary stats in dataframe and gt-table for identity-boxplots")
summary_stats <- summary_stats_identity(vh_file)
gt_tablebox <- summary_stats_identity_gt(summary_stats)
}
plot(boxp)
if(eval_vs_iden=="evalue"){
return(list(boxp=boxp,summary_stats=summary_stats,outlier=outlier,gt_tablebox=gt_tablebox))
}
if(eval_vs_iden=="identity"){
return(list(boxp=boxp,summary_stats=summary_stats,gt_tablebox=gt_tablebox))
}
}
test <- vh_refeval_iden_boxplot(xlsx_file,eval_vs_iden = "evalue")
test[["gt_tablebox"]]
library(devtools)
devtools::document()
devtools::document()
use_gpl3_license()
library(devtools)
library(gt)
use_package("gt",type="Imports")
use_package("ggplot2",type="Imports")
use_package("dplyr",type="Imports")
library(stringr)
use_package("stringr",type="Imports")
library(ggplot2)
library(dplyr)
devtools::document()
devtools::document()
library(roxygen2)
devtools::document()
library(devtools)
document()
document()
warnings()
document()
document()
devtools::test()
devtools::check()
document()
use_package("stats",type="Imports")
document()
devtools::check()
document()
devtools::check()
use_package("rlang",type="Imports")
document()
devtools::check()
document()
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
rm(list = ls())
## packages ##
library(dplyr)
library(ggplot2)
library(readxl)
library(stringr)
library(gt)
## import ##
plot_name <- "may7_tauberthittables_20055"
vhvg <- "Virushunter" # specify if you plot virushunter or virusgatherer results.
xlsx_file <- read_excel("data/test_for_plots/virushunter(1).xlsx")
library(devtools)
document()
devtools::check()
devtools::build()
devtools::install()
library(remotes)
remotes::install_github("SergejRuff/Virusparies")
library(Virusparies)
library(devtools)
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
devtools::build()
class(1e⁵)
class(1e5)
document()
use_package("utils",type="Imports")
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
devtools::build()
document()
devtools::build()
devtools::check()
document()
devtools::check()
devtools::build()
devtools::document()
devtools::install()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
check()
devtools::build()
check()
library(devtools)
check()
document()
check()
devtools::build()
document()
build()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(devtools)
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(devtools)
document()
document()
check()
document()
document()
check()
library(devtools)
document()
check()
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
library(devtools)
document()
library(devtools)
document()
check()
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check()
library(devtools)
check()
document()
library(devtools)
document()
check()
library(devtools)
document()
check()
document()
check()
is.character("14may_anello_debug_virushunter.tsv")
is.character(14may_anello_debug_virushunter.tsv)
is.character(14may_anello_debug_virushunter.tsv)
is.character(test)
is.character(1)
is.class("14may_anello_debug_virushunter.tsv")
class("14may_anello_debug_virushunter.tsv")
class(5)
path = "14may_anello_debug_virushunter.tsv"
class(path)
path=2
class(path)
class("14may_anello_debug_virushunter.tsv")
path
if (!is.character(path)) {
stop("Error: 'path' argument must be a character string.")
}
path = "14may_anello_debug_virushunter.tsv"
if (!is.character(path)) {
stop("Error: 'path' argument must be a character string.")
}
path ="hello"
if (!is.character(path)) {
stop("Error: 'path' argument must be a character string.")
}
library(devtools)
document()
check()
use_package("utils",type = "Imports")
document()
check()
document()
library(devtools)
library(devtools)
document()
check()
library(devtools)
document()
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check()
document()
check()
library(devtools)
document()
check()
document()
library(devtools)
document()
check()
document()
check()
system.file("extdata", "virushunter.tsv", package = "Virusparies")
document()
check()
system.file("extdata", "virushunter.tsv", package = "Virusparies")
document()
check()
?head
document()
check()
