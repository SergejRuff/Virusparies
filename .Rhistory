y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = 3)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom")
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_size = "2")
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_size = "hello")
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",subtitle_colour = "test")
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",subtitle_colour = "2")
library(devtools)
document()
check()
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",legend_title_face = "bold")
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",legend_title_face = 2)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",legend_title_face = 3)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",legend_title_face = 4)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_face = 4)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_face = 3)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_colour = 3)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = "bottom",title_colour = 4)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = 3)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = 2)
VhgBoxplot(vh_file,
x_column = "best_query",
y_column = "ViralRefSeq_E",
theme_choice = "grey",
subtitle = "Custom subtitle: Identity for custom query",
xlabel = "Custom x-axis label: Custom query",
ylabel = "Custom y-axis label: Viral Reference Evalue in -log10 scale",
legend_position = 1)
document()
check()
document()
check()
install()
library(Virusparies)
?vhIdentityBoxTable
?vhRunsBarplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vhRunsBarplot(vh_file,cut = 1e-5,legend_position = 3)
vhRunsBarplot(vh_file,cut = 1e-5,theme_choice = 3)
vhRunsBarplot(vh_file,cut = 1e-5,colormap = 3)
vhRunsBarplot(vh_file,cut = 1e-5,flip_coords = 2)
vhRunsBarplot(vh_file,cut = 1e-5,flip_coords = FALSE)
vhRunsBarplot(vh_file,cut = 1e-5,flip_coords = TRUE)
vhRunsBarplot(vh_file,cut = 1e-5,colorblind_support = 3)
vhRunsBarplot(vh_file,cut = 1e-5,colorblind_support = TRUE)
vhRunsBarplot(vh_file,cut = 1e-5,colorblind_support = TRUE,colormap = 3)
vhRunsBarplot(vh_file,cut = 1e-5,colorblind_support = TRUE,colormap = "A")
cut = 1e-5
-log10(cut)
cut = 0.00001
-log10(cut)
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",cut = 0.00001)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",cut = 0.0000000000001)
library(devtools)
document()
document()
check()
install()
library(Virusparies)
?VhgIdenFacetedScatterPlot
library(devtools)
document()
install()
?vhRunsBarplot
?VhgBoxplot
?`Virusparies-package`
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",cut = 1)
max(vh_file$ViralRefSeq_E)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",cut = 0.014)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",cut = 10000)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",cut = 0.19)
VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E",cut = 0.24)
max(-log10(vh_file$ViralRefSeq_E))
min(-log10(vh_file$ViralRefSeq_E))
library(devtools)
document()
check()
document()
check()
install()
names(vh_file)
document()
check()
install()
library(Virusparies)
?vhIdentityBoxTable
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
vhIdentityBoxTable(vh_file)
?vhSumHitsBarplot
# plot 1: plot boxplot for "identity"
plot <- vhSumHitsBarplot(vh_file,cut = 1e-5)
plot
vhEvalBoxTable(plot$vh_group)
lib+
library(devtools)
document()
check()
install()
library(Virusparies)
?vhgTabularRasa
library(devtools)
document()
check()
install()
library(Virusparies)
?vhgTabularRasa
library(devtools)
document()
check()
install()
library(Virusparies)
?vhgTabularRasa
library(devtools)
usethis::use_citation()
library(dplyr)
citation("dplyr")
library(Virusparies)
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
names(vh_file)
identity <- VhgBoxplot(vh_file,y_column = "ViralRefSeq_ident")
identity$boxp
vhgTabularRasa(identity$summary_stats)
test <- vhgTabularRasa(identity$summary_stats)
vh_file_part <- vh_file[c(1:10),c(1,7,9,10,11)]
vh_file_part
vhgTabularRasa(vh_file_part)
vhgTabularRasa(vh_file_part,title = "first 10 rows of vh_file",subtit = "example for any table",names_ = c("Runs","Number of Contigs","Best Query Result","Refrence E-Value","Refrence Identity"))
library(devtools)
document()
check()
document()
check()
install()
library(Virusparies)
citation("Virusparies")
library(devtools)
use_version()
document()
check()
document()
check()
document()
check()
install()
library(Virusparies)
citation("Virusparies")
print(<citation>, bibtex=TRUE)
toBibtex(.)
library(devtools)
document()
check()
install()
library(Virusparies)
citation("Virusparies")
library(dplyr)
citation("dplyr")
library(devtools)
document()
check()
install()
library(devtools)
library(Virusparies)
citation("Virusparies")
library(dplyr)
citation("dplyr")
?vhgTabularRasa
library(devtools)
document()
class("#990000")
# Create a small matrix with no column names
matrix_data <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3)
# Print the matrix
print(matrix_data)
vhgTabularRasa(matrix_data)
vhgTabularRasa(as.data.frame(matrix_data))
check_is_dataframe <- function(obj) {
if (!is.data.frame(obj)) {
stop("The provided object is not a data.frame.")
}
message("The provided object is a data.frame.")
}
check_is_dataframe(as.data.frame(matrix_data))
check_is_dataframe(matrix_data)
check_is_dataframe(list(matrix_data))
check_is_dataframe <- function(obj) {
if (!is.data.frame(obj)) {
stop("The provided object is not a data.frame.")
}
}
check_is_dataframe(as.data.frame(matrix_data))
as.data.frame(matrix_data)
# Create a data frame
df <- data.frame(matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3))
# Remove column names
colnames(df) <- NULL
# Print the data frame
print(df)
vhgTabularRasa(df)
View(df)
vhgTabularRasa(df,names_ = c("1","2","3"))
names(df)
document()
pkgload::dev_help('vhgTabularRasa')
colnames(df)
check_columns <- function(df) {
if (is.null(colnames(df))) {
stop("The data frame has no column names.")
}
if (any(colnames(df) == "")) {
stop("The data frame has empty column names.")
}
}
check_columns(df)
document()
check()
document()
check()
install()
library(Virusparies)
?vhgTabularRasa
library(devtools)
document()
install()
library(devtools)
install()
library(Virusparies)
?vhgTabularRasa
library(gt)
citation(gt)
citation("gt")
library(devtools)
document()
check()
install()
library(Virusparies)
?vhgTabularRasa
citation("Virusparies")
?VhgBoxplot
?`Virusparies-package`
library(devtools)
document()
check()
install()
document()
install()
library(Virusparies)
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
View(vh_file)
View(vh_file)
# import gatherer files
path2 <- system.file("extdata", "virusgatherer.tsv", package = "Virusparies")
vg_file <- importVirusTable(path2)
View(vg_file)
names(vh_file)
names(vg_file)
library(devtools)
document()
check()
below_threshold <- aggregate(SRA_run ~ best_query, data = subset(vh_file, vh_file$ViralRefSeq_E < 10^(-cutoff)), sum)
cutoff=0.00001
cutoff=0.00001
below_threshold <- aggregate(SRA_run ~ best_query, data = subset(vh_file, vh_file$ViralRefSeq_E < 10^(-cutoff)), sum)
View(as.numeric(vh_file$SRA_run))
head(as.numeric(vh_file$SRA_run))
head(vh_file$SRA_run)
below_threshold <- aggregate(SRA_run ~ best_query, data = subset(vh_file, vh_file$ViralRefSeq_E < 10^(-cutoff)), FUN = function(x) {
table(x)
})
View(below_threshold)
below_threshold <- aggregate(SRA_run ~ best_query, data = subset(vh_file, ViralRefSeq_E < 10^(-cutoff)), FUN = length)
below_threshold
?vhRunsBarplot
167+2+6+5
below_threshold <- aggregate(SRA_run ~ best_query, data = subset(vh_file, ViralRefSeq_E < 10^(-cutoff)), FUN = function(x) {
sum(ViralRefSeq_E < 10^(-cutoff))
})
below_threshold <- aggregate(SRA_run ~ best_query, data = vh_file[ViralRefSeq_E < 10^(-cutoff), ], FUN = function(x) {
sum(ViralRefSeq_E < 10^(-cutoff))
})
below_threshold <- aggregate(SRA_run ~ best_query, data = vh_file[ViralRefSeq_E < 10^(-cutoff), ], FUN = function(x) {
sum(vh_file$ViralRefSeq_E < 10^(-cutoff))
})
below_threshold <- aggregate(SRA_run ~ best_query, data = vh_file[vh_file$ViralRefSeq_E < 10^(-cutoff), ], FUN = function(x) {
sum(vh_file$ViralRefSeq_E < 10^(-cutoff))
})
below_threshold
below_threshold <- aggregate(SRA_run ~ best_query, data = vh_file[ViralRefSeq_E < 10^(-cutoff), ], FUN = length)
below_threshold
below_threshold <- aggregate(SRA_run ~ best_query, data = vh_file, FUN = function(x) {
sum(vh_file$ViralRefSeq_E[x < 10^(-cutoff)])
})
below_threshold
below_threshold <- aggregate(SRA_run ~ best_query, data = vh_file, FUN = function(x) {
sum(vh_file$ViralRefSeq_E < 10^(-cutoff))
})
below_threshold
below_threshold <- aggregate(SRA_run ~ best_query, data = vh_file, FUN = function(x) {
sum(vh_file$ViralRefSeq_E[x < 10^(-cutoff)] < 10^(-cutoff))
})
below_threshold
below_threshold <- vh_file %>%
group_by(best_query) %>%
summarize(SRA_run = sum(ViralRefSeq_E < 10^(-cutoff)))
below_threshold
vh_file[vh_file$ViralRefSeq_E<1e-5,]
length(vh_file[vh_file$ViralRefSeq_E<1e-5,])
nrow(vh_file[vh_file$ViralRefSeq_E<1e-5,])
10^(-5)
below_threshold <- vh_file %>%
group_by(best_query) %>%
summarize(SRA_run = sum(ViralRefSeq_E < 10^(-cutoff)))
below_threshold
# Find the smallest value greater than 0 in ViralRefSeq_E
min_positive_value <- min(vh_file$ViralRefSeq_E[vh_file$ViralRefSeq_E > 0])
# Replace all 0 values with the smallest positive value
vh_file$ViralRefSeq_E[vh_file$ViralRefSeq_E == 0] <- min_positive_value
below_threshold <- vh_file %>%
group_by(best_query) %>%
summarize(SRA_run = sum(ViralRefSeq_E < 10^(-cutoff)))
below_threshold
below_threshold <- vh_file %>%
filter(ViralRefSeq_E < 10^(-cutoff)) %>%
group_by(best_query) %>%
summarize(SRA_run = n())
below_threshold
below_threshold <- table(vh_file$best_query[vh_file$ViralRefSeq_E < 10^(-cutoff)])
below_threshold
below_threshold <- vh_file %>%
group_by(best_query) %>%
summarize(SRA_run = sum(ViralRefSeq_E < 10^(-5)))
below_threshold
154+1+6+5
aggregate(num_hits ~ best_query, data = subset(vh_file, vh_file$ViralRefSeq_E < 10^(-cutoff)), sum)
aggregate(SRA_run ~ best_query, data = vh_file, sum)
vh_file %>%
group_by(best_query) %>%
summarize(SRA_run = n())
library(devtools)
document()
check()
document()
check()
install()
library(Virusparies)
?VhgBoxplot
path <- system.file("extdata", "virushunter.tsv", package = "Virusparies")
vh_file <- importVirusTable(path)
plot1 <- VhgBoxplot(vh_file, x_column = "best_query", y_column = "ViralRefSeq_E")
plot1$summary_stats
vh_file %>%
group_by(.data$best_query) %>%
summarize(SRA_run = sum(.data$ViralRefSeq_E < 10^(-5)))
below_threshold <- vh_file %>%
group_by(.data$best_query) %>%
summarize(SRA_run = sum(.data$ViralRefSeq_E < 10^(-5)))
below_threshold
library(dplyr)
below_threshold <- vh_file %>%
group_by(.data$best_query) %>%
summarize(SRA_run = sum(.data$ViralRefSeq_E < 10^(-5)))
below_threshold
# Calculate the total hits for each best_query group
total_hits <- vh_file %>%
group_by(.data$best_query) %>%
summarize(SRA_run = n())
# Calculate the total hits for each best_query group
total_hits
below_threshold <- vh_file %>%
group_by(.data$best_query) %>%
summarize(SRA_run = sum(.data$ViralRefSeq_E < 10^(-5)))
below_threshold
median(1.28e-12,1.28e-04)
# Calculate the percentage of hits below the threshold
below_threshold <- merge(below_threshold, total_hits, by = "best_query")
below_threshold$percentage_below_thr <- with(below_threshold, (SRA_run.x / SRA_run.y) * 100)
# Rename and keep only the relevant SRA_run column
below_threshold$SRA_run_belowThreshold <- below_threshold$SRA_run.x  # Keeping SRA_run.x and renaming it to SRA_run
below_threshold
median(12,7)
median(12,4)
median(4,12)
library(devtools)
document()
document()
check()
document()
check()
document()
check()
install()
